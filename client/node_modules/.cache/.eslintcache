[{"/Users/vmihaylov/PycharmProjects/second_eye/client/src/index.js":"1","/Users/vmihaylov/PycharmProjects/second_eye/client/src/App.js":"2","/Users/vmihaylov/PycharmProjects/second_eye/client/src/reportWebVitals.js":"3","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/CapacityAndQueue.js":"4","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamDetail.js":"5","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamPlanningPeriodSystemDetail.js":"6","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ChangeRequestDetail.js":"7","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/CompanyDetail.js":"8","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonDetail.js":"9","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/EpicDetail.js":"10","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodDetail.js":"11","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamPlanningPeriodDetail.js":"12","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodPersonDetail.js":"13","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonList.js":"14","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamQuarterDetail.js":"15","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/EpicSystemDetail.js":"16","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonSystemChangeRequestDetail.js":"17","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodPersonsList.js":"18","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonMonthDetailByPersonKeyAndMonth.js":"19","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonListByProjectTeamIdAndMonth.js":"20","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamPlanningPeriodDetail.js":"21","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectManagerList.js":"22","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamDetail.js":"23","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodProjectTeamsList.js":"24","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectManagerDetail.js":"25","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamList.js":"26","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemList.js":"27","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamPlanningPeriodSystemDetail.js":"28","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemDetail.js":"29","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemChangeRequestDetail.js":"30","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemPlanningPeriodDetail.js":"31","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamQuarterDetail.js":"32","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/QuarterProjectTeamList.js":"33","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/QuarterDetail.js":"34","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/TimeSheetsByDateIssueChart.js":"35","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ValueByDatePeriodChart.js":"36","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ReengineeringByDatePeriodChart.js":"37","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/TimeSheetsByDatePeriodChart.js":"38","/Users/vmihaylov/PycharmProjects/second_eye/client/src/utils.js":"39"},{"size":7783,"mtime":1667922788608,"results":"40","hashOfConfig":"41"},{"size":124,"mtime":1666938632915,"results":"42","hashOfConfig":"41"},{"size":362,"mtime":1666938632908,"results":"43","hashOfConfig":"41"},{"size":7516,"mtime":1667987868812,"results":"44","hashOfConfig":"41"},{"size":12098,"mtime":1667983090080,"results":"45","hashOfConfig":"41"},{"size":7340,"mtime":1667984257735,"results":"46","hashOfConfig":"41"},{"size":12636,"mtime":1667977287727,"results":"47","hashOfConfig":"41"},{"size":14909,"mtime":1667987868815,"results":"48","hashOfConfig":"41"},{"size":16904,"mtime":1667987127839,"results":"49","hashOfConfig":"41"},{"size":15939,"mtime":1666938632911,"results":"50","hashOfConfig":"41"},{"size":11723,"mtime":1667991756834,"results":"51","hashOfConfig":"41"},{"size":19570,"mtime":1667987868809,"results":"52","hashOfConfig":"41"},{"size":5071,"mtime":1670260424538,"results":"53","hashOfConfig":"41"},{"size":3248,"mtime":1667981221259,"results":"54","hashOfConfig":"41"},{"size":17962,"mtime":1667987868819,"results":"55","hashOfConfig":"41"},{"size":7254,"mtime":1666938632914,"results":"56","hashOfConfig":"41"},{"size":2696,"mtime":1670263596385,"results":"57","hashOfConfig":"41"},{"size":2619,"mtime":1667996674943,"results":"58","hashOfConfig":"41"},{"size":16550,"mtime":1667980302119,"results":"59","hashOfConfig":"41"},{"size":5205,"mtime":1667980567998,"results":"60","hashOfConfig":"41"},{"size":17438,"mtime":1666938632914,"results":"61","hashOfConfig":"41"},{"size":6117,"mtime":1667980984966,"results":"62","hashOfConfig":"41"},{"size":17995,"mtime":1667922756365,"results":"63","hashOfConfig":"41"},{"size":4309,"mtime":1666938632912,"results":"64","hashOfConfig":"41"},{"size":8152,"mtime":1667981107356,"results":"65","hashOfConfig":"41"},{"size":4223,"mtime":1667981986073,"results":"66","hashOfConfig":"41"},{"size":2242,"mtime":1667981398938,"results":"67","hashOfConfig":"41"},{"size":8195,"mtime":1666938632915,"results":"68","hashOfConfig":"41"},{"size":4199,"mtime":1667981601504,"results":"69","hashOfConfig":"41"},{"size":6738,"mtime":1667977635866,"results":"70","hashOfConfig":"41"},{"size":10999,"mtime":1666938632914,"results":"71","hashOfConfig":"41"},{"size":21769,"mtime":1667978281288,"results":"72","hashOfConfig":"41"},{"size":5233,"mtime":1667978725395,"results":"73","hashOfConfig":"41"},{"size":17792,"mtime":1667977943163,"results":"74","hashOfConfig":"41"},{"size":4046,"mtime":1666938632914,"results":"75","hashOfConfig":"41"},{"size":2986,"mtime":1666938632915,"results":"76","hashOfConfig":"41"},{"size":2884,"mtime":1666938632912,"results":"77","hashOfConfig":"41"},{"size":3807,"mtime":1666938632914,"results":"78","hashOfConfig":"41"},{"size":436,"mtime":1666938632915,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"1f322zz",{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"83"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"83"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"83"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"83"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"83"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"83"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"83"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"83"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"83"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"83"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"83"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"83"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"83"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"83"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"83"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"83"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"83"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"83"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"83"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"83"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"/Users/vmihaylov/PycharmProjects/second_eye/client/src/index.js",[],[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/App.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/reportWebVitals.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/CapacityAndQueue.js",["218","219"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport Typography from '@material-ui/core/Typography';\nimport {Box} from \"@material-ui/core\";\nimport {BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport,} from '@mui/x-data-grid-pro';\nimport {Link as RouterLink} from \"react-router-dom\";\n\nconst fetchCapacityAndQueue = gql`\n    query capacityAndQueue {\n        companies {\n            id\n            name         \n            queueLength\n        }\n        \n        dedicatedTeams {\n            id\n            name\n            queueLength\n        }\n        \n        projectTeams {\n            id\n            name\n            queueLength\n            \n            dedicatedTeam {\n                name\n            }\n        }\n    }\n`;\n\nfunction ToolBarWithExport() {\n    return (\n        <GridToolbarContainer>\n            <GridToolbarExport\n                csvOptions={{\n                    delimiter: \";\",\n                    utf8WithBom: true,\n                }}\n            />\n\n\n        </GridToolbarContainer>\n    );\n}\n\nfunction CapacityAndQueue() {\n    const {loading, error, data} = useQuery(fetchCapacityAndQueue);\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const companies = data.companies\n    const dedicatedTeams = data.dedicatedTeams\n    const projectTeams = data.projectTeams\n\n    const companiesQueue = companies.slice().map(\n        company => {\n            return {\n                id: company.id,\n                name: company.name,\n                queueLength: Math.round(company.queueLength),\n            }\n        }\n    )\n\n    const dedicatedTeamsQueue = dedicatedTeams.slice().map(\n        dedicatedTeam => {\n            return {\n                id: dedicatedTeam.id,\n                name: dedicatedTeam.name,\n                queueLength: Math.round(dedicatedTeam.queueLength),\n            }\n        }\n    )\n\n    const projectTeamsQueue = projectTeams.slice().map(\n        projectTeam => {\n            return {\n                id: projectTeam.id,\n                name: projectTeam.name + \" : \" + projectTeam.dedicatedTeam.name,\n                queueLength: Math.round(projectTeam.queueLength),\n            }\n        }\n    )\n\n    const top10ProjectTeams = projectTeamsQueue.sort(\n        function (a, b) {\n            return b.queueLength - a.queueLength\n        }\n    ).slice(0, 9)\n\n    const top20To50ProjectTeams = projectTeamsQueue.sort(\n        function (a, b) {\n            return b.queueLength - a.queueLength\n        }\n    ).slice(10)\n\n    const topDedicatedTeams = dedicatedTeamsQueue.sort(\n        function (a, b) {\n            return b.queueLength - a.queueLength\n        }\n    )\n\n    const topDedicatedTeamsColumns = [\n        {\n            field: 'name',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/dedicatedTeams/${params.getValue(params.id, 'id')}`}>\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'queueLength',\n            headerName: 'Очередь (мес)',\n            flex: 1,\n        },\n    ];\n\n    const topProjectTeams = projectTeamsQueue.sort(\n        function (a, b) {\n            return b.queueLength - a.queueLength\n        }\n    )\n\n    const topProjectTeamsColumns = [\n        {\n            field: 'name',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/projectTeams/${params.getValue(params.id, 'id')}`}>\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'queueLength',\n            headerName: 'Очередь (мес)',\n            flex: 1,\n        },\n    ];\n\n    return (\n        <Box>\n            <Typography variant=\"body1\">\n                Выделенные команды (месяцы)\n            </Typography>\n            <BarChart\n                width={1600}\n                height={800}\n                data={topDedicatedTeams}\n                margin={{\n                    top: 5,\n                    right: 30,\n                    left: 30,\n                    bottom: 400,\n                }}\n                barCategoryGap=\"10%\"\n                barGap=\"0%\"\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"}/>\n                <YAxis domain={['auto', 'auto']}/>\n                <Tooltip/>\n                <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\"/>\n                <Bar dataKey=\"queueLength\" name={\"Очередь (мес)\"}/>\n            </BarChart>\n\n            <div>\n                <DataGridPro\n                    rows={topDedicatedTeams}\n                    columns={topDedicatedTeamsColumns}\n                    components={{\n                        Toolbar: ToolBarWithExport,\n                    }}\n                    autoHeight\n                />\n            </div>\n\n            <Typography variant=\"body1\">\n                Top-10 проектных команд (месяцы)\n            </Typography>\n            <BarChart\n                width={1600}\n                height={800}\n                data={top10ProjectTeams}\n                margin={{\n                    top: 5,\n                    right: 30,\n                    left: 30,\n                    bottom: 400,\n                }}\n                barCategoryGap=\"10%\"\n                barGap=\"0%\"\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"}/>\n                <YAxis domain={['auto', 'auto']}/>\n                <Tooltip/>\n                <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\"/>\n                <Bar dataKey=\"queueLength\" name={\"Очередь (мес)\"}/>\n            </BarChart>\n\n            <Typography variant=\"body1\">\n                Остальные проектные команды (месяцы)\n            </Typography>\n            <BarChart\n                width={1600}\n                height={800}\n                data={top20To50ProjectTeams}\n                margin={{\n                    top: 5,\n                    right: 30,\n                    left: 30,\n                    bottom: 400,\n                }}\n                barCategoryGap=\"10%\"\n                barGap=\"0%\"\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"}/>\n                <YAxis domain={['auto', 'auto']}/>\n                <Tooltip/>\n                <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\"/>\n                <Bar dataKey=\"queueLength\" name={\"Очередь (мес)\"}/>\n            </BarChart>\n\n            <div>\n                <DataGridPro\n                    rows={topProjectTeams}\n                    columns={topProjectTeamsColumns}\n                    components={{\n                        Toolbar: ToolBarWithExport,\n                    }}\n                    autoHeight\n                />\n            </div>\n        </Box>\n    );\n}\n\nexport default CapacityAndQueue;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamDetail.js",["220","221"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport Typography from '@material-ui/core/Typography';\nimport {Box} from \"@material-ui/core\";\nimport {Link as RouterLink, useParams} from \"react-router-dom\";\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\";\n\nconst fetchDedicatedTeamByDedicatedTeamId = gql`\n         query DedicatedTeamById($id: Int!) {\n              dedicatedTeamById(id: $id) {\n                    id\n                    estimate\n                    name\n                    cio {\n                        name\n                    }\n                    cto {\n                        name\n                    }\n                    calculatedFinishDate\n               \n                    timeSheetsByDate {\n                        date\n                        timeSpentCumsum\n                        timeSpentCumsumPrediction\n                        timeSpentWithoutValuePercentCumsum\n                        timeSpentWithValuePercentCumsum\n                        timeSpentForReengineeringPercentCumsum\n                        timeSpentNotForReengineeringPercentCumsum\n                    }\n               \n                    projectTeams {\n                        id\n                        estimate\n                        timeLeft\n                        name\n                        calculatedFinishDate\n                        timeSpentChronon\n                        queueLength\n                        positionPersonPlanFactIssueCount\n                        timeSpentForReengineeringPercent\n                    }\n                    \n                    dedicatedTeamPlanningPeriods {\n                        planningPeriod {\n                            id \n                            name\n                            start\n                            end\n                        }\n                        calculatedFinishDate\n                        estimate\n                        timeLeft\n                        effortPerFunctionPoint\n                        timeSpentChronon\n                    }\n              }\n        }\n`;\n\nfunction DedicatedTeamDetail() {\n    const {dedicatedTeamId} = useParams();\n    const {loading, error, data} = useQuery(fetchDedicatedTeamByDedicatedTeamId, {\n        variables: {id: dedicatedTeamId}\n    });\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const dedicatedTeam = data.dedicatedTeamById\n\n    const dedicatedTeamName = dedicatedTeam.name\n    const cioName = dedicatedTeam.cio.name\n    const ctoName = dedicatedTeam.cto.name\n    const estimate = dedicatedTeam.estimate\n\n    const timeSheetsByDate = dedicatedTeam.timeSheetsByDate\n    const calculatedFinishDate = dedicatedTeam.calculatedFinishDate\n\n    const dedicatedTeamPlanningPeriods = dedicatedTeam.dedicatedTeamPlanningPeriods\n\n    const today = (new Date()).getTime()\n    const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\n    const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\n\n    const allEdgeDates = [today]\n\n    if (firstTimeSheetDate) {\n        allEdgeDates.push(firstTimeSheetDate)\n    }\n\n    if (lastTimeSheetDate) {\n        allEdgeDates.push(lastTimeSheetDate)\n    }\n\n    if (calculatedFinishDate) {\n        allEdgeDates.push(new Date(calculatedFinishDate).getTime())\n    }\n\n    const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\n    const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\n\n    const projectTeams = dedicatedTeam.projectTeams\n\n    const projectTeamsTableContents = projectTeams.slice()\n        .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\n        .map(projectTeam => (\n            {\n                id: projectTeam.id,\n                estimate: projectTeam.estimate,\n                timeLeft: projectTeam.timeLeft,\n                name: projectTeam.name,\n                calculatedFinishDate: projectTeam.calculatedFinishDate,\n                timeSpentChronon: projectTeam.timeSpentChronon,\n                queueLength: projectTeam.queueLength,\n                positionPersonPlanFactIssueCount: projectTeam.positionPersonPlanFactIssueCount,\n                timeSpentForReengineeringPercent: projectTeam.timeSpentForReengineeringPercent,\n            }\n        ))\n\n    const projectTeamsTableColumns = [\n        {\n            field: 'projectTeamName',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/projectTeams/${params.getValue(params.id, 'id')}`}>\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'queueLength',\n            headerName: 'Длина очереди (мес)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeSpentChronon',\n            headerName: 'Трудомощность, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'positionPersonPlanFactIssueCount',\n            headerName: 'Количество проблем с планированием команды (количество членов команды разницей между планом и фактом > 0.4 FTE)',\n            width: 200,\n            align: 'right',\n        },\n        {\n            field: 'timeSpentForReengineeringPercent',\n            headerName: 'Затраты на технологическое перевооружение и исправление проблем (%)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value * 100).toLocaleString(undefined, {\n                minimumFractionDigits: 1,\n                maximumFractionDigits: 1\n            }),\n        },\n    ];\n\n    const planningPeriodsTableContents = dedicatedTeamPlanningPeriods.slice()\n        .sort((a, b) => ((a.planningPeriod.start < b.planningPeriod.start) ? 1 : ((a.planningPeriod.start > b.planningPeriod.start) ? -1 : 0)))\n        .filter(a => a.estimate > 0)\n        .map(dedicatedTeamPlanningPeriod => (\n            {\n                id: dedicatedTeamPlanningPeriod.planningPeriod.id,\n                name: dedicatedTeamPlanningPeriod.planningPeriod.name,\n                estimate: dedicatedTeamPlanningPeriod.estimate,\n                timeLeft: dedicatedTeamPlanningPeriod.timeLeft,\n                effortPerFunctionPoint: dedicatedTeamPlanningPeriod.effortPerFunctionPoint,\n                calculatedFinishDate: dedicatedTeamPlanningPeriod.calculatedFinishDate,\n                timeSpentChronon: dedicatedTeamPlanningPeriod.timeSpentChronon,\n            }\n        ))\n\n    const planningPeriodsTableColumns = [\n        {\n            field: 'name',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink\n                    to={`/planningPeriods/${params.getValue(params.id, 'id')}/dedicatedTeams/${dedicatedTeamId}`}>\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentChronon',\n            headerName: 'Трудомощность, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n\n    return (\n        <Box>\n            <Typography variant=\"body\" noWrap>\n                Выделенная команда {dedicatedTeamName}\n                <br/>\n                Бизнес-партнер {cioName}\n                <br/>\n                Руководитель разработки (CTO) {ctoName}\n                <br/>\n                Расчетная дата завершения {calculatedFinishDate}\n                <br/>\n                <br/>\n            </Typography>\n\n            <TimeSheetsByDateIssueChart\n                title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSheetsByDate={timeSheetsByDate}\n                estimate={estimate}\n                calculatedFinishDate={calculatedFinishDate}\n            />\n\n            <ReengineeringByDatePeriodChart\n                planningPeriodEnd={xAxisEnd}\n                title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSpentPercentForReengineeringAndNotForReengineeringByDate={timeSheetsByDate}\n            />\n\n            <Typography variant=\"h6\" noWrap>\n                Проектные команды\n            </Typography>\n\n            <div>\n                <DataGridPro\n                    rows={projectTeamsTableContents}\n                    columns={projectTeamsTableColumns}\n                    autoHeight\n                />\n            </div>\n            <br/>\n\n            {/*<Typography variant=\"h6\" noWrap>*/}\n            {/*    Периоды*/}\n            {/*</Typography>*/}\n\n            {/*<div>*/}\n            {/*    <DataGridPro*/}\n            {/*        rows={ planningPeriodsTableContents }*/}\n            {/*        columns={ planningPeriodsTableColumns }*/}\n            {/*        autoHeight*/}\n            {/*    />*/}\n            {/*</div>*/}\n\n            {/*<br />*/}\n        </Box>\n    );\n}\n\nexport default DedicatedTeamDetail;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamPlanningPeriodSystemDetail.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ChangeRequestDetail.js",["222"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport moment from 'moment';\nimport Typography from '@material-ui/core/Typography';\nimport {Link as RouterLink, NavLink, useParams, useLocation} from \"react-router-dom\"\nimport {Box, Link} from \"@material-ui/core\";\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\n\nconst fetchChangeRequest = gql`\n    query ChangeRequestByKeyQuery($key: String!) {\n        changeRequestByKey(key: $key) {\n            id \n            key\n            url\n            name\n            state {\n                name\n            }\n            \n            analysisEstimate\n            analysisTimeSpent\n            analysisTimeLeft\n            analysisTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            developmentEstimate\n            developmentTimeSpent\n            developmentTimeLeft\n            developmentTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            testingEstimate\n            testingTimeSpent\n            testingTimeLeft\n            testingTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            estimate\n            effortPerFunctionPoint\n            timeSpent\n            timeLeft\n            timeSheetsByDate {\n                date\n                timeSpentCumsum\n                timeSpentCumsumPrediction\n            }\n            \n            plannedInstallDate\n            \n            calculatedFinishDate\n            \n            systemChangeRequests {\n                id\n                key\n                name\n                \n                estimate\n                effortPerFunctionPoint\n                \n                timeLeft\n                state {\n                    name\n                }\n                stateCategory {\n                    id\n                }\n                \n                calculatedFinishDate\n                \n                mainDeveloper {\n                    id\n                    name\n                }\n            }\n            \n            persons {\n                person {\n                    id\n                    name\n                }\n                timeSpent\n                timeSpentChrononFte\n            }\n        }\n    }\n`;\n\nfunction ChangeRequestDetail() {\n    const {key} = useParams();\n    const location = useLocation();\n    const {loading, error, data} = useQuery(fetchChangeRequest, {\n        variables: {key: key}\n    });\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const changeRequest = data.changeRequestByKey\n\n    const plannedInstallDate = changeRequest.plannedInstallDate ? new Date(changeRequest.plannedInstallDate).getTime() : null\n    const timeSheetsByDate = changeRequest.timeSheetsByDate\n\n    const estimate = changeRequest.estimate\n    const effortPerFunctionPoint = changeRequest.effortPerFunctionPoint\n\n    const analysisTimeSheetsByDate = changeRequest.analysisTimeSheetsByDate\n    const analysisEstimate = changeRequest.analysisEstimate\n\n    const developmentTimeSheetsByDate = changeRequest.developmentTimeSheetsByDate\n    const developmentEstimate = changeRequest.developmentEstimate\n\n    const testingTimeSheetsByDate = changeRequest.testingTimeSheetsByDate\n    const testingEstimate = changeRequest.testingEstimate\n\n    const calculatedFinishDate = changeRequest.calculatedFinishDate\n\n    const systemChangeRequests = changeRequest.systemChangeRequests\n    const persons = changeRequest.persons\n\n    const today = (new Date()).getTime()\n    const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\n    const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\n\n    const allEdgeDates = [today]\n    if (plannedInstallDate) {\n        allEdgeDates.push(plannedInstallDate)\n    }\n\n    if (firstTimeSheetDate) {\n        allEdgeDates.push(firstTimeSheetDate)\n    }\n\n    if (lastTimeSheetDate) {\n        allEdgeDates.push(lastTimeSheetDate)\n    }\n\n    if (calculatedFinishDate) {\n        allEdgeDates.push(new Date(calculatedFinishDate).getTime())\n    }\n\n    const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\n    const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\n\n    const systemChangeRequestsTableContents = systemChangeRequests.slice()\n        .sort((a, b) => (\n            (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                    (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                        b.timeLeft - a.timeLeft\n                    )\n                )\n            )\n        ))\n        .map(systemChangeRequest => (\n            {\n                id: systemChangeRequest.id,\n                key: systemChangeRequest.key,\n                name: systemChangeRequest.name,\n                hasValue: systemChangeRequest.hasValue,\n                estimate: systemChangeRequest.estimate,\n                timeLeft: systemChangeRequest.timeLeft,\n                stateCategoryId: systemChangeRequest.stateCategoryId,\n                effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint,\n                calculatedFinishDate: systemChangeRequest.calculatedFinishDate,\n                mainDeveloperName: systemChangeRequest.mainDeveloper.name,\n            }\n        ))\n\n    const systemChangeRequestsTableColumns = [\n        {\n            field: 'name',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink\n                    style={{textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none'}}\n                    to={`/systemChangeRequests/${params.getValue(params.id, 'key')}`}>\n                    {params.getValue(params.id, 'key')} &nbsp;\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'hasValue',\n            headerName: 'Есть ценность',\n            width: 200,\n            valueFormatter: ({value}) => value ? \"Да\" : \"Нет\",\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'mainDeveloperName',\n            headerName: 'Основной разработчик',\n            width: 200,\n            align: 'left',\n        },\n    ];\n\n    const personsTableContents = persons.slice()\n        .sort((a, b) => (\n            (a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : (\n                (a.timeSpentChrononFte == b.timeSpentChrononFte) ? 0 : 1\n            )\n        ))\n        .map(person => (\n            {\n                id: person.person.id,\n                name: person.person.name,\n                timeSpent: person.timeSpent,\n                timeSpentChrononFte: person.timeSpentChrononFte\n            }\n        ))\n\n    const personsTableColumns = [\n        {\n            field: 'name',\n            headerName: 'Имя',\n            flex: 1,\n        },\n        {\n            field: 'timeSpent',\n            headerName: 'Трудозатраты (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeSpentChrononFte',\n            headerName: 'Трудомощность, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 1,\n                maximumFractionDigits: 1\n            }),\n        },\n    ];\n\n    return (\n        <Box>\n            <Typography variant=\"body1\" noWrap>\n                <NavLink to={location.pathname}>\n                    {changeRequest.key}\n                </NavLink> &nbsp;\n                {changeRequest.name} &nbsp;\n                {changeRequest.state.name} &nbsp;\n                <Link href={changeRequest.url} target=\"_blank\">\n                    [ источник ]\n                </Link>\n                <br/>\n                Осталось {changeRequest.timeLeft.toFixed(1)} ч\n                ( {(changeRequest.timeLeft / changeRequest.estimate * 100).toFixed(2)}% ) <br/>\n                Сделано {changeRequest.timeSpent.toFixed(1)} ч <br/>\n                Оценка {changeRequest.estimate.toFixed(1)} ч <br/>\n                Плановая дата\n                установки {plannedInstallDate ? moment(plannedInstallDate).format(\"YYYY-MM-DD\") : \"не указана\"} <br/>\n                Затраты на функциональную точку (аналитика + разработка +\n                менеджмент) {effortPerFunctionPoint.toFixed(2)} часов / функциональная точка <br/>\n                Расчетная дата завершения {calculatedFinishDate}\n                <br/>\n            </Typography>\n            <br/>\n\n            <TimeSheetsByDateIssueChart\n                plannedInstallDate={plannedInstallDate}\n                title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSheetsByDate={timeSheetsByDate}\n                estimate={estimate}\n                calculatedFinishDate={calculatedFinishDate}\n            />\n\n            <TimeSheetsByDateIssueChart\n                plannedInstallDate={plannedInstallDate}\n                title=\"Аналитика\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"red\"\n                timeSheetsByDate={analysisTimeSheetsByDate}\n                estimate={analysisEstimate}\n            />\n\n            <TimeSheetsByDateIssueChart\n                plannedInstallDate={plannedInstallDate}\n                title=\"Разработка\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"green\"\n                timeSheetsByDate={developmentTimeSheetsByDate}\n                estimate={developmentEstimate}\n            />\n\n            <TimeSheetsByDateIssueChart\n                plannedInstallDate={plannedInstallDate}\n                title=\"Тестирование\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"blue\"\n                timeSheetsByDate={testingTimeSheetsByDate}\n                estimate={testingEstimate}\n            />\n\n            <Typography variant=\"h6\" noWrap>\n                Доработки систем\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={systemChangeRequestsTableContents}\n                    columns={systemChangeRequestsTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            <br/>\n            <Typography variant=\"h6\" noWrap>\n                Команда\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={personsTableContents}\n                    columns={personsTableColumns}\n                    autoHeight\n                />\n            </div>\n        </Box>\n    );\n}\n\nexport default ChangeRequestDetail;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/CompanyDetail.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonDetail.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/EpicDetail.js",["223"],[],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink, NavLink} from \"react-router-dom\";\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\n\nconst fetchEpicByKey = gql`\n    query EpicByKeyQuery($key: String!) {\n        epicByKey(key: $key) {\n            id \n            key\n            name\n            \n            estimate\n            effortPerFunctionPoint\n            timeSpent\n            timeLeft\n            calculatedFinishDate\n            timeSheetsByDate {\n                date\n                timeSpentCumsum\n                timeSpentCumsumPrediction\n            }\n            \n            analysisEstimate\n            analysisTimeSpent\n            analysisTimeLeft\n            analysisTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            \n            developmentEstimate\n            developmentTimeSpent\n            developmentTimeLeft\n            developmentTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            testingEstimate\n            testingTimeSpent\n            testingTimeLeft\n            testingTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            systems {\n                id\n                estimate\n                timeLeft\n                system {\n                    id\n                    name\n                }\n                effortPerFunctionPoint\n                calculatedFinishDate\n            }\n            \n            changeRequests {\n                id\n                key\n                estimate\n                timeLeft\n                hasValue\n                name\n                stateCategoryId\n                effortPerFunctionPoint\n                calculatedFinishDate\n                newFunctionsTimeSpentPrevious28Days\n            }\n            \n            persons {\n                person {\n                    id\n                    name\n                }\n                newFunctionsTimeSpent\n                newFunctionsFullTimeEquivalentPrevious28Days\n            }\n        }\n    }\n`;\n\nclass EpicDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const epicKey = this.props.match.params.key\n        const epic = this.props.data.epicByKey\n\n        const timeSheetsByDate = epic.timeSheetsByDate\n        const systems = epic.systems\n        const changeRequests = epic.changeRequests\n        const persons = epic.persons\n\n        const estimate = epic.estimate\n        const effortPerFunctionPoint = epic.effortPerFunctionPoint\n\n        const analysisTimeSheetsByDate = epic.analysisTimeSheetsByDate\n        const analysisEstimate = epic.analysisEstimate\n\n        const developmentTimeSheetsByDate = epic.developmentTimeSheetsByDate\n        const developmentEstimate = epic.developmentEstimate\n\n        const testingTimeSheetsByDate = epic.testingTimeSheetsByDate\n        const testingEstimate = epic.testingEstimate\n\n        const calculatedFinishDate = epic.calculatedFinishDate\n\n        const today = (new Date()).getTime()\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\n\n        const allEdgeDates = [today]\n\n        if (firstTimeSheetDate) {\n            allEdgeDates.push(firstTimeSheetDate)\n        }\n\n        if (lastTimeSheetDate) {\n            allEdgeDates.push(lastTimeSheetDate)\n        }\n\n        if (calculatedFinishDate) {\n            const calculatedFinishDateAsDate = new Date(calculatedFinishDate)\n            allEdgeDates.push(calculatedFinishDateAsDate)\n        }\n\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\n\n        const systemsTableContents = systems.slice()\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\n            .map(system => (\n                    {\n                        id: system.id,\n                        estimate: system.estimate,\n                        timeLeft: system.timeLeft,\n                        systemId: system.system.id,\n                        systemName: system.system.name,\n                        effortPerFunctionPoint: system.effortPerFunctionPoint,\n                        calculatedFinishDate: system.calculatedFinishDate,\n                    }\n            ))\n\n        const systemsTableColumns = [\n            {\n                field: 'systemName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/epics/${ epicKey }/systems/${ params.getValue(params.id, 'systemId') }` }>\n                        { params.getValue(params.id, 'systemName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        const changeRequestsTableContents = changeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(changeRequest => (\n                    {\n                        id: changeRequest.id,\n                        key: changeRequest.key,\n                        name: changeRequest.name,\n                        hasValue: changeRequest.hasValue,\n                        estimate: changeRequest.estimate,\n                        timeLeft: changeRequest.timeLeft,\n                        stateCategoryId: changeRequest.stateCategoryId,\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\n                        calculatedFinishDate: changeRequest.calculatedFinishDate,\n                        newFunctionsTimeSpentPrevious28Days: changeRequest.newFunctionsTimeSpentPrevious28Days,\n                    }\n            ))\n\n        const changeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'newFunctionsTimeSpentPrevious28Days',\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n        const personsTableContents = persons.slice()\n            .sort((a, b) =>  (\n                (a.newFunctionsFullTimeEquivalentPrevious28Days > b.newFunctionsFullTimeEquivalentPrevious28Days) ? -1 : (\n                    (a.newFunctionsFullTimeEquivalentPrevious28Days == b.newFunctionsFullTimeEquivalentPrevious28Days) ? 0 : 1\n                )\n            ))\n            .map(person => (\n                    {\n                        id: person.person.id,\n                        name: person.person.name,\n                        newFunctionsTimeSpent: person.newFunctionsTimeSpent,\n                        newFunctionsFullTimeEquivalentPrevious28Days: person.newFunctionsFullTimeEquivalentPrevious28Days\n                    }\n            ))\n\n            const personsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Имя',\n                flex: 1,\n            },\n            {\n                field: 'newFunctionsTimeSpent',\n                headerName: 'Новый функционал: списано всего (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\n                headerName: 'Новый функционал: фактический FTE за 28 дней',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\n            },\n        ];\n\n        return (\n           <Box>\n                <Typography variant=\"body1\" noWrap>\n                    <NavLink to={ this.props.location.pathname }>\n                        { epic.key }\n                    </NavLink> &nbsp;\n                    { epic.name } &nbsp;\n                    <Link href={ epic.url }>\n                        [ источник ]\n                    </Link>\n                    <br />\n                    Осталось { epic.timeLeft.toFixed(1) } ч ( { (epic.timeLeft / epic.estimate * 100).toFixed(2) }% ) <br />\n                    Сделано { epic.timeSpent.toFixed(1) } ч <br />\n                    Оценка { epic.estimate.toFixed(1) } ч <br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка <br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                </Typography>\n                <br />\n\n                <TimeSheetsByDateIssueChart\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <TimeSheetsByDateIssueChart\n                    title=\"Аналитика\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"red\"\n                    timeSheetsByDate={ analysisTimeSheetsByDate }\n                    estimate={ analysisEstimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <TimeSheetsByDateIssueChart\n                    title=\"Разработка\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"green\"\n                    timeSheetsByDate={ developmentTimeSheetsByDate }\n                    estimate={ developmentEstimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <TimeSheetsByDateIssueChart\n                    title=\"Тестирование\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"blue\"\n                    timeSheetsByDate={ testingTimeSheetsByDate }\n                    estimate={ testingEstimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <Typography variant=\"h6\" noWrap>\n                    Системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemsTableContents }\n                        columns={ systemsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку ПО\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ changeRequestsTableContents }\n                        columns={ changeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <Typography variant=\"h6\" noWrap>\n                    Команда\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ personsTableContents }\n                        columns={ personsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchEpicByKey, {\n    options: (props) => { return { variables: { key: props.match.params.key }}}\n})(EpicDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodDetail.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamPlanningPeriodDetail.js",["224"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport Typography from '@material-ui/core/Typography';\nimport {Box} from \"@material-ui/core\";\nimport {Link as RouterLink, useParams} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\n\nconst fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId = gql`\n        query DedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId($planningPeriodId: Int!, $dedicatedTeamId: Int!) {\n              dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId(dedicatedTeamId: $dedicatedTeamId, planningPeriodId: $planningPeriodId) {\n                    id\n                    estimate\n                    effortPerFunctionPoint\n                    calculatedFinishDate\n                    dedicatedTeam {\n                        name\n                        cio {\n                            name\n                        }\n                        cto {\n                            name\n                        }\n                    }\n                    planningPeriod {\n                        name\n                        start\n                        end\n                    }\n                    timeSheetsByDate {\n                        date\n                        timeSpentCumsum\n                        timeSpentCumsumPrediction\n                        timeSpentWithoutValuePercentCumsum\n                        timeSpentWithValuePercentCumsum\n                        timeSpentForReengineeringPercentCumsum\n                        timeSpentNotForReengineeringPercentCumsum\n                    }\n                    \n                    projectTeamPlanningPeriods {\n                        id\n                        estimate\n                        timeLeft\n                        projectTeam {\n                            id\n                            name\n                        }\n                        effortPerFunctionPoint\n                        calculatedFinishDate\n                        timeSpentChronon\n                    }\n                    \n                    dedicatedTeamPlanningPeriodSystems {\n                        id\n                        estimate\n                        timeLeft\n                        system {\n                            id\n                            name\n                        }\n                        effortPerFunctionPoint\n                        calculatedFinishDate\n                    }\n                    \n                    changeRequests {\n                        id\n                        key\n                        estimate\n                        timeLeft\n                        hasValue\n                        name\n                        stateCategoryId\n                        effortPerFunctionPoint\n                        calculatedFinishDate\n                        timeSpentChronon\n                    }\n                    \n                    positionPersons {\n                        position {\n                            id\n                            name\n                            url\n                        }\n                        \n                        person {\n                            id\n                            key\n                            name\n                        }\n                        timeSpent\n                        timeSpentChrononFte\n                        totalCapacityFte\n                    }\n              }\n        }\n`;\n\nfunction DedicatedTeamPlanningPeriodDetail() {\n    const {planningPeriodId, dedicatedTeamId} = useParams();\n\n    const {loading, error, data} = useQuery(fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId, {\n        variables: {planningPeriodId: planningPeriodId, dedicatedTeamId: dedicatedTeamId}\n    });\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const dedicatedTeamPlanningPeriod = data.dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId\n\n    const dedicatedTeamName = dedicatedTeamPlanningPeriod.dedicatedTeam.name\n    const cioName = dedicatedTeamPlanningPeriod.dedicatedTeam.cio.name\n    const ctoName = dedicatedTeamPlanningPeriod.dedicatedTeam.cto.name\n    const estimate = dedicatedTeamPlanningPeriod.estimate\n    const effortPerFunctionPoint = dedicatedTeamPlanningPeriod.effortPerFunctionPoint\n    const calculatedFinishDate = dedicatedTeamPlanningPeriod.calculatedFinishDate\n    const planningPeriodName = dedicatedTeamPlanningPeriod.planningPeriod.name\n    const planningPeriodStart = dedicatedTeamPlanningPeriod.planningPeriod.start\n    const planningPeriodEnd = dedicatedTeamPlanningPeriod.planningPeriod.end\n    const projectTeamPlanningPeriods = dedicatedTeamPlanningPeriod.projectTeamPlanningPeriods\n    const dedicatedTeamPlanningPeriodSystems = dedicatedTeamPlanningPeriod.dedicatedTeamPlanningPeriodSystems\n    const changeRequests = dedicatedTeamPlanningPeriod.changeRequests\n    const positionPersons = dedicatedTeamPlanningPeriod.positionPersons\n\n    const timeSheetsByDate = dedicatedTeamPlanningPeriod.timeSheetsByDate\n\n    const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\n    const xAxisStart = new Date(planningPeriodStart).getTime() - fourWeeks\n    const xAxisEnd = new Date(planningPeriodEnd).getTime() + fourWeeks\n\n    const systemsTableContents = dedicatedTeamPlanningPeriodSystems.slice()\n        .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\n        .map(dedicatedTeamPlanningPeriodSystem => (\n            {\n                id: dedicatedTeamPlanningPeriodSystem.id,\n                estimate: dedicatedTeamPlanningPeriodSystem.estimate,\n                timeLeft: dedicatedTeamPlanningPeriodSystem.timeLeft,\n                systemId: dedicatedTeamPlanningPeriodSystem.system.id,\n                systemName: dedicatedTeamPlanningPeriodSystem.system.name,\n                effortPerFunctionPoint: dedicatedTeamPlanningPeriodSystem.effortPerFunctionPoint,\n                calculatedFinishDate: dedicatedTeamPlanningPeriodSystem.calculatedFinishDate,\n            }\n        ))\n\n    const systemsTableColumns = [\n        {\n            field: 'systemName',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink\n                    to={`/planningPeriods/${planningPeriodId}/dedicatedTeams/${dedicatedTeamId}/systems/${params.getValue(params.id, 'systemId')}`}>\n                    {params.getValue(params.id, 'systemName')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    const projectTeamsTableContents = projectTeamPlanningPeriods.slice()\n        .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\n        .map(projectTeamPlanningPeriod => (\n            {\n                id: projectTeamPlanningPeriod.id,\n                estimate: projectTeamPlanningPeriod.estimate,\n                timeLeft: projectTeamPlanningPeriod.timeLeft,\n                projectTeamId: projectTeamPlanningPeriod.projectTeam.id,\n                projectTeamName: projectTeamPlanningPeriod.projectTeam.name,\n                effortPerFunctionPoint: projectTeamPlanningPeriod.effortPerFunctionPoint,\n                calculatedFinishDate: projectTeamPlanningPeriod.calculatedFinishDate,\n                timeSpentChronon: projectTeamPlanningPeriod.timeSpentChronon\n            }\n        ))\n\n    const projectTeamsTableColumns = [\n        {\n            field: 'projectTeamName',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink\n                    to={`/planningPeriods/${planningPeriodId}/projectTeams/${params.getValue(params.id, 'projectTeamId')}`}>\n                    {params.getValue(params.id, 'projectTeamName')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentChronon',\n            headerName: 'Фактические трудозатраты за 28 дней (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    const changeRequestsTableContents = changeRequests.slice()\n        .sort((a, b) => (\n            (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                    (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                        b.timeLeft - a.timeLeft\n                    )\n                )\n            )\n        ))\n        .map(changeRequest => (\n            {\n                id: changeRequest.id,\n                key: changeRequest.key,\n                name: changeRequest.name,\n                hasValue: changeRequest.hasValue,\n                estimate: changeRequest.estimate,\n                timeLeft: changeRequest.timeLeft,\n                stateCategoryId: changeRequest.stateCategoryId,\n                effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\n                calculatedFinishDate: changeRequest.calculatedFinishDate,\n                timeSpentChronon: changeRequest.timeSpentChronon\n            }\n        ))\n\n    const changeRequestsTableColumns = [\n        {\n            field: 'name',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink\n                    style={{textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none'}}\n                    to={`/changeRequests/${params.getValue(params.id, 'key')}`}>\n                    {params.getValue(params.id, 'key')} &nbsp;\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'hasValue',\n            headerName: 'Есть ценность',\n            width: 200,\n            valueFormatter: ({value}) => value ? \"Да\" : \"Нет\",\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentChronon',\n            headerName: 'Фактические трудозатраты за 28 дней (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    const positionPersonsTableContents = positionPersons.slice()\n        .sort((a, b) => (\n            (a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : (\n                (a.timeSpentChrononFte == b.timeSpentChrononFte) ? 0 : 1\n            )\n        ))\n        .map(positionPerson => (\n            {\n                id: positionPerson.person.id,\n                key: positionPerson.person.key,\n                name: positionPerson.person.name,\n                position: positionPerson.position.name,\n                timeSpent: positionPerson.timeSpent,\n                timeSpentChrononFte: positionPerson.timeSpentChrononFte,\n                totalCapacityFte: positionPerson.totalCapacityFte\n            }\n        ))\n\n    const positionPersonsTableColumns = [\n        {\n            field: 'position',\n            headerName: 'Позиция',\n            flex: 1,\n        },\n        {\n            field: 'name',\n            headerName: 'Имя',\n            flex: 1,\n        },\n        {\n            field: 'timeSpent',\n            headerName: 'Списано всего (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'totalCapacityFte',\n            headerName: 'Плановый FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 1,\n                maximumFractionDigits: 1\n            }),\n        },\n        {\n            field: 'timeSpentChrononFte',\n            headerName: 'Фактический FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 1,\n                maximumFractionDigits: 1\n            }),\n        },\n    ];\n\n    return (\n        <Box>\n            <Typography variant=\"body\" noWrap>\n                Выделенная команда {dedicatedTeamName}\n                <br/>\n                Бизнес-партнер {cioName}\n                <br/>\n                Руководитель разработки (CTO) {ctoName}\n                <br/>\n                Период планирования {planningPeriodName} ({planningPeriodStart}-{planningPeriodEnd})\n                <br/>\n                Расчетная дата завершения {calculatedFinishDate}\n                <br/>\n                Затраты на функциональную точку (аналитика + разработка +\n                менеджмент) {effortPerFunctionPoint.toFixed(2)} часов / функциональная точка\n            </Typography>\n\n            <TimeSheetsByDatePeriodChart\n                planningPeriodEnd={planningPeriodEnd}\n                title=\"Фактический объем работ:Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSheetsByDate={timeSheetsByDate}\n                estimate={estimate}\n                calculatedFinishDate={calculatedFinishDate}\n            />\n\n            <ValueByDatePeriodChart\n                planningPeriodEnd={planningPeriodEnd}\n                title=\"Доля списаний на задачи без бизнес-ценности\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSpentPercentWithValueAndWithoutValueByDate={timeSheetsByDate}\n            />\n\n            <ReengineeringByDatePeriodChart\n                planningPeriodEnd={planningPeriodEnd}\n                title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSpentPercentForReengineeringAndNotForReengineeringByDate={timeSheetsByDate}\n            />\n\n            <Typography variant=\"h6\" noWrap>\n                Проектные команды\n            </Typography>\n\n            <div>\n                <DataGridPro\n                    rows={projectTeamsTableContents}\n                    columns={projectTeamsTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            <br/>\n\n            <Typography variant=\"h6\" noWrap>\n                Системы\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={systemsTableContents}\n                    columns={systemsTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            <br/>\n\n            <Typography variant=\"h6\" noWrap>\n                Заявки на доработку ПО\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={changeRequestsTableContents}\n                    columns={changeRequestsTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            <br/>\n            <Typography variant=\"h6\" noWrap>\n                Команда\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={positionPersonsTableContents}\n                    columns={positionPersonsTableColumns}\n                    autoHeight\n                />\n            </div>\n        </Box>\n    );\n}\n\nexport default DedicatedTeamPlanningPeriodDetail;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodPersonDetail.js",["225","226","227"],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonList.js",["228","229","230","231"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport {graphql} from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Link as RouterLink, NavLink, useParams} from \"react-router-dom\"\nimport {Box} from \"@material-ui/core\";\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\n\nfunction ToolBarWithExport() {\n    return (\n        <GridToolbarContainer>\n            <GridToolbarExport/>\n        </GridToolbarContainer>\n    );\n}\n\nconst fetchPersonList = gql`\n    query Persons {\n        persons {\n            id \n            name\n            mainProjectTeam {\n                id\n                name\n                dedicatedTeam {\n                    id\n                    name\n                }\n            }\n        }\n    }\n`;\n\nfunction PersonList() {\n    const {loading, error, data} = useQuery(fetchPersonList);\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const persons = data.persons\n\n    const personsTableContents = persons.slice()\n        .filter((person) => (\n            person.mainProjectTeam.id != -1\n        ))\n        .sort((a, b) => (\n            (a.name > b.name) ? 1 : (\n                (a.name == b.name) ? 0 : -1\n            )\n        ))\n        .map(person => (\n            {\n                id: person.id,\n                name: person.name,\n                mainProjectTeamId: person.mainProjectTeam.id,\n                mainProjectTeamName: person.mainProjectTeam.name,\n                mainDedicatedTeamId: person.mainProjectTeam.dedicatedTeam.id,\n                mainDedicatedTeamName: person.mainProjectTeam.dedicatedTeam.name,\n            }\n        ))\n\n    const personsTableColumns = [\n        {\n            field: 'name',\n            headerName: 'Имя',\n            flex: 1,\n        },\n        {\n            field: 'mainProjectTeamName',\n            headerName: 'Основная проектная команда',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/projectTeams/${params.getValue(params.id, 'mainProjectTeamId')}`}>\n                    {params.getValue(params.id, 'mainProjectTeamName')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'mainDedicatedTeamName',\n            headerName: 'Основная выделенная команда',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/dedicatedTeams/${params.getValue(params.id, 'mainDedicatedTeamId')}`}>\n                    {params.getValue(params.id, 'mainDedicatedTeamName')}\n                </RouterLink>\n            ),\n        },\n    ];\n\n    return (\n        <Box>\n            <Typography variant=\"h6\" noWrap>\n                Команда\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={personsTableContents}\n                    columns={personsTableColumns}\n                    components={{\n                        Toolbar: ToolBarWithExport,\n                    }}\n                    autoHeight\n                />\n            </div>\n        </Box>\n    );\n}\n\nexport default graphql(fetchPersonList)(PersonList);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamQuarterDetail.js",["232"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport Typography from '@material-ui/core/Typography';\nimport {Box} from \"@material-ui/core\";\nimport {Link as RouterLink, useParams} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\n\nconst fetchDedicatedTeamQuarterByQuarterKeyAndDedicatedTeamId = gql`\n        query DedicatedTeamQuarterByQuarterKeyAndDedicatedTeamId($quarterKey: String!, $dedicatedTeamId: Int!) {\n              dedicatedTeamQuarterByQuarterKeyAndDedicatedTeamId(dedicatedTeamId: $dedicatedTeamId, quarterKey: $quarterKey) {\n                    id\n                    estimate\n                    effortPerFunctionPoint\n                    calculatedFinishDate\n                    changeRequestCalculatedDateAfterQuarterEndIssueCount\n                    changeRequestCount\n                    changeRequestCalculatedDateBeforeQuarterEndShare\n                    \n                    dedicatedTeam {\n                        name\n                        cio {\n                            name\n                        }\n                        cto {\n                            name\n                        }\n                    }\n                    \n                    quarter {\n                        name\n                        start\n                        end\n                    }\n                    \n                    timeSheetsByDate {\n                        date\n                        timeSpentCumsum\n                        timeSpentCumsumPrediction\n                        timeSpentWithoutValuePercentCumsum\n                        timeSpentWithValuePercentCumsum\n                        timeSpentForReengineeringPercentCumsum\n                        timeSpentNotForReengineeringPercentCumsum\n                    }\n                    \n                    projectTeamQuarters {\n                        id\n                        estimate\n                        timeLeft\n                        projectTeam {\n                            id\n                            name\n                        }\n                        effortPerFunctionPoint\n                        calculatedFinishDate\n                        timeSpentInCurrentQuarter\n                        changeRequestCalculatedDateBeforeQuarterEndShare\n                    }\n                    \n                    dedicatedTeamQuarterSystems {\n                        id\n                        estimate\n                        timeLeft\n                        system {\n                            id\n                            name\n                        }\n                        effortPerFunctionPoint\n                        calculatedFinishDate\n                    }\n                    \n                    changeRequests {\n                        id\n                        key\n                        estimate\n                        timeLeft\n                        hasValue\n                        name\n                        stateCategoryId\n                        effortPerFunctionPoint\n                        calculatedFinishDate\n                        timeSpentInCurrentQuarter\n                    }\n              }\n        }\n`;\n\nfunction DedicatedTeamQuarterDetail() {\n    const {quarterKey, dedicatedTeamId} = useParams();\n\n    const {loading, error, data} = useQuery(fetchDedicatedTeamQuarterByQuarterKeyAndDedicatedTeamId, {\n        variables: {quarterKey: quarterKey, dedicatedTeamId: dedicatedTeamId}\n    });\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const dedicatedTeamQuarter = data.dedicatedTeamQuarterByQuarterKeyAndDedicatedTeamId\n\n    const dedicatedTeamName = dedicatedTeamQuarter.dedicatedTeam.name\n    const cioName = dedicatedTeamQuarter.dedicatedTeam.cio.name\n    const ctoName = dedicatedTeamQuarter.dedicatedTeam.cto.name\n    const estimate = dedicatedTeamQuarter.estimate\n    const effortPerFunctionPoint = dedicatedTeamQuarter.effortPerFunctionPoint\n    const calculatedFinishDate = dedicatedTeamQuarter.calculatedFinishDate\n    const changeRequestCalculatedDateBeforeQuarterEndShare = dedicatedTeamQuarter.changeRequestCalculatedDateBeforeQuarterEndShare\n    const quarterName = dedicatedTeamQuarter.quarter.name\n    const quarterStart = dedicatedTeamQuarter.quarter.start\n    const quarterEnd = dedicatedTeamQuarter.quarter.end\n    const projectTeamQuarters = dedicatedTeamQuarter.projectTeamQuarters\n    const dedicatedTeamQuarterSystems = dedicatedTeamQuarter.dedicatedTeamQuarterSystems\n    const changeRequests = dedicatedTeamQuarter.changeRequests\n    const positions = dedicatedTeamQuarter.positions\n\n    const timeSheetsByDate = dedicatedTeamQuarter.timeSheetsByDate\n\n    const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\n    const xAxisStart = new Date(quarterStart).getTime() - fourWeeks\n    const xAxisEnd = new Date(quarterEnd).getTime() + fourWeeks\n\n    const systemsTableContents = dedicatedTeamQuarterSystems.slice()\n        .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\n        .map(dedicatedTeamQuarterSystem => (\n            {\n                id: dedicatedTeamQuarterSystem.id,\n                estimate: dedicatedTeamQuarterSystem.estimate,\n                timeLeft: dedicatedTeamQuarterSystem.timeLeft,\n                systemId: dedicatedTeamQuarterSystem.system.id,\n                systemName: dedicatedTeamQuarterSystem.system.name,\n                effortPerFunctionPoint: dedicatedTeamQuarterSystem.effortPerFunctionPoint,\n                calculatedFinishDate: dedicatedTeamQuarterSystem.calculatedFinishDate,\n            }\n        ))\n\n    const systemsTableColumns = [\n        {\n            field: 'systemName',\n            headerName: 'Название',\n            flex: 1,\n            // renderCell: (params) => (\n            //     <RouterLink to={ `/quarters/${ quarterKey }/dedicatedTeams/${ dedicatedTeamId }/systems/${ params.getValue(params.id, 'systemId') }` }>\n            //         { params.getValue(params.id, 'systemName') }\n            //     </RouterLink>\n            // ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    const projectTeamsTableContents = projectTeamQuarters.slice()\n        .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\n        .map(projectTeamQuarter => (\n            {\n                id: projectTeamQuarter.id,\n                estimate: projectTeamQuarter.estimate,\n                timeLeft: projectTeamQuarter.timeLeft,\n                projectTeamId: projectTeamQuarter.projectTeam.id,\n                projectTeamName: projectTeamQuarter.projectTeam.name,\n                effortPerFunctionPoint: projectTeamQuarter.effortPerFunctionPoint,\n                calculatedFinishDate: projectTeamQuarter.calculatedFinishDate,\n                timeSpentInCurrentQuarter: projectTeamQuarter.timeSpentInCurrentQuarter,\n                changeRequestCalculatedDateBeforeQuarterEndShare: projectTeamQuarter.changeRequestCalculatedDateBeforeQuarterEndShare,\n            }\n        ))\n\n    const projectTeamsTableColumns = [\n        {\n            field: 'projectTeamName',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/quarters/${quarterKey}/projectTeams/${params.getValue(params.id, 'projectTeamId')}`}>\n                    {params.getValue(params.id, 'projectTeamName')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentInCurrentQuarter',\n            headerName: 'Фактические трудозатраты с начала квартала (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'changeRequestCalculatedDateBeforeQuarterEndShare',\n            headerName: 'Прогноз исполнения плана по заявкам на доработку ПО (%)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value * 100).toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n    ];\n\n    const changeRequestsTableContents = changeRequests.slice()\n        .sort((a, b) => (\n            (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                    (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                        b.timeLeft - a.timeLeft\n                    )\n                )\n            )\n        ))\n        .map(changeRequest => (\n            {\n                id: changeRequest.id,\n                key: changeRequest.key,\n                name: changeRequest.name,\n                hasValue: changeRequest.hasValue,\n                estimate: changeRequest.estimate,\n                timeLeft: changeRequest.timeLeft,\n                stateCategoryId: changeRequest.stateCategoryId,\n                effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\n                calculatedFinishDate: changeRequest.calculatedFinishDate,\n                timeSpentInCurrentQuarter: changeRequest.timeSpentInCurrentQuarter\n            }\n        ))\n\n    const changeRequestsTableColumns = [\n        {\n            field: 'name',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink\n                    style={{textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none'}}\n                    to={`/changeRequests/${params.getValue(params.id, 'key')}`}>\n                    {params.getValue(params.id, 'key')} &nbsp;\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'hasValue',\n            headerName: 'Есть ценность',\n            width: 200,\n            valueFormatter: ({value}) => value ? \"Да\" : \"Нет\",\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentInCurrentQuarter',\n            headerName: 'Фактические трудозатраты с начала квартала (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    return (\n        <Box>\n            <Typography variant=\"body\" noWrap>\n                Выделенная команда {dedicatedTeamName}\n                <br/>\n                Бизнес-партнер {cioName}\n                <br/>\n                Руководитель разработки (CTO) {ctoName}\n                <br/>\n                Период планирования {quarterName} ({quarterStart}-{quarterEnd})\n                <br/>\n                Расчетная дата завершения {calculatedFinishDate}\n                <br/>\n                Затраты на функциональную точку (аналитика + разработка +\n                менеджмент) {effortPerFunctionPoint.toFixed(2)} часов / функциональная точка\n                <br/>\n                Прогноз исполнения плана по заявкам на доработку\n                ПО: {(changeRequestCalculatedDateBeforeQuarterEndShare * 100).toLocaleString(undefined, {maximumFractionDigits: 0})}%\n                <br/>\n            </Typography>\n\n            <TimeSheetsByDatePeriodChart\n                planningPeriodEnd={quarterEnd}\n                title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSheetsByDate={timeSheetsByDate}\n                estimate={estimate}\n                calculatedFinishDate={calculatedFinishDate}\n            />\n\n            <ValueByDatePeriodChart\n                planningPeriodEnd={quarterEnd}\n                title=\"Доля списаний на задачи без бизнес-ценности\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSpentPercentWithValueAndWithoutValueByDate={timeSheetsByDate}\n            />\n\n            <ReengineeringByDatePeriodChart\n                planningPeriodEnd={quarterEnd}\n                title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSpentPercentForReengineeringAndNotForReengineeringByDate={timeSheetsByDate}\n            />\n\n            <Typography variant=\"h6\" noWrap>\n                Проектные команды\n            </Typography>\n\n            <div>\n                <DataGridPro\n                    rows={projectTeamsTableContents}\n                    columns={projectTeamsTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            <br/>\n\n            <Typography variant=\"h6\" noWrap>\n                Системы\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={systemsTableContents}\n                    columns={systemsTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            <br/>\n\n            <Typography variant=\"h6\" noWrap>\n                Заявки на доработку ПО\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={changeRequestsTableContents}\n                    columns={changeRequestsTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            {/*<br />*/}\n            {/*<Typography variant=\"h6\" noWrap>*/}\n            {/*    Команда*/}\n            {/*</Typography>*/}\n            {/*<div>*/}\n            {/*    <DataGridPro*/}\n            {/*        rows={ positionsTableContents }*/}\n            {/*        columns={ positionsTableColumns }*/}\n            {/*        autoHeight*/}\n            {/*    />*/}\n            {/*</div>*/}\n        </Box>\n    );\n}\n\nexport default DedicatedTeamQuarterDetail;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/EpicSystemDetail.js",["233"],[],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\n\nconst fetchEpicSystemByEpicKeyAndSystemId = gql`\n     query EpicSystemByEpicKeyAndSystemId($epicKey: String!, $systemId: Int!) {\n          epicSystemByEpicKeyAndSystemId(epicKey: $epicKey, systemId: $systemId) {\n                id\n                estimate\n                calculatedFinishDate\n                effortPerFunctionPoint\n                system {\n                    name\n                }\n\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                systemChangeRequests {\n                    id\n                    key\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategoryId\n                    effortPerFunctionPoint\n                }\n          }\n    }\n`;\n\nclass EpicSystemDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const epicSystem = this.props.data.epicSystemByEpicKeyAndSystemId\n\n        const systemName = epicSystem.system.name\n        const estimate = epicSystem.estimate\n        const calculatedFinishDate = epicSystem.calculatedFinishDate\n        const effortPerFunctionPoint = epicSystem.effortPerFunctionPoint\n        const systemChangeRequests = epicSystem.systemChangeRequests\n\n        const timeSheetsByDate = epicSystem.timeSheetsByDate\n\n        const today = (new Date()).getTime()\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\n\n        const allEdgeDates = [today]\n\n        if (firstTimeSheetDate) {\n            allEdgeDates.push(firstTimeSheetDate)\n        }\n\n        if (lastTimeSheetDate) {\n            allEdgeDates.push(lastTimeSheetDate)\n        }\n\n        if (calculatedFinishDate) {\n            allEdgeDates.push(new Date(calculatedFinishDate).getTime())\n        }\n\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\n\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(systemChangeRequest => (\n                    {\n                        id: systemChangeRequest.id,\n                        key: systemChangeRequest.key,\n                        name: systemChangeRequest.name,\n                        hasValue: systemChangeRequest.hasValue,\n                        estimate: systemChangeRequest.estimate,\n                        timeLeft: systemChangeRequest.timeLeft,\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint\n                    }\n            ))\n\n        const systemChangeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Система { systemName }<br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка<br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                </Typography>\n\n                <TimeSheetsByDatePeriodChart\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n               <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemChangeRequestsTableContents }\n                        columns={ systemChangeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchEpicSystemByEpicKeyAndSystemId, {\n    options: (props) => { return { variables: { epicKey: props.match.params.epicKey, systemId: props.match.params.systemId }}}\n})(EpicSystemDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonSystemChangeRequestDetail.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodPersonsList.js",["234","235"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport Typography from '@material-ui/core/Typography';\nimport {Link as RouterLink, NavLink, useParams} from \"react-router-dom\"\nimport {Box} from \"@material-ui/core\";\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\n\nconst fetchPlanningPeriodPersonList = gql`\n    query PlanningPeriodByIdQuery($id: Int!) {\n        planningPeriodById(id: $id) {\n            persons {\n              personId\n              personKey\n              personName\n              effortPerFunctionPoint\n              timeSpent\n            }\n        }\n    }\n`;\n\nfunction PlanningPeriodPersonsList() {\n    const {planningPeriodId} = useParams();\n    const {loading, error, data} = useQuery(fetchPlanningPeriodPersonList, {\n        variables: {id: planningPeriodId}\n    });\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const persons = data.planningPeriodById.persons\n\n    const personsTableContents = persons.slice()\n        .sort((a, b) => (\n            (a.personName > b.personName) ? 1 : (\n                (a.personName == b.personName) ? 0 : -1\n            )\n        ))\n        .map(person => (\n            {\n                id: person.personId,\n                personId: person.personId,\n                key: person.personKey,\n                name: person.personName,\n                effortPerFunctionPoint: person.effortPerFunctionPoint,\n            }\n        ))\n\n    const personsTableColumns = [\n        {\n            field: 'name',\n            headerName: 'ФИО',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/planningPeriods/${planningPeriodId}/persons/${params.getValue(params.id, 'key')}`}>\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    return (\n        <Box>\n            <Typography variant=\"h6\" noWrap>\n                Команда\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={personsTableContents}\n                    columns={personsTableColumns}\n                    autoHeight\n                />\n            </div>\n        </Box>\n    );\n}\n\nexport default PlanningPeriodPersonsList;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonMonthDetailByPersonKeyAndMonth.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonListByProjectTeamIdAndMonth.js",["236"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport Typography from '@material-ui/core/Typography';\nimport {Box} from \"@material-ui/core\";\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\nimport {Link as RouterLink, useParams} from \"react-router-dom\";\n\nconst fetchPersonListByProjectTeamIdAndMonth = gql`\n    query PersonsByProjectTeamIdAndMonth($projectTeamId: Int, $month: Date) {\n        personsByProjectTeamIdAndMonth(projectTeamId: $projectTeamId, month: $month) {\n            analysisTimeSpentMonthFte\n            developmentTimeSpentMonthFte\n            testingTimeSpentMonthFte\n            managementTimeSpentMonthFte\n            incidentFixingTimeSpentMonthFte\n            timeSpentMonthFte\n            person {\n                id\n                key\n                name\n            }\n        }\n    }\n`;\n\nfunction PersonListByProjectTeamIdAndMonth() {\n    const {projectTeamId, month} = useParams();\n\n    const {loading, error, data} = useQuery(fetchPersonListByProjectTeamIdAndMonth, {\n        variables: {projectTeamId: projectTeamId, month: month}\n    });\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const personsByProjectTeamIdAndMonth = data.personsByProjectTeamIdAndMonth\n\n    const personsTableContents = personsByProjectTeamIdAndMonth.slice()\n        .sort((a, b) => (\n            (a.person.name > b.person.name) ? 1 : (\n                (a.person.name == b.person.name) ? 0 : -1\n            )\n        ))\n        .map(person => (\n            {\n                id: person.person.id,\n                personKey: person.person.key,\n                personName: person.person.name,\n                analysisTimeSpentMonthFte: person.analysisTimeSpentMonthFte,\n                developmentTimeSpentMonthFte: person.developmentTimeSpentMonthFte,\n                testingTimeSpentMonthFte: person.testingTimeSpentMonthFte,\n                managementTimeSpentMonthFte: person.managementTimeSpentMonthFte,\n                incidentFixingTimeSpentMonthFte: person.incidentFixingTimeSpentMonthFte,\n                timeSpentMonthFte: person.timeSpentMonthFte,\n            }\n        ))\n    const personsTableColumns = [\n        {\n            field: 'personName',\n            headerName: 'ФИО',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/persons/${params.getValue(params.id, 'personKey')}/month/${month}`}>\n                    {params.getValue(params.id, 'personName')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'timeSpentMonthFte',\n            headerName: 'Трудозатраты (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'analysisTimeSpentMonthFte',\n            headerName: 'Трудозатраты аналитики (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'developmentTimeSpentMonthFte',\n            headerName: 'Трудозатраты разработки (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'testingTimeSpentMonthFte',\n            headerName: 'Трудозатраты тестирования (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'managementTimeSpentMonthFte',\n            headerName: 'Трудозатраты управление (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'incidentFixingTimeSpentMonthFte',\n            headerName: 'Трудозатраты инциденты (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n\n    return (\n        <Box>\n            <Typography variant=\"h6\" noWrap>\n                Команда\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={personsTableContents}\n                    columns={personsTableColumns}\n                    autoHeight\n                />\n            </div>\n        </Box>\n    );\n}\n\nexport default PersonListByProjectTeamIdAndMonth;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamPlanningPeriodDetail.js",["237"],[],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\n\nconst fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId = gql`\n    query ProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId($planningPeriodId: Int!, $projectTeamId: Int!) {\n          projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId(projectTeamId: $projectTeamId, planningPeriodId: $planningPeriodId) {\n                id\n                estimate\n                effortPerFunctionPoint\n                calculatedFinishDate\n                \n                projectTeam {\n                    name\n                }\n                planningPeriod {\n                    name\n                    start\n                    end\n                }\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                    timeSpentWithoutValuePercentCumsum\n                    timeSpentWithValuePercentCumsum\n                    timeSpentForReengineeringPercentCumsum\n                    timeSpentNotForReengineeringPercentCumsum\n                }\n                \n                projectTeamPlanningPeriodSystems {\n                  id\n                  estimate\n                  timeLeft\n                  system {\n                    id\n                    name\n                  }\n                  effortPerFunctionPoint\n                  calculatedFinishDate\n                }\n                \n                changeRequests {\n                    id\n                    key\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategoryId\n                    effortPerFunctionPoint\n                    calculatedFinishDate\n                    newFunctionsTimeSpentPrevious28Days\n                }\n                \n                positions {\n                    id\n                    position {\n                        id\n                        url\n                        name\n                    }\n                    person {\n                        id\n                        key\n                        name\n                    }\n                    newFunctionsTimeSpent\n                    newFunctionsFullTimeEquivalentPrevious28Days\n                    newFunctionsFullTimeEquivalentCapacity\n                }\n          }\n    }\n`;\n\nclass ProjectTeamPlanningPeriodDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const planningPeriodId = this.props.match.params.planningPeriodId\n        const projectTeamId = this.props.match.params.projectTeamId\n        const projectTeamPlanningPeriod = this.props.data.projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId\n        const projectTeamName = projectTeamPlanningPeriod.projectTeam.name\n        const estimate = projectTeamPlanningPeriod.estimate\n        const effortPerFunctionPoint = projectTeamPlanningPeriod.effortPerFunctionPoint\n        const calculatedFinishDate = projectTeamPlanningPeriod.calculatedFinishDate\n        const planningPeriodName = projectTeamPlanningPeriod.planningPeriod.name\n        const planningPeriodStart = projectTeamPlanningPeriod.planningPeriod.start\n        const planningPeriodEnd = projectTeamPlanningPeriod.planningPeriod.end\n        const projectTeamPlanningPeriodSystems = projectTeamPlanningPeriod.projectTeamPlanningPeriodSystems\n        const changeRequests = projectTeamPlanningPeriod.changeRequests\n        const positions = projectTeamPlanningPeriod.positions\n\n        const timeSheetsByDate = projectTeamPlanningPeriod.timeSheetsByDate\n\n        const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\n        const xAxisStart = new Date(planningPeriodStart).getTime() - fourWeeks\n        const xAxisEnd = new Date(planningPeriodEnd).getTime() + fourWeeks\n\n        const systemsTableContents = projectTeamPlanningPeriodSystems.slice()\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\n            .map(projectTeamPlanningPeriodSystem => (\n                    {\n                        id: projectTeamPlanningPeriodSystem.id,\n                        estimate: projectTeamPlanningPeriodSystem.estimate,\n                        timeLeft: projectTeamPlanningPeriodSystem.timeLeft,\n                        systemId: projectTeamPlanningPeriodSystem.system.id,\n                        systemName: projectTeamPlanningPeriodSystem.system.name,\n                        effortPerFunctionPoint: projectTeamPlanningPeriodSystem.effortPerFunctionPoint,\n                        calculatedFinishDate: projectTeamPlanningPeriodSystem.calculatedFinishDate\n                    }\n            ))\n\n        const systemsTableColumns = [\n            {\n                field: 'systemName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/projectTeams/${ projectTeamId }/systems/${ params.getValue(params.id, 'systemId') }` }>\n                        { params.getValue(params.id, 'systemName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        const changeRequestsTableContents = changeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(changeRequest => (\n                    {\n                        id: changeRequest.id,\n                        key: changeRequest.key,\n                        name: changeRequest.name,\n                        hasValue: changeRequest.hasValue,\n                        estimate: changeRequest.estimate,\n                        timeLeft: changeRequest.timeLeft,\n                        stateCategoryId: changeRequest.stateCategoryId,\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\n                        calculatedFinishDate: changeRequest.calculatedFinishDate,\n                        newFunctionsTimeSpentPrevious28Days: changeRequest.newFunctionsTimeSpentPrevious28Days\n                    }\n            ))\n\n        const changeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'newFunctionsTimeSpentPrevious28Days',\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n        const positionsTableContents = positions.slice()\n            .sort((a, b) =>  (\n                (a.newFunctionsFullTimeEquivalentPrevious28Days > b.newFunctionsFullTimeEquivalentPrevious28Days) ? -1 : (\n                    (a.newFunctionsFullTimeEquivalentPrevious28Days == b.newFunctionsFullTimeEquivalentPrevious28Days) ? 0 : 1\n                )\n            ))\n            .map(position => (\n                    {\n                        id: position.id,\n                        url: position.position.url,\n                        position: position.position.name,\n                        personId: position.person.id,\n                        personKey: position.person.key,\n                        personName: position.person.name,\n                        newFunctionsTimeSpent: position.newFunctionsTimeSpent,\n                        newFunctionsFullTimeEquivalentPrevious28Days: position.newFunctionsFullTimeEquivalentPrevious28Days,\n                        newFunctionsFullTimeEquivalentCapacity: position.newFunctionsFullTimeEquivalentCapacity\n                    }\n            ))\n\n        const positionsTableColumns = [\n            {\n                field: 'position',\n                headerName: 'Позиция',\n                flex: 1,\n                renderCell: (params) => {\n                    const url = params.getValue(params.id, 'url')\n\n                    return url ?\n                        <Link href={ url } target=\"_blank\">\n                            { params.getValue(params.id, 'position') }\n                        </Link>\n                    : params.getValue(params.id, 'position')\n                },\n            },\n            {\n                field: 'personName',\n                headerName: 'ФИО',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/persons/${ params.getValue(params.id, 'personKey') }` }>\n                        { params.getValue(params.id, 'personName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'newFunctionsTimeSpent',\n                headerName: 'Новый функционал: списано всего (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'newFunctionsFullTimeEquivalentCapacity',\n                headerName: 'Новый функционал: плановый FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\n            },\n            {\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\n                headerName: 'Новый функционал: фактический FTE за 28 дней',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Проектная команда { projectTeamName }\n                    <br />\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\n                    <br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                    <br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\n                </Typography>\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <ValueByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\n                />\n\n                <ReengineeringByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\n                />\n\n                <Typography variant=\"h6\" noWrap>\n                    Системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemsTableContents }\n                        columns={ systemsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n               <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку ПО\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ changeRequestsTableContents }\n                        columns={ changeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <Typography variant=\"h6\" noWrap>\n                    Команда\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ positionsTableContents }\n                        columns={ positionsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId, {\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, projectTeamId: props.match.params.projectTeamId }}}\n})(ProjectTeamPlanningPeriodDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectManagerList.js",["238"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport {graphql} from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport,} from '@mui/x-data-grid-pro';\n\nconst fetchProjectManagers = gql`\n    query ProjectManagers {\n        projectManagers {\n            id\n            \n            name\n            \n            isActive\n            \n            analysisTimeSpentChrononFte\n            developmentTimeSpentChrononFte\n            testingTimeSpentChrononFte\n            managementTimeSpentChrononFte\n            incidentFixingTimeSpentChrononFte\n            nonProjectActivityTimeSpentChrononFte\n            \n            timeSpentChrononFte\n        }\n    }\n`;\n\nfunction ToolBarWithExport() {\n    return (\n        <GridToolbarContainer>\n            <GridToolbarExport\n                csvOptions={{\n                    delimiter: \";\",\n                    utf8WithBom: true,\n                }}\n            />\n\n\n        </GridToolbarContainer>\n    );\n}\n\nfunction ProjectManagerList() {\n    const {loading, error, data} = useQuery(fetchProjectManagers);\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const projectManagers = data.projectManagers\n\n    const projectManagersTableContents = projectManagers.slice()\n        .sort((a, b) => ((a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : ((a.timeSpentChrononFte < b.timeSpentChrononFte) ? 1 : 0)))\n        .map(projectManager => (\n            {\n                id: projectManager.id,\n                name: projectManager.name,\n                isActive: projectManager.isActive,\n                timeSpentChrononFte: projectManager.timeSpentChrononFte,\n                analysisTimeSpentChrononFte: projectManager.analysisTimeSpentChrononFte,\n                developmentTimeSpentChrononFte: projectManager.developmentTimeSpentChrononFte,\n                testingTimeSpentChrononFte: projectManager.testingTimeSpentChrononFte,\n                managementTimeSpentChrononFte: projectManager.managementTimeSpentChrononFte,\n                incidentFixingTimeSpentChrononFte: projectManager.incidentFixingTimeSpentChrononFte,\n                nonProjectActivityTimeSpentChrononFte: projectManager.nonProjectActivityTimeSpentChrononFte,\n            }\n        ))\n\n    const projectManagersTableColumns = [\n        {\n            field: 'name',\n            headerName: 'ФИО',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/projectManagers/${params.getValue(params.id, 'id')}`}>\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'isActive',\n            headerName: 'Работает',\n            flex: 1,\n        },\n        {\n            field: 'timeSpentChrononFte',\n            headerName: 'FTE команд за последний период',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'analysisTimeSpentChrononFte',\n            headerName: 'Аналитика, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'developmentTimeSpentChrononFte',\n            headerName: 'Разработка, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'testingTimeSpentChrononFte',\n            headerName: 'Тестирование, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'managementTimeSpentChrononFte',\n            headerName: 'Управление, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'incidentFixingTimeSpentChrononFte',\n            headerName: 'Устранение инцидентов, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'nonProjectActivityTimeSpentChrononFte',\n            headerName: 'Непроизводственная (текущая) деятельность, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    return (\n        <Box>\n            <Typography variant=\"h6\" noWrap>\n                Менеджеры проектов\n            </Typography>\n\n            <div>\n                <DataGridPro\n                    rows={projectManagersTableContents}\n                    columns={projectManagersTableColumns}\n                    autoHeight\n                    components={{\n                        Toolbar: ToolBarWithExport,\n                    }}\n                />\n            </div>\n        </Box>\n    );\n}\n\nexport default graphql(fetchProjectManagers)(ProjectManagerList);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamDetail.js",["239","240","241","242"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\nimport {Link as RouterLink, useParams} from \"react-router-dom\";\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\";\n\nconst fetchProjectTeamByDedicatedTeamId = gql`\n    query ProjectTeamById($id: Int!) {\n        projectTeamById(id: $id) {\n            id\n            estimate\n            name\n            url\n            \n            calculatedFinishDate\n            \n            dedicatedTeam {\n                id\n                name\n            }\n            \n            projectManager {\n                id\n                name\n            }\n            \n            timeSheetsByDate {\n                date\n                timeSpentCumsum\n                timeSpentCumsumPrediction\n                timeSpentWithoutValuePercentCumsum\n                timeSpentWithValuePercentCumsum\n                timeSpentForReengineeringPercentCumsum\n                timeSpentNotForReengineeringPercentCumsum\n            }\n            \n            timeSheetsByMonth {\n                id\n                month\n                timeSpentFte\n                analysisTimeSpentFte\n                developmentTimeSpentFte\n                testingTimeSpentFte\n                managementTimeSpentFte\n                incidentFixingTimeSpentFte\n                workingDaysInMonthOccured\n            }\n            \n            projectTeamPlanningPeriods {\n                planningPeriod {\n                    id \n                    name\n                    start\n                    end\n                }\n                calculatedFinishDate\n                estimate\n                timeLeft\n                effortPerFunctionPoint\n                timeSpentChronon\n            }\n            \n            chrononPositions {\n                id\n                position {\n                    id\n                    url\n                    name\n                }\n                person {\n                    id\n                    key\n                    name\n                }\n                timeSpent\n                timeSpentChrononFte\n                totalCapacityFte\n                \n                planFactFteDifference\n                \n                state {\n                    name\n                }\n            }\n            \n            positionPersonPlanFactIssueCount\n        }\n    }\n`;\n\nfunction ToolBarWithExport() {\n    return (\n        <GridToolbarContainer>\n            <GridToolbarExport\n                csvOptions={{\n                    delimiter: \";\",\n                    utf8WithBom: true,\n                }}\n            />\n\n\n        </GridToolbarContainer>\n    );\n}\n\nfunction ProjectTeamDetail() {\n    const {projectTeamId} = useParams();\n    const {loading, error, data} = useQuery(fetchProjectTeamByDedicatedTeamId, {\n        variables: {id: projectTeamId}\n    });\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const projectTeam = data.projectTeamById\n\n    const projectTeamName = projectTeam.name\n    const projectTeamUrl = projectTeam.url\n    const estimate = projectTeam.estimate\n\n    const dedicatedTeam = projectTeam.dedicatedTeam\n    const dedicatedTeamId = dedicatedTeam.id\n    const dedicatedTeamName = dedicatedTeam.name\n\n    const projectManager = projectTeam.projectManager\n    const projectManagerName = projectManager.name\n\n    const timeSheetsByDate = projectTeam.timeSheetsByDate\n    const timeSheetsByMonth = projectTeam.timeSheetsByMonth\n    const calculatedFinishDate = projectTeam.calculatedFinishDate\n\n    const projectTeamPlanningPeriods = projectTeam.projectTeamPlanningPeriods\n    const positions = projectTeam.chrononPositions\n\n    const positionPersonPlanFactIssueCount = projectTeam.positionPersonPlanFactIssueCount\n\n    const today = (new Date()).getTime()\n    const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\n    const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\n\n    const allEdgeDates = [today]\n\n    if (firstTimeSheetDate) {\n        allEdgeDates.push(firstTimeSheetDate)\n    }\n\n    if (lastTimeSheetDate) {\n        allEdgeDates.push(lastTimeSheetDate)\n    }\n\n    if (calculatedFinishDate) {\n        allEdgeDates.push(new Date(calculatedFinishDate).getTime())\n    }\n\n    const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\n    const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\n\n    const planningPeriodsTableContents = projectTeamPlanningPeriods.slice()\n        .sort((a, b) => ((a.planningPeriod.start < b.planningPeriod.start) ? 1 : ((a.planningPeriod.start > b.planningPeriod.start) ? -1 : 0)))\n        .filter(a => a.estimate > 0)\n        .map(projectTeamPlanningPeriod => (\n            {\n                id: projectTeamPlanningPeriod.planningPeriod.id,\n                name: projectTeamPlanningPeriod.planningPeriod.name,\n                estimate: projectTeamPlanningPeriod.estimate,\n                timeLeft: projectTeamPlanningPeriod.timeLeft,\n                effortPerFunctionPoint: projectTeamPlanningPeriod.effortPerFunctionPoint,\n                calculatedFinishDate: projectTeamPlanningPeriod.calculatedFinishDate,\n                timeSpentChronon: projectTeamPlanningPeriod.timeSpentChronon,\n            }\n        ))\n\n    const planningPeriodsTableColumns = [\n        {\n            field: 'name',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/planningPeriods/${params.getValue(params.id, 'id')}/projectTeams/${projectTeamId}`}>\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentChronon',\n            headerName: 'Трудомощность, ч',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    const positionsTableContents = positions.slice()\n        .filter(position => position.timeSpentChrononFte > 0 || position.position.id != \"-1\"\n        )\n        .sort((a, b) => (\n            (a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : (\n                (a.timeSpentChrononFte == b.timeSpentChrononFte) ? 0 : 1\n            )\n        ))\n        .map(position => (\n            {\n                id: position.id,\n                url: position.position.url,\n                position: position.position.name,\n                personId: position.person.id,\n                personKey: position.person.key,\n                personName: position.person.name,\n                timeSpent: position.timeSpent,\n                timeSpentChrononFte: position.timeSpentChrononFte,\n                totalCapacityFte: position.totalCapacityFte,\n                planFactFteDifference: position.planFactFteDifference,\n                stateName: position.state.name\n            }\n        ))\n\n    const positionsTableColumns = [\n        {\n            field: 'position',\n            headerName: 'Позиция',\n            flex: 1,\n            renderCell: (params) => {\n                const url = params.getValue(params.id, 'url')\n\n                return url ?\n                    <Link href={url} target=\"_blank\">\n                        {params.getValue(params.id, 'position')}\n                    </Link>\n                    : params.getValue(params.id, 'position')\n            },\n        },\n        {\n            field: 'stateName',\n            headerName: 'Статус',\n            flex: 1,\n        },\n        {\n            field: 'personName',\n            headerName: 'ФИО',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/persons/${params.getValue(params.id, 'personKey')}`}>\n                    {params.getValue(params.id, 'personName')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'timeSpent',\n            headerName: 'Списано всего, ч',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'totalCapacityFte',\n            headerName: 'Плановая трудомощность, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentChrononFte',\n            headerName: 'Фактическая трудомощность, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'planFactFteDifference',\n            headerName: 'Разница между планом и фактом, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n\n    ];\n\n    const timeSheetsByMonthTableContents = timeSheetsByMonth.slice()\n        .sort((a, b) => ((a.month < b.month) ? 1 : ((a.month > b.month) ? -1 : 0)))\n        .map(timeSheetByMonth => (\n            {\n                id: timeSheetByMonth.id,\n                month: timeSheetByMonth.month,\n                timeSpentFte: timeSheetByMonth.timeSpentFte,\n                analysisTimeSpentFte: timeSheetByMonth.analysisTimeSpentFte,\n                developmentTimeSpentFte: timeSheetByMonth.developmentTimeSpentFte,\n                testingTimeSpentFte: timeSheetByMonth.testingTimeSpentFte,\n                managementTimeSpentFte: timeSheetByMonth.managementTimeSpentFte,\n                incidentFixingTimeSpentFte: timeSheetByMonth.incidentFixingTimeSpentFte,\n                workingDaysInMonthOccured: timeSheetByMonth.workingDaysInMonthOccured,\n            }\n        ))\n\n    const timeSheetsByMonthTableColumns = [\n        {\n            field: 'month',\n            headerName: 'Год-месяц',\n            width: 200,\n            renderCell: (params) => (\n                <RouterLink to={`/projectTeams/${projectTeamId}/month/${params.getValue(params.id, 'month')}/persons/`}>\n                    {params.getValue(params.id, 'month')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'timeSpentFte',\n            headerName: 'Трудозатраты (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'analysisTimeSpentFte',\n            headerName: 'Трудозатраты аналитики (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'developmentTimeSpentFte',\n            headerName: 'Трудозатраты разработки (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'testingTimeSpentFte',\n            headerName: 'Трудозатраты тестирования (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'managementTimeSpentFte',\n            headerName: 'Трудозатраты управление (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'incidentFixingTimeSpentFte',\n            headerName: 'Трудозатраты инциденты (FTE)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'workingDaysInMonthOccured',\n            headerName: 'Рабочих дней в месяце',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    return (\n        <Box>\n            <Typography variant=\"body\" noWrap>\n                Проектная команда {projectTeamName} &nbsp;\n                <Link href={projectTeamUrl} target=\"_blank\">\n                    [ источник ]\n                </Link>\n                <br/>\n                Менеджер проекта {projectManagerName}\n                <br/>\n                Расчетная дата завершения {calculatedFinishDate}\n                <br/>\n                Количество проблем с планированием команды (количество членов команды разницей между планом и фактом >\n                0.4 FTE) {positionPersonPlanFactIssueCount}\n                <br/>\n                Выделенная команда &nbsp;\n                <RouterLink to={`/dedicatedTeams/${dedicatedTeamId}`}>\n                    {dedicatedTeamName}\n                </RouterLink>\n                <br/>\n                <br/>\n            </Typography>\n\n            <TimeSheetsByDateIssueChart\n                title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSheetsByDate={timeSheetsByDate}\n                estimate={estimate}\n                calculatedFinishDate={calculatedFinishDate}\n            />\n\n            <ReengineeringByDatePeriodChart\n                planningPeriodEnd={xAxisEnd}\n                title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSpentPercentForReengineeringAndNotForReengineeringByDate={timeSheetsByDate}\n            />\n\n            <br/>\n\n            {/*<Typography variant=\"h6\" noWrap>*/}\n            {/*    Периоды*/}\n            {/*</Typography>*/}\n\n            {/*<div>*/}\n            {/*    <DataGridPro*/}\n            {/*        rows={ planningPeriodsTableContents }*/}\n            {/*        columns={ planningPeriodsTableColumns }*/}\n            {/*        autoHeight*/}\n            {/*    />*/}\n            {/*</div>*/}\n\n            {/*<br />*/}\n\n            <Typography variant=\"h6\" noWrap>\n                Команда\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={positionsTableContents}\n                    columns={positionsTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            <br/>\n\n            <Typography variant=\"h6\" noWrap>\n                Трудозатраты по месяцам\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={timeSheetsByMonthTableContents}\n                    columns={timeSheetsByMonthTableColumns}\n                    components={{\n                        Toolbar: ToolBarWithExport,\n                    }}\n                    autoHeight\n                />\n            </div>\n        </Box>\n    );\n}\n\nexport default ProjectTeamDetail;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodProjectTeamsList.js",["243","244","245","246"],[],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\n\nconst fetchPlanningPeriodById = gql`\n    query PlanningPeriodByIdQuery($id: Int!) {\n        planningPeriodById(id: $id) {\n            name\n            projectTeamPlanningPeriods {\n                id\n                projectTeam {\n                    id\n                    name\n                    projectManager {\n                      id\n                      name\n                    }\n                    dedicatedTeam {\n                      id\n                      name\n                    }\n                }\n                effortPerFunctionPoint\n                functionPoints\n            }\n        }\n    }\n`;\n\nclass PlanningPeriodProjectTeamsList extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const planningPeriodId = this.props.match.params.planningPeriodId\n\n        const planningPeriodName = this.props.data.planningPeriodById.name\n\n        const projectTeamPlanningPeriods = this.props.data.planningPeriodById.projectTeamPlanningPeriods\n\n        const projectTeamsTableContents = projectTeamPlanningPeriods.slice()\n            .sort((a, b) => ((a.projectTeam.name > b.projectTeam.name) ? 1 : ((a.projectTeam.name < b.projectTeam.name) ? -1 : 0)))\n            .map(projectTeamPlanningPeriod => (\n                    {\n                        id: projectTeamPlanningPeriod.id,\n                        projectTeamId: projectTeamPlanningPeriod.projectTeam.id,\n                        projectTeamName: projectTeamPlanningPeriod.projectTeam.name,\n                        projectManagerName: projectTeamPlanningPeriod.projectTeam.projectManager.name,\n                        effortPerFunctionPoint: projectTeamPlanningPeriod.effortPerFunctionPoint,\n                        functionPoints: projectTeamPlanningPeriod.functionPoints,\n                    }\n            ))\n\n        const projectTeamsTableColumns = [\n            {\n                field: 'projectTeamName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\n                        { params.getValue(params.id, 'projectTeamName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'projectManagerName',\n                headerName: 'Руководитель проекта',\n                flex: 1,\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'functionPoints',\n                headerName: 'Функциональных точек (шт)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Проектные команды\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ projectTeamsTableContents }\n                        columns={ projectTeamsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchPlanningPeriodById, {\n    options: (props) => { return { variables: { id: props.match.params.planningPeriodId }}}\n})(PlanningPeriodProjectTeamsList);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectManagerDetail.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamList.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemList.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamPlanningPeriodSystemDetail.js",["247","248"],[],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\n\nconst fetchProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId = gql`\n     query ProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId($projectTeamId:Int!, $planningPeriodId: Int!, $systemId: Int!) {\n          projectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId(projectTeamId: $projectTeamId, planningPeriodId: $planningPeriodId, systemId: $systemId) {\n                id\n                estimate\n                calculatedFinishDate\n                \n                effortPerFunctionPoint\n                system {\n                    name\n                }\n                planningPeriod {\n                    name\n                    start\n                    end\n                }\n\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                systemChangeRequests {\n                    id\n                    key\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategoryId\n                    effortPerFunctionPoint\n                    \n                    mainDeveloper {\n                        id\n                        name\n                    }\n                }\n          }\n    }\n`;\n\nclass ProjectTeamPlanningPeriodSystemDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const planningPeriodId = this.props.match.params.planningPeriodId\n\n        const projectTeamPlanningPeriodSystem = this.props.data.projectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId\n\n        const systemName = projectTeamPlanningPeriodSystem.system.name\n        const estimate = projectTeamPlanningPeriodSystem.estimate\n        const calculatedFinishDate = projectTeamPlanningPeriodSystem.calculatedFinishDate\n        const effortPerFunctionPoint = projectTeamPlanningPeriodSystem.effortPerFunctionPoint\n        const planningPeriodName = projectTeamPlanningPeriodSystem.planningPeriod.name\n        const planningPeriodStart = projectTeamPlanningPeriodSystem.planningPeriod.start\n        const planningPeriodEnd = projectTeamPlanningPeriodSystem.planningPeriod.end\n        const systemChangeRequests = projectTeamPlanningPeriodSystem.systemChangeRequests\n\n        const timeSheetsByDate = projectTeamPlanningPeriodSystem.timeSheetsByDate\n\n        const xAxisStart = new Date(planningPeriodStart).getTime()\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\n\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(systemChangeRequest => (\n                    {\n                        id: systemChangeRequest.id,\n                        key: systemChangeRequest.key,\n                        name: systemChangeRequest.name,\n                        hasValue: systemChangeRequest.hasValue,\n                        estimate: systemChangeRequest.estimate,\n                        timeLeft: systemChangeRequest.timeLeft,\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint,\n                        mainDeveloperName: systemChangeRequest.mainDeveloper.name,\n                    }\n            ))\n\n        const systemChangeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'mainDeveloperName',\n                headerName: 'Основной разработчик',\n                width: 200,\n                align: 'left',\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Система { systemName }<br />\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })<br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка<br/>\n                    Расчетная дата завершения { calculatedFinishDate }\n                </Typography>\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n               <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemChangeRequestsTableContents }\n                        columns={ systemChangeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId, {\n    options: (props) => { return { variables: { projectTeamId: props.match.params.projectTeamId, planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\n})(ProjectTeamPlanningPeriodSystemDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemDetail.js",["249","250","251"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink, useParams} from \"react-router-dom\";\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\n\nconst fetchSystemById = gql`\n    query SystemById($id: Int!) {\n        systemById(id: $id) {\n            id\n            estimate\n            timeLeft\n            name\n            timeSpentChrononFte\n            timeSpentChronon\n            \n            persons {\n                id\n                \n                person {\n                    id\n                    key\n                    name\n                    isActive\n                    timeSpentChrononFte\n                }\n                \n                timeSpent\n                \n                timeSpentChrononFte\n            }\n        }\n    }\n`;\n\nfunction SystemDetail() {\n    const {systemId} = useParams();\n    const {loading, error, data} = useQuery(fetchSystemById, {\n        variables: {systemId: systemId}\n    });\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const system = data.systemById\n\n    const systemName = system.name\n    const estimate = system.estimate\n\n    const persons = system.persons\n\n    const personsTableContents = persons.slice()\n        .sort((a, b) => (\n            (a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : (\n                (a.timeSpentChrononFte == b.timeSpentChrononFte) ? 0 : 1\n            )\n        ))\n        .map(person => (\n            {\n                id: person.id,\n                personId: person.person.id,\n                key: person.person.key,\n                name: person.person.name,\n                timeSpent: person.timeSpent,\n                timeSpentChrononFteTotal: person.person.timeSpentChrononFte,\n                timeSpentChrononFte: person.timeSpentChrononFte,\n                isActive: person.person.isActive,\n            }\n        ))\n\n    const personsTableColumns = [\n        {\n            field: 'name',\n            headerName: 'ФИО',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink to={`/persons/${params.getValue(params.id, 'key')}`}>\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'isActive',\n            headerName: 'Активный',\n            flex: 1,\n            renderCell: (params) => (\n                params.getValue(params.id, 'isActive') ? \"Да\" : \"Нет\"\n            ),\n        },\n        {\n            field: 'timeSpent',\n            headerName: 'Трудозатраты (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeSpentChrononFte',\n            headerName: 'Трудомощность на эту систему',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentChrononFteTotal',\n            headerName: 'Трудомощность на все системы',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value).toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    return (\n        <Box>\n            <Typography variant=\"body\" noWrap>\n                Система {systemName} &nbsp;\n                <br/>\n                <br/>\n            </Typography>\n\n            <Typography variant=\"h6\" noWrap>\n                Команда\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={personsTableContents}\n                    columns={personsTableColumns}\n                    autoHeight\n                />\n            </div>\n        </Box>\n    );\n}\n\nexport default SystemDetail;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemChangeRequestDetail.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemPlanningPeriodDetail.js",["252","253"],[],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\n\nconst fetchSystemPlanningPeriodByPlanningPeriodIdAndSystemId = gql`\n    query SystemPlanningPeriodByPlanningPeriodIdAndSystemId($planningPeriodId: Int!, $systemId: Int!) {\n          systemPlanningPeriodByPlanningPeriodIdAndSystemId(systemId: $systemId, planningPeriodId: $planningPeriodId) {\n                id\n                estimate\n                effortPerFunctionPoint\n                calculatedFinishDate\n                \n                \n                system {\n                    name\n                }\n                planningPeriod {\n                    name\n                    start\n                    end\n                }\n                \n                analysisTimeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                analysisCalculatedFinishDate\n                \n                analysisEstimate\n                \n                developmentTimeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                developmentCalculatedFinishDate\n                \n                developmentEstimate\n                \n                testingTimeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                testingCalculatedFinishDate\n                \n                testingEstimate\n\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                systemChangeRequests {\n                    id\n                    key\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategoryId\n                    effortPerFunctionPoint\n                    mainDeveloper {\n                        id\n                        name\n                    }\n                }\n          }\n    }\n`;\n\nclass SystemPlanningPeriodDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const planningPeriodId = this.props.match.params.planningPeriodId\n\n        const systemPlanningPeriod = this.props.data.systemPlanningPeriodByPlanningPeriodIdAndSystemId\n\n        const systemName = systemPlanningPeriod.system.name\n        const estimate = systemPlanningPeriod.estimate\n        const calculatedFinishDate = systemPlanningPeriod.calculatedFinishDate\n        const effortPerFunctionPoint = systemPlanningPeriod.effortPerFunctionPoint\n        const planningPeriodName = systemPlanningPeriod.planningPeriod.name\n        const planningPeriodStart = systemPlanningPeriod.planningPeriod.start\n        const planningPeriodEnd = systemPlanningPeriod.planningPeriod.end\n        const systemChangeRequests = systemPlanningPeriod.systemChangeRequests\n\n        const analysisTimeSheetsByDate = systemPlanningPeriod.analysisTimeSheetsByDate\n        const analysisEstimate = systemPlanningPeriod.analysisEstimate\n        const analysisCalculatedFinishDate = systemPlanningPeriod.analysisCalculatedFinishDate\n\n        const developmentTimeSheetsByDate = systemPlanningPeriod.developmentTimeSheetsByDate\n        const developmentEstimate = systemPlanningPeriod.developmentEstimate\n        const developmentCalculatedFinishDate = systemPlanningPeriod.developmentCalculatedFinishDate\n\n        const testingTimeSheetsByDate = systemPlanningPeriod.testingTimeSheetsByDate\n        const testingEstimate = systemPlanningPeriod.testingEstimate\n        const testingCalculatedFinishDate = systemPlanningPeriod.testingCalculatedFinishDate\n\n        const timeSheetsByDate = systemPlanningPeriod.timeSheetsByDate\n\n        const xAxisStart = new Date(planningPeriodStart).getTime()\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\n\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(systemChangeRequest => (\n                    {\n                        id: systemChangeRequest.id,\n                        key: systemChangeRequest.key,\n                        name: systemChangeRequest.name,\n                        hasValue: systemChangeRequest.hasValue,\n                        estimate: systemChangeRequest.estimate,\n                        timeLeft: systemChangeRequest.timeLeft,\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint,\n                        mainDeveloperName: systemChangeRequest.mainDeveloper.name,\n                    }\n            ))\n\n        const systemChangeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'mainDeveloperName',\n                headerName: 'Основной разработчик',\n                width: 200,\n                align: 'left',\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Система { systemName }<br />\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })<br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка<br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                </Typography>\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate ={ calculatedFinishDate }\n                />\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Аналитика\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ analysisTimeSheetsByDate }\n                    estimate={ analysisEstimate }\n                    calculatedFinishDate={ analysisCalculatedFinishDate }\n                />\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Разработка\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ developmentTimeSheetsByDate }\n                    estimate={ developmentEstimate }\n                    calculatedFinishDate={ developmentCalculatedFinishDate }\n                />\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Тестирование\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ testingTimeSheetsByDate }\n                    estimate={ testingEstimate }\n                    calculatedFinishDate={ testingCalculatedFinishDate }\n                />\n\n               <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemChangeRequestsTableContents }\n                        columns={ systemChangeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchSystemPlanningPeriodByPlanningPeriodIdAndSystemId, {\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\n})(SystemPlanningPeriodDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamQuarterDetail.js",["254","255","256","257"],[],"import React, {Component} from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport {graphql} from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink, useParams} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\n\nconst fetchProjectTeamQuarterByQuarterKeyAndProjectTeamId = gql`\n   query ProjectTeamQuarterByQuarterKeyAndProjectTeamId($quarterKey: String!, $projectTeamId: Int!) {\n          projectTeamQuarterByQuarterKeyAndProjectTeamId(projectTeamId: $projectTeamId, quarterKey: $quarterKey) {\n                id\n                estimate\n                effortPerFunctionPoint\n                calculatedFinishDate\n                changeRequestCalculatedDateAfterQuarterEndIssueCount\n                changeRequestCount\n                changeRequestCalculatedDateBeforeQuarterEndShare\n                timeSpentInCurrentQuarterForQuarterChangeRequestsShare\n                \n                projectTeam {\n                    name\n                    \n                    changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter {\n                        id\n                        changeRequest {\n                            id\n                            key\n                            estimate\n                            timeLeft\n                            hasValue\n                            name\n                            stateCategoryId\n                            effortPerFunctionPoint\n                            calculatedFinishDate\n                            timeSpentInCurrentQuarter\n                        }\n                    }\n                    \n                    personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter {\n                        id\n                        person {\n                            id\n                            key\n                            name\n                      }\n                      timeSpentInCurrentQuarter\n                    }\n                }\n                quarter {\n                    key\n                    name\n                    start\n                    end\n                }\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                    timeSpentWithoutValuePercentCumsum\n                    timeSpentWithValuePercentCumsum\n                    timeSpentForReengineeringPercentCumsum\n                    timeSpentNotForReengineeringPercentCumsum\n                }\n                \n                projectTeamQuarterSystems {\n                  id\n                  estimate\n                  timeLeft\n                  system {\n                    id\n                    name\n                  }\n                  effortPerFunctionPoint\n                  calculatedFinishDate\n                }\n                \n                changeRequests {\n                    id\n                    key\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategoryId\n                    effortPerFunctionPoint\n                    calculatedFinishDate\n                    timeSpentInCurrentQuarter\n                }\n          }\n    }\n`;\n\nfunction ProjectTeamQuarterDetail() {\n    const {quarterKey, projectTeamId} = useParams();\n\n    const {loading, error, data} = useQuery(fetchProjectTeamQuarterByQuarterKeyAndProjectTeamId, {\n        variables: {quarterKey: quarterKey, projectTeamId: projectTeamId}\n    });\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const projectTeamQuarter = data.projectTeamQuarterByQuarterKeyAndProjectTeamId\n    const projectTeamName = projectTeamQuarter.projectTeam.name\n    const changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter = projectTeamQuarter.projectTeam.changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter\n    const personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter = projectTeamQuarter.projectTeam.personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter\n    const estimate = projectTeamQuarter.estimate\n    const effortPerFunctionPoint = projectTeamQuarter.effortPerFunctionPoint\n    const calculatedFinishDate = projectTeamQuarter.calculatedFinishDate\n    const changeRequestCalculatedDateBeforeQuarterEndShare = projectTeamQuarter.changeRequestCalculatedDateBeforeQuarterEndShare\n    const timeSpentInCurrentQuarterForQuarterChangeRequestsShare = projectTeamQuarter.timeSpentInCurrentQuarterForQuarterChangeRequestsShare\n    const quarterName = projectTeamQuarter.quarter.name\n    const quarterStart = projectTeamQuarter.quarter.start\n    const quarterEnd = projectTeamQuarter.quarter.end\n    const projectTeamQuarterSystems = projectTeamQuarter.projectTeamQuarterSystems\n    const changeRequests = projectTeamQuarter.changeRequests\n    const positions = projectTeamQuarter.positions\n\n    const timeSheetsByDate = projectTeamQuarter.timeSheetsByDate\n\n    const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\n    const xAxisStart = new Date(quarterStart).getTime() - fourWeeks\n    const xAxisEnd = new Date(quarterEnd).getTime() + fourWeeks\n\n    const systemsTableContents = projectTeamQuarterSystems.slice()\n        .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\n        .map(projectTeamQuarterSystem => (\n            {\n                id: projectTeamQuarterSystem.id,\n                estimate: projectTeamQuarterSystem.estimate,\n                timeLeft: projectTeamQuarterSystem.timeLeft,\n                systemId: projectTeamQuarterSystem.system.id,\n                systemName: projectTeamQuarterSystem.system.name,\n                effortPerFunctionPoint: projectTeamQuarterSystem.effortPerFunctionPoint,\n                calculatedFinishDate: projectTeamQuarterSystem.calculatedFinishDate\n            }\n        ))\n\n    const systemsTableColumns = [\n        {\n            field: 'systemName',\n            headerName: 'Название',\n            flex: 1,\n            // renderCell: (params) => (\n            //     <RouterLink to={ `/quarters/${ quarterKey }/projectTeams/${ projectTeamId }/systems/${ params.getValue(params.id, 'systemId') }` }>\n            //         { params.getValue(params.id, 'systemName') }\n            //     </RouterLink>\n            // ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    const changeRequestsTableContents = changeRequests.slice()\n        .sort((a, b) => (\n            (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                    (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                        b.timeLeft - a.timeLeft\n                    )\n                )\n            )\n        ))\n        .map(changeRequest => (\n            {\n                id: changeRequest.id,\n                key: changeRequest.key,\n                name: changeRequest.name,\n                hasValue: changeRequest.hasValue,\n                estimate: changeRequest.estimate,\n                timeLeft: changeRequest.timeLeft,\n                stateCategoryId: changeRequest.stateCategoryId,\n                effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\n                calculatedFinishDate: changeRequest.calculatedFinishDate,\n                timeSpentInCurrentQuarter: changeRequest.timeSpentInCurrentQuarter\n            }\n        ))\n\n    const changeRequestsTableColumns = [\n        {\n            field: 'name',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink\n                    style={{textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none'}}\n                    to={`/changeRequests/${params.getValue(params.id, 'key')}`}>\n                    {params.getValue(params.id, 'key')} &nbsp;\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'hasValue',\n            headerName: 'Есть ценность',\n            width: 200,\n            valueFormatter: ({value}) => value ? \"Да\" : \"Нет\",\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentInCurrentQuarter',\n            headerName: 'Фактические трудозатраты с начала квартала (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    const changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarterTableContents = changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.slice()\n        .sort((a, b) => (\n            (a.changeRequest.stateCategoryId === 3 && b.changeRequest.stateCategoryId !== 3) ? 1 : (\n                (a.changeRequest.stateCategoryId === 3 && b.changeRequest.stateCategoryId === 3) ? 0 : (\n                    (a.changeRequest.stateCategoryId !== 3 && b.changeRequest.stateCategoryId === 3) ? -1 : (\n                        b.changeRequest.timeLeft - a.changeRequest.timeLeft\n                    )\n                )\n            )\n        ))\n        .map(changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter => (\n            {\n                id: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.id,\n                key: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.key,\n                name: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.name,\n                hasValue: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.hasValue,\n                estimate: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.estimate,\n                timeLeft: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.timeLeft,\n                stateCategoryId: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.stateCategoryId,\n                effortPerFunctionPoint: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.effortPerFunctionPoint,\n                calculatedFinishDate: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.calculatedFinishDate,\n                timeSpentInCurrentQuarter: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.timeSpentInCurrentQuarter\n            }\n        ))\n\n    const changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarterTableColumns = [\n        {\n            field: 'name',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink\n                    style={{textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none'}}\n                    to={`/changeRequests/${params.getValue(params.id, 'key')}`}>\n                    {params.getValue(params.id, 'key')} &nbsp;\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'hasValue',\n            headerName: 'Есть ценность',\n            width: 200,\n            valueFormatter: ({value}) => value ? \"Да\" : \"Нет\",\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentInCurrentQuarter',\n            headerName: 'Фактические трудозатраты с начала квартала (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    const personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarterTableContents = personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter.slice()\n        .sort((a, b) => (\n            (a.timeSpentInCurrentQuarter < b.timeSpentInCurrentQuarter) ? 1 : (\n                (a.timeSpentInCurrentQuarter > b.timeSpentInCurrentQuarter) ? -1 : 0\n            )\n        ))\n        .map(personWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter => (\n            {\n                id: personWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter.id,\n                key: personWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter.key,\n                name: personWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter.person.name,\n                timeSpentInCurrentQuarter: personWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter.timeSpentInCurrentQuarter,\n            }\n        ))\n\n    const personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarterTableColumns = [\n        {\n            field: 'name',\n            headerName: 'ФИО',\n            flex: 1,\n        },\n        {\n            field: 'timeSpentInCurrentQuarter',\n            headerName: 'Затрачено времени (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n    ];\n\n    return (\n        <Box>\n            <Typography variant=\"body\" noWrap>\n                Проектная команда {projectTeamName}\n                <br/>\n                Период планирования {quarterName} ({quarterStart}-{quarterEnd})\n                <br/>\n                Расчетная дата завершения {calculatedFinishDate}\n                <br/>\n                Затраты на функциональную точку (аналитика + разработка +\n                менеджмент) {effortPerFunctionPoint.toFixed(2)} часов / функциональная точка\n                <br/>\n                Прогноз исполнения плана по заявкам на доработку\n                ПО: {(changeRequestCalculatedDateBeforeQuarterEndShare * 100).toLocaleString(undefined, {maximumFractionDigits: 0})}%\n                <br/>\n                Процент трудозатрат на задачи\n                квартала {(timeSpentInCurrentQuarterForQuarterChangeRequestsShare * 100).toLocaleString(undefined, {maximumFractionDigits: 0})}%\n                <br/>\n                <br/>\n            </Typography>\n\n            <TimeSheetsByDatePeriodChart\n                planningPeriodEnd={quarterEnd}\n                title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSheetsByDate={timeSheetsByDate}\n                estimate={estimate}\n                calculatedFinishDate={calculatedFinishDate}\n            />\n\n            <ValueByDatePeriodChart\n                planningPeriodEnd={quarterEnd}\n                title=\"Доля списаний на задачи без бизнес-ценности\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSpentPercentWithValueAndWithoutValueByDate={timeSheetsByDate}\n            />\n\n            <ReengineeringByDatePeriodChart\n                planningPeriodEnd={quarterEnd}\n                title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSpentPercentForReengineeringAndNotForReengineeringByDate={timeSheetsByDate}\n            />\n\n            <Typography variant=\"h6\" noWrap>\n                Системы\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={systemsTableContents}\n                    columns={systemsTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            <Typography variant=\"h6\" noWrap>\n                Заявки на доработку ПО\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={changeRequestsTableContents}\n                    columns={changeRequestsTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            <br/>\n\n            <Typography variant=\"h6\" noWrap>\n                Заявки на доработку ПО, по которым шла работа, но которые не входят в текущий квартал\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarterTableContents}\n                    columns={changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarterTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            <Typography variant=\"h6\" noWrap>\n                Сотрудники, выполнявшие работы по заявкам на доработку ПО, которые не входят в текущий квартал\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarterTableContents}\n                    columns={personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarterTableColumns}\n                    autoHeight\n                />\n            </div>\n        </Box>\n    );\n}\n\nexport default ProjectTeamQuarterDetail;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/QuarterProjectTeamList.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/QuarterDetail.js",["258","259"],[],"import React from \"react\";\nimport {gql, useQuery} from '@apollo/client';\nimport Typography from '@material-ui/core/Typography';\nimport {Box} from \"@material-ui/core\";\nimport {Link as RouterLink, useParams} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\nimport {DataGridPro,} from '@mui/x-data-grid-pro';\n\nconst fetchQuarterByKey = gql`\n    query QuarterByKeyQuery($key: String!) {\n        quarterByKey(key: $key) {\n            id \n            key\n            name\n            timeSpentChrononFte\n            start\n            end\n            estimate\n            effortPerFunctionPoint\n            calculatedFinishDate\n            changeRequestCalculatedDateAfterQuarterEndIssueCount\n            changeRequestCount\n            changeRequestCalculatedDateBeforeQuarterEndShare\n            \n            dedicatedTeamQuarters {\n                id\n                estimate\n                timeLeft\n                dedicatedTeam {\n                    id\n                    name\n                }\n                effortPerFunctionPoint\n                calculatedFinishDate\n                timeSpentChronon\n                timeSpentChrononFte\n                timeSpentForReengineeringPercent\n                changeRequestCalculatedDateBeforeQuarterEndShare\n            }\n            \n#            systemQuarters {\n#                id\n#                estimate\n#                timeLeft\n#                system {\n#                    id\n#                    name\n#                }\n#                effortPerFunctionPoint\n#                calculatedFinishDate\n#            }\n    \n            timeSheetsByDate {\n                date\n                timeSpentCumsum\n                timeSpentCumsumPrediction\n                timeSpentWithoutValuePercentCumsum\n                timeSpentWithValuePercentCumsum\n                timeSpentForReengineeringPercentCumsum\n                timeSpentNotForReengineeringPercentCumsum\n            }\n            \n            changeRequests {\n                id\n                key\n                estimate\n                timeLeft\n                hasValue\n                name\n                stateCategoryId\n                effortPerFunctionPoint\n                calculatedFinishDate\n                timeSpentChronon\n            }\n        }\n    }\n`;\n\nfunction QuarterDetail() {\n    const {key} = useParams();\n    const {loading, error, data} = useQuery(fetchQuarterByKey, {\n        variables: {key: key}\n    });\n\n    if (loading) return 'Loading ...'\n\n    if (error) return `Error! ${error.message}`\n\n    const quarterKey = key\n    const quarter = data.quarterByKey\n    const timeSpentChrononFte = quarter.timeSpentChrononFte\n    const estimate = quarter.estimate\n    const effortPerFunctionPoint = quarter.effortPerFunctionPoint\n    const calculatedFinishDate = quarter.calculatedFinishDate\n    const changeRequestCalculatedDateBeforeQuarterEndShare = quarter.changeRequestCalculatedDateBeforeQuarterEndShare\n    const planningPeriodStart = quarter.start\n    const planningPeriodEnd = quarter.end\n\n    const dedicatedTeamQuarters = quarter.dedicatedTeamQuarters\n    const systemQuarters = quarter.systemQuarters\n\n    const timeSheetsByDate = quarter.timeSheetsByDate\n    const today = (new Date()).getTime()\n    const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\n    const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\n\n    const changeRequests = quarter.changeRequests\n\n    const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\n\n    const allEdgeDates = [today]\n\n    if (firstTimeSheetDate) {\n        allEdgeDates.push(firstTimeSheetDate)\n    }\n\n    if (lastTimeSheetDate) {\n        allEdgeDates.push(lastTimeSheetDate)\n    }\n\n    if (calculatedFinishDate) {\n        allEdgeDates.push(new Date(calculatedFinishDate).getTime())\n    }\n\n    const xAxisStart = Math.min(...allEdgeDates) - fourWeeks\n    const xAxisEnd = Math.max(...allEdgeDates) + fourWeeks\n\n    const dedicatedTeamsTableContents = dedicatedTeamQuarters.slice()\n        .sort((a, b) => ((a.dedicatedTeam.name > b.dedicatedTeam.name) ? 1 : ((a.dedicatedTeam.name < b.dedicatedTeam.name) ? -1 : 0)))\n        .map(dedicatedTeamQuarter => (\n            {\n                id: dedicatedTeamQuarter.id,\n                estimate: dedicatedTeamQuarter.estimate,\n                timeLeft: dedicatedTeamQuarter.timeLeft,\n                dedicatedTeamId: dedicatedTeamQuarter.dedicatedTeam.id,\n                dedicatedTeamName: dedicatedTeamQuarter.dedicatedTeam.name,\n                effortPerFunctionPoint: dedicatedTeamQuarter.effortPerFunctionPoint,\n                calculatedFinishDate: dedicatedTeamQuarter.calculatedFinishDate,\n                timeSpentChronon: dedicatedTeamQuarter.timeSpentChronon,\n                timeSpentChrononFte: dedicatedTeamQuarter.timeSpentChrononFte,\n                timeSpentForReengineeringPercent: dedicatedTeamQuarter.timeSpentForReengineeringPercent,\n                changeRequestCalculatedDateBeforeQuarterEndShare: dedicatedTeamQuarter.changeRequestCalculatedDateBeforeQuarterEndShare,\n            }\n        ))\n\n    const dedicatedTeamsTableColumns = [\n        {\n            field: 'dedicatedTeamName',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink\n                    to={`/quarters/${quarterKey}/dedicatedTeams/${params.getValue(params.id, 'dedicatedTeamId')}`}>\n                    {params.getValue(params.id, 'dedicatedTeamName')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentChronon',\n            headerName: 'Фактические трудозатраты за 28 дней (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentChrononFte',\n            headerName: 'Трудомощность, FTE',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentForReengineeringPercent',\n            headerName: 'Затраты на технологическое перевооружение и исправление проблем (%)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value * 100).toLocaleString(undefined, {\n                minimumFractionDigits: 1,\n                maximumFractionDigits: 1\n            }),\n        },\n        {\n            field: 'changeRequestCalculatedDateBeforeQuarterEndShare',\n            headerName: 'Прогноз исполнения плана по заявкам на доработку ПО (%)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => (value * 100).toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n    ];\n\n    // const systemsTableContents = systemQuarters.slice()\n    //     .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\n    //     .map(systemQuarter => (\n    //             {\n    //                 id: systemQuarter.id,\n    //                 estimate: systemQuarter.estimate,\n    //                 timeLeft: systemQuarter.timeLeft,\n    //                 systemId: systemQuarter.system.id,\n    //                 systemName: systemQuarter.system.name,\n    //                 effortPerFunctionPoint: systemQuarter.effortPerFunctionPoint,\n    //                 calculatedFinishDate: systemQuarter.calculatedFinishDate\n    //             }\n    //     ))\n    //\n    // const systemsTableColumns = [\n    //     {\n    //         field: 'systemName',\n    //         headerName: 'Название',\n    //         flex: 1,\n    //         renderCell: (params) => (\n    //             <RouterLink to={ `/quarters/${quarterId}/systems/${ params.getValue(params.id, 'systemId') }` }>\n    //                 { params.getValue(params.id, 'systemName') }\n    //             </RouterLink>\n    //         ),\n    //     },\n    //     {\n    //         field: 'calculatedFinishDate',\n    //         headerName: 'Расчетная дата завершения',\n    //         width: 200,\n    //         align: 'center',\n    //     },\n    //     {\n    //         field: 'estimate',\n    //         headerName: 'Оценка (ч)',\n    //         width: 200,\n    //         align: 'right',\n    //         valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n    //     },\n    //     {\n    //         field: 'timeLeft',\n    //         headerName: 'Осталось (ч)',\n    //         width: 200,\n    //         align: 'right',\n    //         valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n    //     },\n    //     {\n    //         field: 'effortPerFunctionPoint',\n    //         headerName: 'Затраты на ф.т.',\n    //         width: 200,\n    //         align: 'right',\n    //         valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n    //     },\n    // ];\n\n    const changeRequestsTableContents = changeRequests.slice()\n        .sort((a, b) => (\n            (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                    (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                        b.timeLeft - a.timeLeft\n                    )\n                )\n            )\n        ))\n        .map(changeRequest => (\n            {\n                id: changeRequest.id,\n                key: changeRequest.key,\n                name: changeRequest.name,\n                hasValue: changeRequest.hasValue,\n                estimate: changeRequest.estimate,\n                timeLeft: changeRequest.timeLeft,\n                stateCategoryId: changeRequest.stateCategoryId,\n                effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\n                calculatedFinishDate: changeRequest.calculatedFinishDate,\n                timeSpentChronon: changeRequest.timeSpentChronon\n            }\n        ))\n\n    const changeRequestsTableColumns = [\n        {\n            field: 'name',\n            headerName: 'Название',\n            flex: 1,\n            renderCell: (params) => (\n                <RouterLink\n                    style={{textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none'}}\n                    to={`/changeRequests/${params.getValue(params.id, 'key')}`}>\n                    {params.getValue(params.id, 'key')} &nbsp;\n                    {params.getValue(params.id, 'name')}\n                </RouterLink>\n            ),\n        },\n        {\n            field: 'calculatedFinishDate',\n            headerName: 'Расчетная дата завершения',\n            width: 200,\n            align: 'center',\n        },\n        {\n            field: 'hasValue',\n            headerName: 'Есть ценность',\n            width: 200,\n            valueFormatter: ({value}) => value ? \"Да\" : \"Нет\",\n        },\n        {\n            field: 'estimate',\n            headerName: 'Оценка (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'timeLeft',\n            headerName: 'Осталось (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {maximumFractionDigits: 0}),\n        },\n        {\n            field: 'effortPerFunctionPoint',\n            headerName: 'Затраты на ф.т.',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n        {\n            field: 'timeSpentChronon',\n            headerName: 'Фактические трудозатраты за 28 дней (ч)',\n            width: 200,\n            align: 'right',\n            valueFormatter: ({value}) => value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }),\n        },\n    ];\n\n    return (\n        <Box>\n            <Typography variant=\"body\" noWrap>\n                Расчетная дата завершения {calculatedFinishDate}\n                <br/>\n                Затраты на функциональную точку (аналитика + разработка +\n                менеджмент) {effortPerFunctionPoint.toFixed(2)} часов / функциональная точка\n                <br/>\n                Трудомощность, FTE: {timeSpentChrononFte.toLocaleString(undefined, {maximumFractionDigits: 0})}\n                <br/>\n                Прогноз исполнения плана по заявкам на доработку\n                ПО: {(changeRequestCalculatedDateBeforeQuarterEndShare * 100).toLocaleString(undefined, {maximumFractionDigits: 0})}%\n                <br/>\n                <br/>\n            </Typography>\n\n\n            <TimeSheetsByDatePeriodChart\n                planningPeriodEnd={planningPeriodEnd}\n                title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSheetsByDate={timeSheetsByDate}\n                estimate={estimate}\n                calculatedFinishDate={calculatedFinishDate}\n            />\n\n            <ValueByDatePeriodChart\n                planningPeriodEnd={planningPeriodEnd}\n                title=\"Доля списаний на задачи без бизнес-ценности\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSpentPercentWithValueAndWithoutValueByDate={timeSheetsByDate}\n            />\n\n            <ReengineeringByDatePeriodChart\n                planningPeriodEnd={planningPeriodEnd}\n                title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                xAxisStart={xAxisStart}\n                xAxisEnd={xAxisEnd}\n                color=\"black\"\n                timeSpentPercentForReengineeringAndNotForReengineeringByDate={timeSheetsByDate}\n            />\n\n            <br/>\n\n            <Typography variant=\"h6\" noWrap>\n                Выделенные команды\n            </Typography>\n\n            <div>\n                <DataGridPro\n                    rows={dedicatedTeamsTableContents}\n                    columns={dedicatedTeamsTableColumns}\n                    autoHeight\n                />\n            </div>\n\n            <br/>\n\n            <Typography variant=\"body1\">\n                <RouterLink to={`/quarters/${quarterKey}/projectTeams`}>\n                    Проектные команды одним списком\n                </RouterLink>\n            </Typography>\n            <br/>\n\n            {/*<Typography variant=\"h6\" noWrap>*/}\n            {/*    Системы*/}\n            {/*</Typography>*/}\n            {/*<div>*/}\n            {/*    <DataGridPro*/}\n            {/*        rows={ systemsTableContents }*/}\n            {/*        columns={ systemsTableColumns }*/}\n            {/*        autoHeight*/}\n            {/*    />*/}\n            {/*</div>*/}\n\n            <Typography variant=\"h6\" noWrap>\n                Заявки на доработку ПО\n            </Typography>\n            <div>\n                <DataGridPro\n                    rows={changeRequestsTableContents}\n                    columns={changeRequestsTableColumns}\n                    autoHeight\n                />\n            </div>\n        </Box>\n    );\n}\n\nexport default QuarterDetail;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/TimeSheetsByDateIssueChart.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ValueByDatePeriodChart.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ReengineeringByDatePeriodChart.js",["260"],[],"import React, {Component} from \"react\";\nimport { Legend, Tooltip, ReferenceLine, LineChart, Line, XAxis, YAxis } from \"recharts\";\nimport moment from 'moment';\nimport { getEveryMonthTicksBetweenTwoDates } from '../utils'\n\nclass ReengineeringByDatePeriodChart extends Component {\n    render() {\n        const planningPeriodEnd = this.props.planningPeriodEnd\n        const today = (new Date()).getTime()\n        const title = this.props.title\n        const xAxisStart = this.props.xAxisStart\n        const xAxisEnd = this.props.xAxisEnd\n        const color = this.props.color\n        const timeSpentPercentForReengineeringAndNotForReengineeringByDate = this.props.timeSpentPercentForReengineeringAndNotForReengineeringByDate\n\n        return (\n                <LineChart\n                    width={ 1440 }\n                    height={ 300 }\n                    data={ timeSpentPercentForReengineeringAndNotForReengineeringByDate.map(item => {\n                                return { date: new Date(item.date).getTime(), timeSpentForReengineeringPercentCumsum: item.timeSpentForReengineeringPercentCumsum }\n                        }).filter(item => {\n                            return item.date >= xAxisStart\n                        })\n                    }\n                    margin={{\n                        left: 20,\n                        top: 50\n                    }}\n                >\n                    <XAxis\n                        dataKey=\"date\"\n                        type=\"number\"\n                        domain={ [dataMin => xAxisStart, dataMax => xAxisEnd] }\n                        tickFormatter={ (date) => moment(date).format('YYYY-MM-DD') }\n                        ticks={ getEveryMonthTicksBetweenTwoDates(xAxisStart, xAxisEnd) }\n                    />\n                    <YAxis\n                        type=\"number\"\n                        dataKey=\"timeSpentCumsum\"\n                        tickFormatter={ tick => {\n                            return Math.round(tick * 100) + \" %\";\n                        }}\n                    />\n                    <Tooltip\n                        labelFormatter={ (date) => moment(date).format('YYYY-MM-DD') }\n                    />\n                    <Legend />\n\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label={{ position: \"left\", value: \"Сегодня\" }} ifOverflow=\"extendDomain\"/>\n\n                    <ReferenceLine y={ 1 } stroke={ color } strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" label={{ position: 'top',  value: \"100%\" }} />\n\n                    <Line\n                        name={ title }\n                        dataKey=\"timeSpentForReengineeringPercentCumsum\"\n                        stroke={ color }\n                        dot={ false }\n                    />\n                </LineChart>\n        );\n    }\n}\n\nexport default ReengineeringByDatePeriodChart;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/TimeSheetsByDatePeriodChart.js",[],[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/utils.js",[],[],{"ruleId":"261","severity":1,"message":"262","line":5,"column":24,"nodeType":"263","messageId":"264","endLine":5,"endColumn":28},{"ruleId":"261","severity":1,"message":"265","line":61,"column":11,"nodeType":"263","messageId":"264","endLine":61,"endColumn":25},{"ruleId":"261","severity":1,"message":"266","line":190,"column":11,"nodeType":"263","messageId":"264","endLine":190,"endColumn":39},{"ruleId":"261","severity":1,"message":"267","line":205,"column":11,"nodeType":"263","messageId":"264","endLine":205,"endColumn":38},{"ruleId":"268","severity":1,"message":"269","line":238,"column":40,"nodeType":"270","messageId":"271","endLine":238,"endColumn":42},{"ruleId":"268","severity":1,"message":"269","line":274,"column":69,"nodeType":"270","messageId":"271","endLine":274,"endColumn":71},{"ruleId":"268","severity":1,"message":"269","line":350,"column":40,"nodeType":"270","messageId":"271","endLine":350,"endColumn":42},{"ruleId":"261","severity":1,"message":"272","line":4,"column":29,"nodeType":"263","messageId":"264","endLine":4,"endColumn":36},{"ruleId":"261","severity":1,"message":"273","line":5,"column":14,"nodeType":"263","messageId":"264","endLine":5,"endColumn":18},{"ruleId":"268","severity":1,"message":"269","line":39,"column":113,"nodeType":"270","messageId":"271","endLine":39,"endColumn":115},{"ruleId":"261","severity":1,"message":"272","line":5,"column":29,"nodeType":"263","messageId":"264","endLine":5,"endColumn":36},{"ruleId":"261","severity":1,"message":"274","line":5,"column":38,"nodeType":"263","messageId":"264","endLine":5,"endColumn":47},{"ruleId":"268","severity":1,"message":"275","line":45,"column":41,"nodeType":"270","messageId":"271","endLine":45,"endColumn":43},{"ruleId":"268","severity":1,"message":"269","line":49,"column":29,"nodeType":"270","messageId":"271","endLine":49,"endColumn":31},{"ruleId":"261","severity":1,"message":"276","line":116,"column":11,"nodeType":"263","messageId":"264","endLine":116,"endColumn":20},{"ruleId":"261","severity":1,"message":"273","line":5,"column":14,"nodeType":"263","messageId":"264","endLine":5,"endColumn":18},{"ruleId":"261","severity":1,"message":"272","line":4,"column":29,"nodeType":"263","messageId":"264","endLine":4,"endColumn":36},{"ruleId":"268","severity":1,"message":"269","line":37,"column":31,"nodeType":"270","messageId":"271","endLine":37,"endColumn":33},{"ruleId":"268","severity":1,"message":"269","line":42,"column":32,"nodeType":"270","messageId":"271","endLine":42,"endColumn":34},{"ruleId":"268","severity":1,"message":"269","line":243,"column":69,"nodeType":"270","messageId":"271","endLine":243,"endColumn":71},{"ruleId":"261","severity":1,"message":"274","line":6,"column":29,"nodeType":"263","messageId":"264","endLine":6,"endColumn":38},{"ruleId":"261","severity":1,"message":"266","line":162,"column":11,"nodeType":"263","messageId":"264","endLine":162,"endColumn":39},{"ruleId":"261","severity":1,"message":"267","line":177,"column":11,"nodeType":"263","messageId":"264","endLine":177,"endColumn":38},{"ruleId":"268","severity":1,"message":"275","line":231,"column":86,"nodeType":"270","messageId":"271","endLine":231,"endColumn":88},{"ruleId":"268","severity":1,"message":"269","line":235,"column":40,"nodeType":"270","messageId":"271","endLine":235,"endColumn":42},{"ruleId":"261","severity":1,"message":"273","line":5,"column":14,"nodeType":"263","messageId":"264","endLine":5,"endColumn":18},{"ruleId":"261","severity":1,"message":"277","line":7,"column":8,"nodeType":"263","messageId":"264","endLine":7,"endColumn":35},{"ruleId":"261","severity":1,"message":"278","line":8,"column":8,"nodeType":"263","messageId":"264","endLine":8,"endColumn":30},{"ruleId":"261","severity":1,"message":"279","line":42,"column":15,"nodeType":"263","messageId":"264","endLine":42,"endColumn":33},{"ruleId":"261","severity":1,"message":"273","line":5,"column":14,"nodeType":"263","messageId":"264","endLine":5,"endColumn":18},{"ruleId":"261","severity":1,"message":"280","line":55,"column":15,"nodeType":"263","messageId":"264","endLine":55,"endColumn":31},{"ruleId":"261","severity":1,"message":"273","line":4,"column":14,"nodeType":"263","messageId":"264","endLine":4,"endColumn":18},{"ruleId":"261","severity":1,"message":"281","line":50,"column":11,"nodeType":"263","messageId":"264","endLine":50,"endColumn":19},{"ruleId":"268","severity":1,"message":"269","line":57,"column":40,"nodeType":"270","messageId":"271","endLine":57,"endColumn":42},{"ruleId":"261","severity":1,"message":"273","line":5,"column":14,"nodeType":"263","messageId":"264","endLine":5,"endColumn":18},{"ruleId":"261","severity":1,"message":"280","line":85,"column":15,"nodeType":"263","messageId":"264","endLine":85,"endColumn":31},{"ruleId":"261","severity":1,"message":"282","line":1,"column":16,"nodeType":"263","messageId":"264","endLine":1,"endColumn":25},{"ruleId":"261","severity":1,"message":"283","line":3,"column":9,"nodeType":"263","messageId":"264","endLine":3,"endColumn":16},{"ruleId":"261","severity":1,"message":"273","line":5,"column":14,"nodeType":"263","messageId":"264","endLine":5,"endColumn":18},{"ruleId":"261","severity":1,"message":"276","line":122,"column":11,"nodeType":"263","messageId":"264","endLine":122,"endColumn":20},{"ruleId":"261","severity":1,"message":"284","line":98,"column":11,"nodeType":"263","messageId":"264","endLine":98,"endColumn":30},{"ruleId":"261","severity":1,"message":"285","line":102,"column":11,"nodeType":"263","messageId":"264","endLine":102,"endColumn":25},{"ruleId":"261","severity":1,"message":"286","line":8,"column":15,"nodeType":"263","messageId":"264","endLine":8,"endColumn":32},"no-unused-vars","'Cell' is defined but never used.","Identifier","unusedVar","'companiesQueue' is assigned a value but never used.","'planningPeriodsTableContents' is assigned a value but never used.","'planningPeriodsTableColumns' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'NavLink' is defined but never used.","'Link' is defined but never used.","'useParams' is defined but never used.","Expected '!==' and instead saw '!='.","'positions' is assigned a value but never used.","'TimeSheetsByDatePeriodChart' is defined but never used.","'ValueByDatePeriodChart' is defined but never used.","'planningPeriodName' is assigned a value but never used.","'planningPeriodId' is assigned a value but never used.","'estimate' is assigned a value but never used.","'Component' is defined but never used.","'graphql' is defined but never used.","'planningPeriodStart' is assigned a value but never used.","'systemQuarters' is assigned a value but never used.","'planningPeriodEnd' is assigned a value but never used."]