[{"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\index.js":"1","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\App.js":"2","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\reportWebVitals.js":"3","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodsList.js":"4","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodDetail.js":"5","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemChangeRequestDetail.js":"6","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ChangeRequestDetail.js":"7","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodDetail.js":"8","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodDetail.js":"9","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\CapacityAndQueue.js":"10","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\utils.js":"11","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDatePeriodChart.js":"12","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDateIssueChart.js":"13","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ValueByDatePeriodChart.js":"14","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemPlanningPeriodDetail.js":"15"},{"size":3440,"mtime":1631524089825,"results":"16","hashOfConfig":"17"},{"size":135,"mtime":1629779914551,"results":"18","hashOfConfig":"17"},{"size":375,"mtime":1629779914557,"results":"19","hashOfConfig":"17"},{"size":2295,"mtime":1629779914554,"results":"20","hashOfConfig":"17"},{"size":11180,"mtime":1631553939734,"results":"21","hashOfConfig":"17"},{"size":6580,"mtime":1631533349690,"results":"22","hashOfConfig":"17"},{"size":8628,"mtime":1631533287455,"results":"23","hashOfConfig":"17"},{"size":8582,"mtime":1631526551562,"results":"24","hashOfConfig":"17"},{"size":6967,"mtime":1631523497475,"results":"25","hashOfConfig":"17"},{"size":15513,"mtime":1629816224642,"results":"26","hashOfConfig":"17"},{"size":452,"mtime":1629988539883,"results":"27","hashOfConfig":"17"},{"size":3938,"mtime":1630089134316,"results":"28","hashOfConfig":"17"},{"size":3169,"mtime":1630006192540,"results":"29","hashOfConfig":"17"},{"size":3038,"mtime":1630006098143,"results":"30","hashOfConfig":"17"},{"size":9420,"mtime":1631546495533,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"gnqo0z",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\index.js",[],["68","69"],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\App.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\reportWebVitals.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodsList.js",["70"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\nconst fetchPlanningPeriods = gql`\r\n    query PlanningPeriods {\r\n        planningPeriods {\r\n            id \r\n            name\r\n            start\r\n            end\r\n        }\r\n    }\r\n`;\r\n\r\nclass PlanningPeriodsList extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriods = this.props.data.planningPeriods\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body1\">\r\n                    <RouterLink to={ `/capacityAndQueue` }>\r\n                        Очереди по командам\r\n                    </RouterLink>\r\n                </Typography>\r\n                <br />\r\n\r\n                <Typography variant=\"body1\">\r\n                    Периоды\r\n                </Typography>\r\n\r\n                <ul>\r\n                    { planningPeriods\r\n                        .slice()\r\n                        .sort(function(a, b) {\r\n                            if (a.start < b.start) {\r\n                                return 1;\r\n                            }\r\n                            if (a.start === b.start) {\r\n                                return 0;\r\n                            }\r\n                            if (a.start > b.start) {\r\n                                return -1;\r\n                            }\r\n                        })\r\n                        .map(planningPeriod => (\r\n                            <li key={ planningPeriod.id }>\r\n                                <RouterLink to={ `/planningPeriods/${planningPeriod.id}` }>\r\n                                { planningPeriod.name }\r\n                                </RouterLink>\r\n                                &nbsp;\r\n                                ({ planningPeriod.start } - { planningPeriod.end })\r\n                            </li>\r\n                        )\r\n                    )}\r\n                </ul>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPlanningPeriods)(PlanningPeriodsList);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodDetail.js",["71","72","73","74"],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemChangeRequestDetail.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ChangeRequestDetail.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodDetail.js",["75","76","77","78"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\n\r\nconst fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId = gql`\r\n        query DedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId($planningPeriodId: Int!, $dedicatedTeamId: Int!) {\r\n              dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId(dedicatedTeamId: $dedicatedTeamId, planningPeriodId: $planningPeriodId) {\r\n                    id\r\n                    estimate\r\n                    effortPerFunctionPoint\r\n                    dedicatedTeam {\r\n                        name\r\n                    }\r\n                    planningPeriod {\r\n                        name\r\n                        start\r\n                        end\r\n                    }\r\n                    timeSpentPercentWithValueAndWithoutValueByDate {\r\n                        date\r\n                        timeSpentWithoutValuePercentCumsum\r\n                        timeSpentWithValuePercentCumsum\r\n                    }\r\n                    timeSheetsByDate {\r\n                        date\r\n                        timeSpentCumsum\r\n                        timeSpentCumsumPrediction\r\n                    }\r\n                    \r\n                    timeSpentCumsumAtEndPrediction\r\n                    \r\n                    projectTeams {\r\n                        id\r\n                        name\r\n                    }\r\n                    \r\n                    changeRequests {\r\n                        id\r\n                        estimate\r\n                        timeLeft\r\n                        hasValue\r\n                        name\r\n                        stateCategory {\r\n                            id\r\n                        }\r\n                    }\r\n              }\r\n        }\r\n`;\r\n\r\nclass DedicatedTeamPlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n\r\n        const dedicatedTeamPlanningPeriod = this.props.data.dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId\r\n\r\n        const dedicatedTeamName = dedicatedTeamPlanningPeriod.dedicatedTeam.name\r\n        const estimate = dedicatedTeamPlanningPeriod.estimate\r\n        const effortPerFunctionPoint = dedicatedTeamPlanningPeriod.effortPerFunctionPoint\r\n        const planningPeriodName = dedicatedTeamPlanningPeriod.planningPeriod.name\r\n        const planningPeriodStart = dedicatedTeamPlanningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = dedicatedTeamPlanningPeriod.planningPeriod.end\r\n        const projectTeams = dedicatedTeamPlanningPeriod.projectTeams\r\n        const changeRequests = dedicatedTeamPlanningPeriod.changeRequests\r\n\r\n        const timeSheetsByDate = dedicatedTeamPlanningPeriod.timeSheetsByDate\r\n        const timeSpentPercentWithValueAndWithoutValueByDate = dedicatedTeamPlanningPeriod.timeSpentPercentWithValueAndWithoutValueByDate\r\n        const timeSpentCumsumAtEndPrediction = dedicatedTeamPlanningPeriod.timeSpentCumsumAtEndPrediction\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Выделенная команда { dedicatedTeamName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    timeSpentCumsumAtEndPrediction={ timeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <ValueByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSpentPercentWithValueAndWithoutValueByDate }\r\n                />\r\n\r\n                <Typography variant=\"body\" noWrap>\r\n                    Проектные команды\r\n                </Typography>\r\n               <ul>\r\n                    { projectTeams\r\n                        .slice()\r\n.                       sort(function(a, b) {\r\n                            if (a.name > b.named) {\r\n                                return 1;\r\n                            }\r\n                            if (a.name == b.name) {\r\n                                return 0;\r\n                            }\r\n                            if (a.name < b.name) {\r\n                                return -1;\r\n                            }\r\n                        })\r\n                        .map(projectTeam => (\r\n                            <li key={ projectTeam.id }>\r\n                                <RouterLink to={ `/planningPeriods/${ planningPeriodId }/projectTeams/${ projectTeam.id }` }>\r\n                                { projectTeam.name }\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                </ul>\r\n\r\n                <Typography variant=\"body\" noWrap>\r\n                    Заявки на доработку\r\n                </Typography>\r\n                <ul>\r\n                    { changeRequests\r\n                        .slice()\r\n.                       sort(function(a, b) {\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id !== 3) {\r\n                                return 1;\r\n                            }\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id === 3) {\r\n                                return 0;\r\n                            }\r\n                            if (a.stateCategory.id !== 3 && b.stateCategory.id === 3) {\r\n                                return -1;\r\n                            }\r\n\r\n                            return b.timeLeft - a.timeLeft\r\n                        })\r\n                        .map(changeRequest => (\r\n                            <li key={ changeRequest.id }>\r\n                                { changeRequest.stateCategory.id !== 3 ? `Осталось ${ Math.round(changeRequest.timeLeft) } ч ` : '' }\r\n                                { changeRequest.estimate === 0 && changeRequest.stateCategory.id !== 3 ? `Оценка ${ Math.round(changeRequest.estimate) } ч ` : '' }\r\n                                { changeRequest.hasValue ? '' : 'Нет ценности ' }\r\n\r\n                                <RouterLink style={{ textDecoration: changeRequest.stateCategory.id === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${changeRequest.id}` }>\r\n                                    { changeRequest.id } &nbsp;\r\n                                    { changeRequest.name }\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                 </ul>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId, {\r\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, dedicatedTeamId: props.match.params.dedicatedTeamId }}}\r\n})(DedicatedTeamPlanningPeriodDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodDetail.js",["79","80"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\n\r\nconst fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId = gql`\r\n    query ProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId($planningPeriodId: Int!, $projectTeamId: Int!) {\r\n          projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId(projectTeamId: $projectTeamId, planningPeriodId: $planningPeriodId) {\r\n                id\r\n                estimate\r\n                effortPerFunctionPoint\r\n                \r\n                projectTeam {\r\n                    name\r\n                }\r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n                timeSpentPercentWithValueAndWithoutValueByDate {\r\n                    date\r\n                    timeSpentWithoutValuePercentCumsum\r\n                    timeSpentWithValuePercentCumsum\r\n                }\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                timeSpentCumsumAtEndPrediction\r\n                \r\n                changeRequests {\r\n                    id\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategory {\r\n                        id\r\n                    }\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass ProjectTeamPlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const projectTeamPlanningPeriod = this.props.data.projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId\r\n        const projectTeamName = projectTeamPlanningPeriod.projectTeam.name\r\n        const estimate = projectTeamPlanningPeriod.estimate\r\n        const effortPerFunctionPoint = projectTeamPlanningPeriod.effortPerFunctionPoint\r\n        const planningPeriodName = projectTeamPlanningPeriod.planningPeriod.name\r\n        const planningPeriodStart = projectTeamPlanningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = projectTeamPlanningPeriod.planningPeriod.end\r\n        const changeRequests = projectTeamPlanningPeriod.changeRequests\r\n\r\n        const timeSheetsByDate = projectTeamPlanningPeriod.timeSheetsByDate\r\n        const timeSpentPercentWithValueAndWithoutValueByDate = projectTeamPlanningPeriod.timeSpentPercentWithValueAndWithoutValueByDate\r\n        const timeSpentCumsumAtEndPrediction = projectTeamPlanningPeriod.timeSpentCumsumAtEndPrediction\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Проектная команда { projectTeamName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    timeSpentCumsumAtEndPrediction={ timeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <ValueByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSpentPercentWithValueAndWithoutValueByDate }\r\n                />\r\n\r\n                <Typography variant=\"body\" noWrap>\r\n                    Заявки на доработку\r\n                </Typography>\r\n                <ul>\r\n                    { changeRequests\r\n                        .slice()\r\n.                       sort(function(a, b) {\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id !== 3) {\r\n                                return 1;\r\n                            }\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id === 3) {\r\n                                return 0;\r\n                            }\r\n                            if (a.stateCategory.id !== 3 && b.stateCategory.id === 3) {\r\n                                return -1;\r\n                            }\r\n\r\n                            return b.timeLeft - a.timeLeft\r\n                        })\r\n                        .map(changeRequest => (\r\n                            <li key={ changeRequest.id }>\r\n                                { changeRequest.stateCategory.id !== 3 ? `Осталось ${ Math.round(changeRequest.timeLeft) } ч ` : '' }\r\n                                { changeRequest.estimate === 0 && changeRequest.stateCategory.id !== 3 ? `Оценка ${ Math.round(changeRequest.estimate) } ч ` : '' }\r\n                                { changeRequest.hasValue ? '' : 'Нет ценности ' }\r\n\r\n                                <RouterLink style={{ textDecoration: changeRequest.stateCategory.id === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${changeRequest.id}` }>\r\n                                    { changeRequest.id } &nbsp;\r\n                                    { changeRequest.name }\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                 </ul>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId, {\r\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, projectTeamId: props.match.params.projectTeamId }}}\r\n})(ProjectTeamPlanningPeriodDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\CapacityAndQueue.js",["81","82","83"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { DataGrid, GridToolbarContainer, GridToolbarExport, } from '@material-ui/data-grid';\r\n\r\nconst fetchCapacityAndQueue = gql`\r\n    query capacityAndQueue {\r\n        companies {\r\n            id\r\n            name\r\n            actualChangeRequestCapacity\r\n            actualAnalysisCapacity\r\n            actualDevelopmentCapacity\r\n            actualTestingCapacity\r\n            \r\n            timeLeft\r\n            analysisTimeLeft\r\n            developmentTimeLeft\r\n            testingTimeLeft\r\n            \r\n            queueLength\r\n            analysisQueueLength\r\n            developmentQueueLength\r\n            testingQueueLength\r\n        }\r\n        \r\n        dedicatedTeams {\r\n            id\r\n            name\r\n            actualChangeRequestCapacity\r\n            actualAnalysisCapacity\r\n            actualDevelopmentCapacity\r\n            actualTestingCapacity\r\n            \r\n            timeLeft\r\n            analysisTimeLeft\r\n            developmentTimeLeft\r\n            testingTimeLeft\r\n            \r\n            queueLength\r\n            analysisQueueLength\r\n            developmentQueueLength\r\n            testingQueueLength\r\n        }\r\n        \r\n        projectTeams {\r\n            id\r\n            name\r\n            actualChangeRequestCapacity\r\n            actualAnalysisCapacity\r\n            actualDevelopmentCapacity\r\n            actualTestingCapacity\r\n            \r\n            timeLeft\r\n            analysisTimeLeft\r\n            developmentTimeLeft\r\n            testingTimeLeft\r\n            \r\n            queueLength\r\n            analysisQueueLength\r\n            developmentQueueLength\r\n            testingQueueLength\r\n            \r\n            dedicatedTeam {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nfunction ToolBarWithExport() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      <GridToolbarExport />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nclass CapacityAndQueue extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const companies = this.props.data.companies\r\n        const dedicatedTeams = this.props.data.dedicatedTeams\r\n        const projectTeams = this.props.data.projectTeams\r\n\r\n        const companiesQueue = companies.slice().map(\r\n            company => {\r\n                return {\r\n                    id: company.id,\r\n                    name: company.name,\r\n                    queueLength: Math.round(company.queueLength / 22),\r\n                    analysisQueueLength: Math.round(company.analysisQueueLength / 22),\r\n                    developmentQueueLength: Math.round(company.developmentQueueLength / 22),\r\n                    testingQueueLength: Math.round(company.testingQueueLength / 22)\r\n                }\r\n            }\r\n        )\r\n\r\n        const dedicatedTeamsQueue = dedicatedTeams.slice().map(\r\n            dedicatedTeam => {\r\n                return {\r\n                    id: dedicatedTeam.id,\r\n                    name: dedicatedTeam.name,\r\n                    queueLength: Math.round(dedicatedTeam.queueLength / 22),\r\n                    analysisQueueLength: Math.round(dedicatedTeam.analysisQueueLength / 22),\r\n                    developmentQueueLength: Math.round(dedicatedTeam.developmentQueueLength / 22),\r\n                    testingQueueLength: Math.round(dedicatedTeam.testingQueueLength / 22)\r\n                }\r\n            }\r\n        )\r\n\r\n        const projectTeamsQueue = projectTeams.slice().map(\r\n            projectTeam => {\r\n                return {\r\n                    id: projectTeam.id,\r\n                    name: projectTeam.name + \" : \" + projectTeam.dedicatedTeam.name,\r\n                    queueLength: Math.round(projectTeam.queueLength / 22),\r\n                    manDaysLeft: Math.round(projectTeam.timeLeft / 8 * 10) / 10,\r\n                    fte: Math.round(projectTeam.actualChangeRequestCapacity / 8 * 10) / 10,\r\n                    analysisFte: Math.round(projectTeam.actualAnalysisCapacity / 8 * 10) / 10,\r\n                    analysisManDaysLeft: Math.round(projectTeam.analysisTimeLeft / 8 * 10) / 10,\r\n                    developmentFte: Math.round(projectTeam.actualDevelopmentCapacity / 8 * 10) / 10,\r\n                    developmentManDaysLeft: Math.round(projectTeam.developmentTimeLeft / 8 * 10) / 10,\r\n                    testingFte: Math.round(projectTeam.actualTestingCapacity / 8 * 10) / 10,\r\n                    testingManDaysLeft: Math.round(projectTeam.testingTimeLeft / 8 * 10) / 10,\r\n                    analysisQueueLength: Math.round(projectTeam.analysisQueueLength / 22),\r\n                    developmentQueueLength: Math.round(projectTeam.developmentQueueLength / 22),\r\n                    testingQueueLength: Math.round(projectTeam.testingQueueLength / 22)\r\n                }\r\n            }\r\n        )\r\n\r\n        const top10ProjectTeams = projectTeamsQueue.sort(\r\n            function(a, b) {\r\n                return Math.max(\r\n                    b.queueLength,\r\n                    b.analysisQueueLength,\r\n                    b.developmentQueueLength,\r\n                    b.testingQueueLength\r\n                ) - Math.max(\r\n                    a.queueLength,\r\n                    a.analysisQueueLength,\r\n                    a.developmentQueueLength,\r\n                    a.testingQueueLength\r\n                )\r\n            }\r\n        ).slice(0, 9)\r\n\r\n        const top20To50ProjectTeams = projectTeamsQueue.sort(\r\n            function(a, b) {\r\n                return Math.max(\r\n                    b.queueLength,\r\n                    b.analysisQueueLength,\r\n                    b.developmentQueueLength,\r\n                    b.testingQueueLength\r\n                ) - Math.max(\r\n                    a.queueLength,\r\n                    a.analysisQueueLength,\r\n                    a.developmentQueueLength,\r\n                    a.testingQueueLength\r\n                )\r\n            }\r\n        ).slice(10)\r\n\r\n        const topDedicatedTeamsWithCompanies = companiesQueue.concat(dedicatedTeamsQueue).sort(\r\n                        function(a, b) {\r\n                return Math.max(\r\n                    b.queueLength,\r\n                    b.analysisQueueLength,\r\n                    b.developmentQueueLength,\r\n                    b.testingQueueLength\r\n                ) - Math.max(\r\n                    a.queueLength,\r\n                    a.analysisQueueLength,\r\n                    a.developmentQueueLength,\r\n                    a.testingQueueLength\r\n                )\r\n            }\r\n        )\r\n\r\n        const topDedicatedTeamsWithCompaniesColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'queueLength',\r\n                headerName: 'Очередь (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'analysisQueueLength',\r\n                headerName: 'Очередь аналитики (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'developmentQueueLength',\r\n                headerName: 'Очередь разработки (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'testingQueueLength',\r\n                headerName: 'Очередь тестирования (мес)',\r\n                flex: 1,\r\n            },\r\n        ];\r\n\r\n        const topProjectTeams = projectTeamsQueue.sort(\r\n                        function(a, b) {\r\n                return Math.max(\r\n                    b.queueLength,\r\n                    b.analysisQueueLength,\r\n                    b.developmentQueueLength,\r\n                    b.testingQueueLength\r\n                ) - Math.max(\r\n                    a.queueLength,\r\n                    a.analysisQueueLength,\r\n                    a.developmentQueueLength,\r\n                    a.testingQueueLength\r\n                )\r\n            }\r\n        )\r\n\r\n        const topProjectTeamsColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'queueLength',\r\n                headerName: 'Очередь (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'manDaysLeft',\r\n                headerName: 'Трудоемкость (чел дней)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'fte',\r\n                headerName: 'Трудомощность FTE',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'analysisQueueLength',\r\n                headerName: 'Очередь аналитики (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'analysisManDaysLeft',\r\n                headerName: 'Трудоемкость аналитики (чел дней)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'analysisFte',\r\n                headerName: 'Трудомощность аналитики FTE',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'developmentQueueLength',\r\n                headerName: 'Очередь разработки (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'developmentManDaysLeft',\r\n                headerName: 'Трудоемкость разработки (чел дней)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'developmentFte',\r\n                headerName: 'Трудомощность разработки FTE',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'testingQueueLength',\r\n                headerName: 'Очередь тестирования (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'testingManDaysLeft',\r\n                headerName: 'Трудоемкость тестирования (чел дней)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'testingFte',\r\n                headerName: 'Трудомощность тестирования FTE',\r\n                flex: 1,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body1\">\r\n                    Выделенные команды (месяцы)\r\n                </Typography>\r\n                <BarChart\r\n                    width={1600}\r\n                    height={800}\r\n                    data={topDedicatedTeamsWithCompanies}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 30,\r\n                        bottom: 400,\r\n                    }}\r\n                    barCategoryGap=\"10%\"\r\n                    barGap=\"0%\"\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\r\n                    <YAxis domain={['auto', 'auto']} />\r\n                    <Tooltip />\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n                    <Bar dataKey=\"analysisQueueLength\" fill=\"red\" name={\"Аналитика\"} />\r\n                    <Bar dataKey=\"developmentQueueLength\" fill=\"green\" name={\"Разработка\"} />\r\n                    <Bar dataKey=\"testingQueueLength\" fill=\"blue\" name={\"Тестирование\"} />\r\n                </BarChart>\r\n\r\n                <div style={{ height: 400, width: '100%' }}>\r\n                    <DataGrid\r\n                        rows={topDedicatedTeamsWithCompanies}\r\n                        columns={topDedicatedTeamsWithCompaniesColumns}\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n                <Typography variant=\"body1\">\r\n                    Top-10 проектных команд (месяцы)\r\n                </Typography>\r\n                <BarChart\r\n                    width={1600}\r\n                    height={800}\r\n                    data={top10ProjectTeams}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 30,\r\n                        bottom: 400,\r\n                    }}\r\n                    barCategoryGap=\"10%\"\r\n                    barGap=\"0%\"\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\r\n                    <YAxis domain={['auto', 'auto']} />\r\n                    <Tooltip />\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n                    <Bar dataKey=\"analysisQueueLength\" fill=\"red\" name={\"Аналитика\"} />\r\n                    <Bar dataKey=\"developmentQueueLength\" fill=\"green\" name={\"Разработка\"} />\r\n                    <Bar dataKey=\"testingQueueLength\" fill=\"blue\" name={\"Тестирование\"} />\r\n                </BarChart>\r\n\r\n                <Typography variant=\"body1\">\r\n                    Остальные проектные команды (месяцы)\r\n                </Typography>\r\n                <BarChart\r\n                    width={1600}\r\n                    height={800}\r\n                    data={top20To50ProjectTeams}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 30,\r\n                        bottom: 400,\r\n                    }}\r\n                    barCategoryGap=\"10%\"\r\n                    barGap=\"0%\"\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\r\n                    <YAxis domain={['auto', 'auto']} />\r\n                    <Tooltip />\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n                    <Bar dataKey=\"analysisQueueLength\" fill=\"red\" name={\"Аналитика\"} />\r\n                    <Bar dataKey=\"developmentQueueLength\" fill=\"green\" name={\"Разработка\"} />\r\n                    <Bar dataKey=\"testingQueueLength\" fill=\"blue\" name={\"Тестирование\"} />\r\n                </BarChart>\r\n\r\n                <div style={{ height: 400, width: '100%' }}>\r\n                    <DataGrid\r\n                        rows={topProjectTeams}\r\n                        columns={topProjectTeamsColumns}\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchCapacityAndQueue)(CapacityAndQueue);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\utils.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDatePeriodChart.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDateIssueChart.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ValueByDatePeriodChart.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemPlanningPeriodDetail.js",["84","85","86"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\n\r\nconst fetchSystemPlanningPeriodByPlanningPeriodIdAndSystemId = gql`\r\n    query SystemPlanningPeriodByPlanningPeriodIdAndSystemId($planningPeriodId: Int!, $systemId: Int!) {\r\n          systemPlanningPeriodByPlanningPeriodIdAndSystemId(systemId: $systemId, planningPeriodId: $planningPeriodId) {\r\n                id\r\n                estimate\r\n                effortPerFunctionPoint\r\n                system {\r\n                    name\r\n                }\r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n                \r\n                analysisTimeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                analysisTimeSpentCumsumAtEndPrediction\r\n                \r\n                analysisEstimate\r\n                \r\n                developmentTimeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                developmentTimeSpentCumsumAtEndPrediction\r\n                \r\n                developmentEstimate\r\n                \r\n                testingTimeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                testingTimeSpentCumsumAtEndPrediction\r\n                \r\n                testingEstimate\r\n\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                timeSpentCumsumAtEndPrediction\r\n                \r\n                systemChangeRequests {\r\n                    id\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategory {\r\n                        id\r\n                    }\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass SystemPlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n\r\n        const systemPlanningPeriod = this.props.data.systemPlanningPeriodByPlanningPeriodIdAndSystemId\r\n\r\n        const systemName = systemPlanningPeriod.system.name\r\n        const estimate = systemPlanningPeriod.estimate\r\n        const effortPerFunctionPoint = systemPlanningPeriod.effortPerFunctionPoint\r\n        const planningPeriodName = systemPlanningPeriod.planningPeriod.name\r\n        const planningPeriodStart = systemPlanningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = systemPlanningPeriod.planningPeriod.end\r\n        const systemChangeRequests = systemPlanningPeriod.systemChangeRequests\r\n\r\n        const analysisTimeSheetsByDate = systemPlanningPeriod.analysisTimeSheetsByDate\r\n        const analysisTimeSpentCumsumAtEndPrediction = systemPlanningPeriod.analysisTimeSpentCumsumAtEndPrediction\r\n        const analysisEstimate = systemPlanningPeriod.analysisEstimate\r\n\r\n        const developmentTimeSheetsByDate = systemPlanningPeriod.developmentTimeSheetsByDate\r\n        const developmentTimeSpentCumsumAtEndPrediction = systemPlanningPeriod.developmentTimeSpentCumsumAtEndPrediction\r\n        const developmentEstimate = systemPlanningPeriod.developmentEstimate\r\n\r\n        const testingTimeSheetsByDate = systemPlanningPeriod.testingTimeSheetsByDate\r\n        const testingTimeSpentCumsumAtEndPrediction = systemPlanningPeriod.testingTimeSpentCumsumAtEndPrediction\r\n        const testingEstimate = systemPlanningPeriod.testingEstimate\r\n\r\n        const timeSheetsByDate = systemPlanningPeriod.timeSheetsByDate\r\n        const timeSpentCumsumAtEndPrediction = systemPlanningPeriod.timeSpentCumsumAtEndPrediction\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Система { systemName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    timeSpentCumsumAtEndPrediction={ timeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ analysisTimeSheetsByDate }\r\n                    estimate={ analysisEstimate }\r\n                    timeSpentCumsumAtEndPrediction={ analysisTimeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Разработка\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ developmentTimeSheetsByDate }\r\n                    estimate={ developmentEstimate }\r\n                    timeSpentCumsumAtEndPrediction={ developmentTimeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ testingTimeSheetsByDate }\r\n                    estimate={ testingEstimate }\r\n                    timeSpentCumsumAtEndPrediction={ testingTimeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <Typography variant=\"body\" noWrap>\r\n                    Заявки на доработку\r\n                </Typography>\r\n                <ul>\r\n                    { systemChangeRequests\r\n                        .slice()\r\n.                       sort(function(a, b) {\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id !== 3) {\r\n                                return 1;\r\n                            }\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id === 3) {\r\n                                return 0;\r\n                            }\r\n                            if (a.stateCategory.id !== 3 && b.stateCategory.id === 3) {\r\n                                return -1;\r\n                            }\r\n\r\n                            return b.timeLeft - a.timeLeft\r\n                        })\r\n                        .map(systemChangeRequest => (\r\n                            <li key={ systemChangeRequest.id }>\r\n                                { systemChangeRequest.stateCategory.id !== 3 ? `Осталось ${ Math.round(systemChangeRequest.timeLeft) } ч ` : '' }\r\n                                { systemChangeRequest.estimate === 0 && systemChangeRequest.stateCategory.id !== 3 ? `Оценка ${ Math.round(systemChangeRequest.estimate) } ч ` : '' }\r\n                                { systemChangeRequest.hasValue ? '' : 'Нет ценности ' }\r\n\r\n                                <RouterLink style={{ textDecoration: systemChangeRequest.stateCategory.id === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${systemChangeRequest.id}` }>\r\n                                    { systemChangeRequest.id } &nbsp;\r\n                                    { systemChangeRequest.name }\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                 </ul>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchSystemPlanningPeriodByPlanningPeriodIdAndSystemId, {\r\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\r\n})(SystemPlanningPeriodDetail);",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":41,"column":31,"nodeType":"93","messageId":"94","endLine":41,"endColumn":39},{"ruleId":"95","severity":1,"message":"96","line":5,"column":14,"nodeType":"97","messageId":"98","endLine":5,"endColumn":18},{"ruleId":"95","severity":1,"message":"99","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":14},{"ruleId":"95","severity":1,"message":"100","line":10,"column":20,"nodeType":"97","messageId":"98","endLine":10,"endColumn":40},{"ruleId":"95","severity":1,"message":"101","line":10,"column":42,"nodeType":"97","messageId":"98","endLine":10,"endColumn":59},{"ruleId":"95","severity":1,"message":"96","line":5,"column":14,"nodeType":"97","messageId":"98","endLine":5,"endColumn":18},{"ruleId":"95","severity":1,"message":"99","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":14},{"ruleId":"91","severity":1,"message":"92","line":116,"column":30,"nodeType":"93","messageId":"94","endLine":116,"endColumn":38},{"ruleId":"102","severity":1,"message":"103","line":120,"column":40,"nodeType":"104","messageId":"105","endLine":120,"endColumn":42},{"ruleId":"95","severity":1,"message":"96","line":5,"column":14,"nodeType":"97","messageId":"98","endLine":5,"endColumn":18},{"ruleId":"95","severity":1,"message":"99","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":14},{"ruleId":"95","severity":1,"message":"106","line":6,"column":17,"nodeType":"97","messageId":"98","endLine":6,"endColumn":27},{"ruleId":"95","severity":1,"message":"107","line":7,"column":25,"nodeType":"97","messageId":"98","endLine":7,"endColumn":29},{"ruleId":"95","severity":1,"message":"108","line":7,"column":77,"nodeType":"97","messageId":"98","endLine":7,"endColumn":96},{"ruleId":"95","severity":1,"message":"96","line":5,"column":14,"nodeType":"97","messageId":"98","endLine":5,"endColumn":18},{"ruleId":"95","severity":1,"message":"99","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":14},{"ruleId":"95","severity":1,"message":"109","line":80,"column":15,"nodeType":"97","messageId":"98","endLine":80,"endColumn":31},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"array-callback-return","Array.prototype.sort() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'moment' is defined but never used.","'GridToolbarContainer' is defined but never used.","'GridToolbarExport' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'RouterLink' is defined but never used.","'Cell' is defined but never used.","'ResponsiveContainer' is defined but never used.","'planningPeriodId' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]