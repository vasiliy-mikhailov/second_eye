[{"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\index.js":"1","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\App.js":"2","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\reportWebVitals.js":"3","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodDetail.js":"4","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemChangeRequestDetail.js":"5","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ChangeRequestDetail.js":"6","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodDetail.js":"7","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodDetail.js":"8","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\CapacityAndQueue.js":"9","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\utils.js":"10","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDatePeriodChart.js":"11","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDateIssueChart.js":"12","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ValueByDatePeriodChart.js":"13","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemPlanningPeriodDetail.js":"14","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodSystemDetail.js":"15","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodSystemDetail.js":"16","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\EpicDetail.js":"17","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\EpicSystemDetail.js":"18","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamDetail.js":"19","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamDetail.js":"20","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PersonList.js":"21","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodPersonsList.js":"22","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodPersonDetail.js":"23","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodProjectTeamsList.js":"24","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamList.js":"25","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ReengineeringByDatePeriodChart.js":"26","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PersonDetail.js":"27","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\CompanyDetail.js":"28","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\QuarterDetail.js":"29","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamQuarterDetail.js":"30","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamQuarterDetail.js":"31","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PersonSystemChangeRequestDetail.js":"32","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\QuarterProjectTeamList.js":"33","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemList.js":"34","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemDetail.js":"35","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectManagerList.js":"36","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectManagerDetail.js":"37","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PersonListByProjectTeamIdAndMonth.js":"38","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PersonMonthDetailByPersonKeyAndMonth.js":"39"},{"size":7839,"mtime":1666285440470,"results":"40","hashOfConfig":"41"},{"size":135,"mtime":1629779914551,"results":"42","hashOfConfig":"41"},{"size":375,"mtime":1629779914557,"results":"43","hashOfConfig":"41"},{"size":12959,"mtime":1665651211933,"results":"44","hashOfConfig":"41"},{"size":7327,"mtime":1665651211998,"results":"45","hashOfConfig":"41"},{"size":14235,"mtime":1665651211884,"results":"46","hashOfConfig":"41"},{"size":21414,"mtime":1665767732833,"results":"47","hashOfConfig":"41"},{"size":17826,"mtime":1665651211959,"results":"48","hashOfConfig":"41"},{"size":8572,"mtime":1665570849123,"results":"49","hashOfConfig":"41"},{"size":452,"mtime":1629988539883,"results":"50","hashOfConfig":"41"},{"size":3892,"mtime":1659507936646,"results":"51","hashOfConfig":"41"},{"size":4136,"mtime":1659507936657,"results":"52","hashOfConfig":"41"},{"size":3052,"mtime":1653559149721,"results":"53","hashOfConfig":"41"},{"size":11254,"mtime":1665651211941,"results":"54","hashOfConfig":"41"},{"size":8375,"mtime":1659508162829,"results":"55","hashOfConfig":"41"},{"size":8018,"mtime":1665651211947,"results":"56","hashOfConfig":"41"},{"size":16347,"mtime":1665651211909,"results":"57","hashOfConfig":"41"},{"size":7427,"mtime":1665651211986,"results":"58","hashOfConfig":"41"},{"size":13354,"mtime":1666326077439,"results":"59","hashOfConfig":"41"},{"size":19519,"mtime":1666326149455,"results":"60","hashOfConfig":"41"},{"size":3710,"mtime":1643642534121,"results":"61","hashOfConfig":"41"},{"size":3175,"mtime":1659449726432,"results":"62","hashOfConfig":"41"},{"size":6115,"mtime":1659449814921,"results":"63","hashOfConfig":"41"},{"size":4419,"mtime":1652459975970,"results":"64","hashOfConfig":"41"},{"size":4658,"mtime":1666166074101,"results":"65","hashOfConfig":"41"},{"size":2948,"mtime":1652459219256,"results":"66","hashOfConfig":"41"},{"size":18525,"mtime":1666337080560,"results":"67","hashOfConfig":"41"},{"size":16533,"mtime":1666325971109,"results":"68","hashOfConfig":"41"},{"size":19908,"mtime":1665651211979,"results":"69","hashOfConfig":"41"},{"size":19857,"mtime":1665651212006,"results":"70","hashOfConfig":"41"},{"size":23894,"mtime":1665651211968,"results":"71","hashOfConfig":"41"},{"size":2904,"mtime":1659459444355,"results":"72","hashOfConfig":"41"},{"size":6064,"mtime":1659473819829,"results":"73","hashOfConfig":"41"},{"size":2738,"mtime":1658765522892,"results":"74","hashOfConfig":"41"},{"size":5409,"mtime":1659448963990,"results":"75","hashOfConfig":"41"},{"size":6357,"mtime":1665942513141,"results":"76","hashOfConfig":"41"},{"size":8711,"mtime":1665946044362,"results":"77","hashOfConfig":"41"},{"size":5640,"mtime":1666285767728,"results":"78","hashOfConfig":"41"},{"size":18254,"mtime":1666337080560,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"gnqo0z",{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"82"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"82"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"82"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"82"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"82"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"82"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"82"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"82"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"82"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"82"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\index.js",[],["190","191"],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\App.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\reportWebVitals.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodDetail.js",["192"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\r\n\r\nconst fetchPlanningPeriodById = gql`\r\n    query PlanningPeriodByIdQuery($id: Int!) {\r\n        planningPeriodById(id: $id) {\r\n            id \r\n            name\r\n            start\r\n            end\r\n            estimate\r\n            effortPerFunctionPoint\r\n            calculatedFinishDate\r\n            \r\n            dedicatedTeamPlanningPeriods {\r\n                id\r\n                estimate\r\n                timeLeft\r\n                dedicatedTeam {\r\n                    id\r\n                    name\r\n                }\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n                newFunctionsTimeSpentPrevious28Days\r\n                timeSpentForReengineeringPercent\r\n            }\r\n            \r\n            systemPlanningPeriods {\r\n                id\r\n                estimate\r\n                timeLeft\r\n                system {\r\n                    id\r\n                    name\r\n                }\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n            }\r\n    \r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n                timeSpentCumsumPrediction\r\n                timeSpentWithoutValuePercentCumsum\r\n                timeSpentWithValuePercentCumsum\r\n                timeSpentForReengineeringPercentCumsum\r\n                timeSpentNotForReengineeringPercentCumsum\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass PlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriodId = this.props.match.params.id\r\n        const planningPeriod = this.props.data.planningPeriodById\r\n        const estimate = planningPeriod.estimate\r\n        const effortPerFunctionPoint = planningPeriod.effortPerFunctionPoint\r\n        const calculatedFinishDate = planningPeriod.calculatedFinishDate\r\n        const planningPeriodStart = planningPeriod.start\r\n        const planningPeriodEnd = planningPeriod.end\r\n\r\n        const dedicatedTeamPlanningPeriods = planningPeriod.dedicatedTeamPlanningPeriods\r\n        const systemPlanningPeriods = planningPeriod.systemPlanningPeriods\r\n\r\n        const timeSheetsByDate = planningPeriod.timeSheetsByDate\r\n\r\n        const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\r\n        const xAxisStart = new Date(planningPeriodStart).getTime() - fourWeeks\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime() + fourWeeks\r\n\r\n        const dedicatedTeamsTableContents = dedicatedTeamPlanningPeriods.slice()\r\n            .sort((a, b) => ((a.dedicatedTeam.name > b.dedicatedTeam.name) ? 1 : ((a.dedicatedTeam.name < b.dedicatedTeam.name) ? -1 : 0)))\r\n            .map(dedicatedTeamPlanningPeriod => (\r\n                    {\r\n                        id: dedicatedTeamPlanningPeriod.id,\r\n                        estimate: dedicatedTeamPlanningPeriod.estimate,\r\n                        timeLeft: dedicatedTeamPlanningPeriod.timeLeft,\r\n                        dedicatedTeamId: dedicatedTeamPlanningPeriod.dedicatedTeam.id,\r\n                        dedicatedTeamName: dedicatedTeamPlanningPeriod.dedicatedTeam.name,\r\n                        effortPerFunctionPoint: dedicatedTeamPlanningPeriod.effortPerFunctionPoint,\r\n                        calculatedFinishDate: dedicatedTeamPlanningPeriod.calculatedFinishDate,\r\n                        newFunctionsTimeSpentPrevious28Days: dedicatedTeamPlanningPeriod.newFunctionsTimeSpentPrevious28Days,\r\n                        timeSpentForReengineeringPercent: dedicatedTeamPlanningPeriod.timeSpentForReengineeringPercent,\r\n                    }\r\n            ))\r\n\r\n        const dedicatedTeamsTableColumns = [\r\n            {\r\n                field: 'dedicatedTeamName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/dedicatedTeams/${ params.getValue(params.id, 'dedicatedTeamId') }` }>\r\n                        { params.getValue(params.id, 'dedicatedTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpentPrevious28Days',\r\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'timeSpentForReengineeringPercent',\r\n                headerName: 'Затраты на технологическое перевооружение и исправление проблем (%)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }) ,\r\n            },\r\n\r\n        ];\r\n\r\n        const systemsTableContents = systemPlanningPeriods.slice()\r\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\r\n            .map(systemPlanningPeriod => (\r\n                    {\r\n                        id: systemPlanningPeriod.id,\r\n                        estimate: systemPlanningPeriod.estimate,\r\n                        timeLeft: systemPlanningPeriod.timeLeft,\r\n                        systemId: systemPlanningPeriod.system.id,\r\n                        systemName: systemPlanningPeriod.system.name,\r\n                        effortPerFunctionPoint: systemPlanningPeriod.effortPerFunctionPoint,\r\n                        calculatedFinishDate: systemPlanningPeriod.calculatedFinishDate\r\n                    }\r\n            ))\r\n\r\n        const systemsTableColumns = [\r\n            {\r\n                field: 'systemName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/systems/${ params.getValue(params.id, 'systemId') }` }>\r\n                        { params.getValue(params.id, 'systemName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <ValueByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <ReengineeringByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"body1\">\r\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/projectTeams` }>\r\n                        Затраты на функциональные точки по проектным командам\r\n                    </RouterLink>\r\n                </Typography>\r\n                <br />\r\n\r\n                <Typography variant=\"body1\">\r\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/persons` }>\r\n                        Затраты на функциональную точку по сотрудникам\r\n                    </RouterLink>\r\n                </Typography>\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Выделенные команды\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ dedicatedTeamsTableContents }\r\n                        columns={ dedicatedTeamsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemsTableContents }\r\n                        columns={ systemsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPlanningPeriodById, {\r\n    options: (props) => { return { variables: { id: props.match.params.id }}}\r\n})(PlanningPeriodDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemChangeRequestDetail.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ChangeRequestDetail.js",["193"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport {graphql} from '@apollo/client/react/hoc';\r\nimport moment from 'moment';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Link as RouterLink, NavLink} from \"react-router-dom\"\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\r\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchChangeRequest = gql`\r\n    query ChangeRequestByKeyQuery($key: String!) {\r\n        changeRequestByKey(key: $key) {\r\n            id \r\n            key\r\n            url\r\n            name\r\n            state {\r\n                name\r\n            }\r\n            \r\n            analysisEstimate\r\n            analysisTimeSpent\r\n            analysisTimeLeft\r\n            analysisTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            developmentEstimate\r\n            developmentTimeSpent\r\n            developmentTimeLeft\r\n            developmentTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            testingEstimate\r\n            testingTimeSpent\r\n            testingTimeLeft\r\n            testingTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            estimate\r\n            effortPerFunctionPoint\r\n            timeSpent\r\n            timeLeft\r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n                timeSpentCumsumPrediction\r\n            }\r\n            \r\n            plannedInstallDate\r\n            \r\n            calculatedFinishDate\r\n            \r\n            systemChangeRequests {\r\n                id\r\n                key\r\n                name\r\n                \r\n                estimate\r\n                effortPerFunctionPoint\r\n                \r\n                timeLeft\r\n                state {\r\n                    name\r\n                }\r\n                stateCategory {\r\n                    id\r\n                }\r\n                \r\n                calculatedFinishDate\r\n                \r\n                mainDeveloper {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            \r\n            persons {\r\n                person {\r\n                    id\r\n                    name\r\n                }\r\n                newFunctionsTimeSpent\r\n                newFunctionsFullTimeEquivalentPrevious28Days\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass ChangeRequestDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const changeRequest = this.props.data.changeRequestByKey\r\n\r\n        const plannedInstallDate = changeRequest.plannedInstallDate ? new Date(changeRequest.plannedInstallDate).getTime() : null\r\n        const timeSheetsByDate = changeRequest.timeSheetsByDate\r\n\r\n        const estimate = changeRequest.estimate\r\n        const effortPerFunctionPoint = changeRequest.effortPerFunctionPoint\r\n\r\n        const analysisTimeSheetsByDate = changeRequest.analysisTimeSheetsByDate\r\n        const analysisEstimate = changeRequest.analysisEstimate\r\n\r\n        const developmentTimeSheetsByDate = changeRequest.developmentTimeSheetsByDate\r\n        const developmentEstimate = changeRequest.developmentEstimate\r\n\r\n        const testingTimeSheetsByDate = changeRequest.testingTimeSheetsByDate\r\n        const testingEstimate = changeRequest.testingEstimate\r\n\r\n        const calculatedFinishDate = changeRequest.calculatedFinishDate\r\n\r\n        const systemChangeRequests = changeRequest.systemChangeRequests\r\n        const persons = changeRequest.persons\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today]\r\n        if (plannedInstallDate) {\r\n            allEdgeDates.push(plannedInstallDate)\r\n        }\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        if (calculatedFinishDate) {\r\n            allEdgeDates.push(new Date(calculatedFinishDate).getTime())\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\r\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\r\n\r\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(systemChangeRequest => (\r\n                    {\r\n                        id: systemChangeRequest.id,\r\n                        key: systemChangeRequest.key,\r\n                        name: systemChangeRequest.name,\r\n                        hasValue: systemChangeRequest.hasValue,\r\n                        estimate: systemChangeRequest.estimate,\r\n                        timeLeft: systemChangeRequest.timeLeft,\r\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint,\r\n                        calculatedFinishDate: systemChangeRequest.calculatedFinishDate,\r\n                        mainDeveloperName: systemChangeRequest.mainDeveloper.name,\r\n                    }\r\n            ))\r\n\r\n        const systemChangeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'mainDeveloperName',\r\n                headerName: 'Основной разработчик',\r\n                width: 200,\r\n                align: 'left',\r\n            },\r\n        ];\r\n\r\n        const personsTableContents = persons.slice()\r\n            .sort((a, b) =>  (\r\n                (a.newFunctionsFullTimeEquivalentPrevious28Days > b.newFunctionsFullTimeEquivalentPrevious28Days) ? -1 : (\r\n                    (a.newFunctionsFullTimeEquivalentPrevious28Days == b.newFunctionsFullTimeEquivalentPrevious28Days) ? 0 : 1\r\n                )\r\n            ))\r\n            .map(person => (\r\n                    {\r\n                        id: person.person.id,\r\n                        name: person.person.name,\r\n                        newFunctionsTimeSpent: person.newFunctionsTimeSpent,\r\n                        newFunctionsFullTimeEquivalentPrevious28Days: person.newFunctionsFullTimeEquivalentPrevious28Days\r\n                    }\r\n            ))\r\n\r\n            const personsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Имя',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpent',\r\n                headerName: 'Новый функционал: списано всего (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\r\n                headerName: 'Новый функционал: фактический FTE за 28 дней',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body1\" noWrap>\r\n                    <NavLink to={ this.props.location.pathname }>\r\n                        { changeRequest.key }\r\n                    </NavLink> &nbsp;\r\n                    { changeRequest.name } &nbsp;\r\n                    { changeRequest.state.name } &nbsp;\r\n                    <Link href={ changeRequest.url } target=\"_blank\">\r\n                        [ источник ]\r\n                    </Link>\r\n                    <br />\r\n                    Осталось { changeRequest.timeLeft.toFixed(1) } ч ( { (changeRequest.timeLeft / changeRequest.estimate * 100).toFixed(2) }% ) <br />\r\n                    Сделано { changeRequest.timeSpent.toFixed(1) } ч <br />\r\n                    Оценка { changeRequest.estimate.toFixed(1) } ч <br />\r\n                    Плановая дата установки { plannedInstallDate ? moment(plannedInstallDate).format(\"YYYY-MM-DD\") : \"не указана\"} <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка <br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                </Typography>\r\n                <br />\r\n\r\n                <TimeSheetsByDateIssueChart\r\n                    plannedInstallDate={ plannedInstallDate }\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <TimeSheetsByDateIssueChart\r\n                    plannedInstallDate={ plannedInstallDate }\r\n                    title=\"Аналитика\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"red\"\r\n                    timeSheetsByDate={ analysisTimeSheetsByDate }\r\n                    estimate={ analysisEstimate }\r\n                />\r\n\r\n                <TimeSheetsByDateIssueChart\r\n                    plannedInstallDate={ plannedInstallDate }\r\n                    title=\"Разработка\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"green\"\r\n                    timeSheetsByDate={ developmentTimeSheetsByDate }\r\n                    estimate={ developmentEstimate }\r\n                />\r\n\r\n                <TimeSheetsByDateIssueChart\r\n                    plannedInstallDate={ plannedInstallDate }\r\n                    title=\"Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"blue\"\r\n                    timeSheetsByDate={ testingTimeSheetsByDate }\r\n                    estimate={ testingEstimate }\r\n                />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Доработки систем\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemChangeRequestsTableContents }\r\n                        columns={ systemChangeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Команда\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ personsTableContents }\r\n                        columns={ personsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchChangeRequest, {\r\n    options: (props) => { return { variables: { key: props.match.params.key }}}\r\n})(ChangeRequestDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodDetail.js",["194","195"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId = gql`\r\n        query DedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId($planningPeriodId: Int!, $dedicatedTeamId: Int!) {\r\n              dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId(dedicatedTeamId: $dedicatedTeamId, planningPeriodId: $planningPeriodId) {\r\n                    id\r\n                    estimate\r\n                    effortPerFunctionPoint\r\n                    calculatedFinishDate\r\n                    dedicatedTeam {\r\n                        name\r\n                        cio {\r\n                            name\r\n                        }\r\n                        cto {\r\n                            name\r\n                        }\r\n                    }\r\n                    planningPeriod {\r\n                        name\r\n                        start\r\n                        end\r\n                    }\r\n                    timeSheetsByDate {\r\n                        date\r\n                        timeSpentCumsum\r\n                        timeSpentCumsumPrediction\r\n                        timeSpentWithoutValuePercentCumsum\r\n                        timeSpentWithValuePercentCumsum\r\n                        timeSpentForReengineeringPercentCumsum\r\n                        timeSpentNotForReengineeringPercentCumsum\r\n                    }\r\n                    \r\n                    projectTeamPlanningPeriods {\r\n                        id\r\n                        estimate\r\n                        timeLeft\r\n                        projectTeam {\r\n                            id\r\n                            name\r\n                        }\r\n                        effortPerFunctionPoint\r\n                        calculatedFinishDate\r\n                        timeSpentChronon\r\n                    }\r\n                    \r\n                    dedicatedTeamPlanningPeriodSystems {\r\n                        id\r\n                        estimate\r\n                        timeLeft\r\n                        system {\r\n                            id\r\n                            name\r\n                        }\r\n                        effortPerFunctionPoint\r\n                        calculatedFinishDate\r\n                    }\r\n                    \r\n                    changeRequests {\r\n                        id\r\n                        key\r\n                        estimate\r\n                        timeLeft\r\n                        hasValue\r\n                        name\r\n                        stateCategoryId\r\n                        effortPerFunctionPoint\r\n                        calculatedFinishDate\r\n                        timeSpentChronon\r\n                    }\r\n                    \r\n                    positions {\r\n                        position {\r\n                            id\r\n                            name\r\n                            url\r\n                        }\r\n                        \r\n                        person {\r\n                            id\r\n                            key\r\n                            name\r\n                        }\r\n                        timeSpent\r\n                        timeSpentChrononFte\r\n                        totalCapacityFte\r\n                    }\r\n              }\r\n        }\r\n`;\r\n\r\nclass DedicatedTeamPlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n        const dedicatedTeamId = this.props.match.params.dedicatedTeamId\r\n\r\n        const dedicatedTeamPlanningPeriod = this.props.data.dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId\r\n\r\n        const dedicatedTeamName = dedicatedTeamPlanningPeriod.dedicatedTeam.name\r\n        const cioName = dedicatedTeamPlanningPeriod.dedicatedTeam.cio.name\r\n        const ctoName = dedicatedTeamPlanningPeriod.dedicatedTeam.cto.name\r\n        const estimate = dedicatedTeamPlanningPeriod.estimate\r\n        const effortPerFunctionPoint = dedicatedTeamPlanningPeriod.effortPerFunctionPoint\r\n        const calculatedFinishDate = dedicatedTeamPlanningPeriod.calculatedFinishDate\r\n        const planningPeriodName = dedicatedTeamPlanningPeriod.planningPeriod.name\r\n        const planningPeriodStart = dedicatedTeamPlanningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = dedicatedTeamPlanningPeriod.planningPeriod.end\r\n        const projectTeamPlanningPeriods = dedicatedTeamPlanningPeriod.projectTeamPlanningPeriods\r\n        const dedicatedTeamPlanningPeriodSystems = dedicatedTeamPlanningPeriod.dedicatedTeamPlanningPeriodSystems\r\n        const changeRequests = dedicatedTeamPlanningPeriod.changeRequests\r\n        const positions = dedicatedTeamPlanningPeriod.positions\r\n\r\n        const timeSheetsByDate = dedicatedTeamPlanningPeriod.timeSheetsByDate\r\n\r\n        const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\r\n        const xAxisStart = new Date(planningPeriodStart).getTime() - fourWeeks\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime() + fourWeeks\r\n\r\n        const systemsTableContents = dedicatedTeamPlanningPeriodSystems.slice()\r\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\r\n            .map(dedicatedTeamPlanningPeriodSystem => (\r\n                    {\r\n                        id: dedicatedTeamPlanningPeriodSystem.id,\r\n                        estimate: dedicatedTeamPlanningPeriodSystem.estimate,\r\n                        timeLeft: dedicatedTeamPlanningPeriodSystem.timeLeft,\r\n                        systemId: dedicatedTeamPlanningPeriodSystem.system.id,\r\n                        systemName: dedicatedTeamPlanningPeriodSystem.system.name,\r\n                        effortPerFunctionPoint: dedicatedTeamPlanningPeriodSystem.effortPerFunctionPoint,\r\n                        calculatedFinishDate: dedicatedTeamPlanningPeriodSystem.calculatedFinishDate,\r\n                    }\r\n            ))\r\n\r\n        const systemsTableColumns = [\r\n            {\r\n                field: 'systemName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/dedicatedTeams/${ dedicatedTeamId }/systems/${ params.getValue(params.id, 'systemId') }` }>\r\n                        { params.getValue(params.id, 'systemName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        const projectTeamsTableContents = projectTeamPlanningPeriods.slice()\r\n            .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\r\n            .map(projectTeamPlanningPeriod => (\r\n                    {\r\n                        id: projectTeamPlanningPeriod.id,\r\n                        estimate: projectTeamPlanningPeriod.estimate,\r\n                        timeLeft: projectTeamPlanningPeriod.timeLeft,\r\n                        projectTeamId: projectTeamPlanningPeriod.projectTeam.id,\r\n                        projectTeamName: projectTeamPlanningPeriod.projectTeam.name,\r\n                        effortPerFunctionPoint: projectTeamPlanningPeriod.effortPerFunctionPoint,\r\n                        calculatedFinishDate: projectTeamPlanningPeriod.calculatedFinishDate,\r\n                        timeSpentChronon: projectTeamPlanningPeriod.timeSpentChronon\r\n                    }\r\n            ))\r\n\r\n        const projectTeamsTableColumns = [\r\n            {\r\n                field: 'projectTeamName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\r\n                        { params.getValue(params.id, 'projectTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'timeSpentChronon',\r\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        const changeRequestsTableContents = changeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(changeRequest => (\r\n                    {\r\n                        id: changeRequest.id,\r\n                        key: changeRequest.key,\r\n                        name: changeRequest.name,\r\n                        hasValue: changeRequest.hasValue,\r\n                        estimate: changeRequest.estimate,\r\n                        timeLeft: changeRequest.timeLeft,\r\n                        stateCategoryId: changeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\r\n                        calculatedFinishDate: changeRequest.calculatedFinishDate,\r\n                        timeSpentChronon: changeRequest.timeSpentChronon\r\n                    }\r\n            ))\r\n\r\n        const changeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'timeSpentChronon',\r\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        const positionsTableContents = positions.slice()\r\n            .sort((a, b) =>  (\r\n                (a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : (\r\n                    (a.timeSpentChrononFte == b.timeSpentChrononFte) ? 0 : 1\r\n                )\r\n            ))\r\n            .map(position => (\r\n                    {\r\n                        id: position.person.id,\r\n                        key: position.person.key,\r\n                        name: position.person.name,\r\n                        position: position.position.name,\r\n                        timeSpent: position.timeSpent,\r\n                        timeSpentChrononFte: position.timeSpentChrononFte,\r\n                        totalCapacityFte: position.totalCapacityFte\r\n                    }\r\n            ))\r\n\r\n        const positionsTableColumns = [\r\n            {\r\n                field: 'position',\r\n                headerName: 'Позиция',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'name',\r\n                headerName: 'Имя',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'timeSpent',\r\n                headerName: 'Списано всего (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'totalCapacityFte',\r\n                headerName: 'Плановый FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\r\n            },\r\n            {\r\n                field: 'timeSpentChrononFte',\r\n                headerName: 'Фактический FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Выделенная команда { dedicatedTeamName }\r\n                    <br />\r\n                    Бизнес-партнер { cioName }\r\n                    <br />\r\n                    Руководитель разработки (CTO) { ctoName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                    <br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Фактический объем работ:Аналитика + Разработка + Тестирование + Управление + Инциденты\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <ValueByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <ReengineeringByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Проектные команды\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ projectTeamsTableContents }\r\n                        columns={ projectTeamsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemsTableContents }\r\n                        columns={ systemsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку ПО\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ changeRequestsTableContents }\r\n                        columns={ changeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Команда\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ positionsTableContents }\r\n                        columns={ positionsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId, {\r\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, dedicatedTeamId: props.match.params.dedicatedTeamId }}}\r\n})(DedicatedTeamPlanningPeriodDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodDetail.js",["196"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId = gql`\r\n    query ProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId($planningPeriodId: Int!, $projectTeamId: Int!) {\r\n          projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId(projectTeamId: $projectTeamId, planningPeriodId: $planningPeriodId) {\r\n                id\r\n                estimate\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n                \r\n                projectTeam {\r\n                    name\r\n                }\r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                    timeSpentWithoutValuePercentCumsum\r\n                    timeSpentWithValuePercentCumsum\r\n                    timeSpentForReengineeringPercentCumsum\r\n                    timeSpentNotForReengineeringPercentCumsum\r\n                }\r\n                \r\n                projectTeamPlanningPeriodSystems {\r\n                  id\r\n                  estimate\r\n                  timeLeft\r\n                  system {\r\n                    id\r\n                    name\r\n                  }\r\n                  effortPerFunctionPoint\r\n                  calculatedFinishDate\r\n                }\r\n                \r\n                changeRequests {\r\n                    id\r\n                    key\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategoryId\r\n                    effortPerFunctionPoint\r\n                    calculatedFinishDate\r\n                    newFunctionsTimeSpentPrevious28Days\r\n                }\r\n                \r\n                positions {\r\n                    id\r\n                    position {\r\n                        id\r\n                        url\r\n                        name\r\n                    }\r\n                    person {\r\n                        id\r\n                        key\r\n                        name\r\n                    }\r\n                    newFunctionsTimeSpent\r\n                    newFunctionsFullTimeEquivalentPrevious28Days\r\n                    newFunctionsFullTimeEquivalentCapacity\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass ProjectTeamPlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n        const projectTeamId = this.props.match.params.projectTeamId\r\n        const projectTeamPlanningPeriod = this.props.data.projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId\r\n        const projectTeamName = projectTeamPlanningPeriod.projectTeam.name\r\n        const estimate = projectTeamPlanningPeriod.estimate\r\n        const effortPerFunctionPoint = projectTeamPlanningPeriod.effortPerFunctionPoint\r\n        const calculatedFinishDate = projectTeamPlanningPeriod.calculatedFinishDate\r\n        const planningPeriodName = projectTeamPlanningPeriod.planningPeriod.name\r\n        const planningPeriodStart = projectTeamPlanningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = projectTeamPlanningPeriod.planningPeriod.end\r\n        const projectTeamPlanningPeriodSystems = projectTeamPlanningPeriod.projectTeamPlanningPeriodSystems\r\n        const changeRequests = projectTeamPlanningPeriod.changeRequests\r\n        const positions = projectTeamPlanningPeriod.positions\r\n\r\n        const timeSheetsByDate = projectTeamPlanningPeriod.timeSheetsByDate\r\n\r\n        const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\r\n        const xAxisStart = new Date(planningPeriodStart).getTime() - fourWeeks\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime() + fourWeeks\r\n\r\n        const systemsTableContents = projectTeamPlanningPeriodSystems.slice()\r\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\r\n            .map(projectTeamPlanningPeriodSystem => (\r\n                    {\r\n                        id: projectTeamPlanningPeriodSystem.id,\r\n                        estimate: projectTeamPlanningPeriodSystem.estimate,\r\n                        timeLeft: projectTeamPlanningPeriodSystem.timeLeft,\r\n                        systemId: projectTeamPlanningPeriodSystem.system.id,\r\n                        systemName: projectTeamPlanningPeriodSystem.system.name,\r\n                        effortPerFunctionPoint: projectTeamPlanningPeriodSystem.effortPerFunctionPoint,\r\n                        calculatedFinishDate: projectTeamPlanningPeriodSystem.calculatedFinishDate\r\n                    }\r\n            ))\r\n\r\n        const systemsTableColumns = [\r\n            {\r\n                field: 'systemName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/projectTeams/${ projectTeamId }/systems/${ params.getValue(params.id, 'systemId') }` }>\r\n                        { params.getValue(params.id, 'systemName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        const changeRequestsTableContents = changeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(changeRequest => (\r\n                    {\r\n                        id: changeRequest.id,\r\n                        key: changeRequest.key,\r\n                        name: changeRequest.name,\r\n                        hasValue: changeRequest.hasValue,\r\n                        estimate: changeRequest.estimate,\r\n                        timeLeft: changeRequest.timeLeft,\r\n                        stateCategoryId: changeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\r\n                        calculatedFinishDate: changeRequest.calculatedFinishDate,\r\n                        newFunctionsTimeSpentPrevious28Days: changeRequest.newFunctionsTimeSpentPrevious28Days\r\n                    }\r\n            ))\r\n\r\n        const changeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpentPrevious28Days',\r\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        const positionsTableContents = positions.slice()\r\n            .sort((a, b) =>  (\r\n                (a.newFunctionsFullTimeEquivalentPrevious28Days > b.newFunctionsFullTimeEquivalentPrevious28Days) ? -1 : (\r\n                    (a.newFunctionsFullTimeEquivalentPrevious28Days == b.newFunctionsFullTimeEquivalentPrevious28Days) ? 0 : 1\r\n                )\r\n            ))\r\n            .map(position => (\r\n                    {\r\n                        id: position.id,\r\n                        url: position.position.url,\r\n                        position: position.position.name,\r\n                        personId: position.person.id,\r\n                        personKey: position.person.key,\r\n                        personName: position.person.name,\r\n                        newFunctionsTimeSpent: position.newFunctionsTimeSpent,\r\n                        newFunctionsFullTimeEquivalentPrevious28Days: position.newFunctionsFullTimeEquivalentPrevious28Days,\r\n                        newFunctionsFullTimeEquivalentCapacity: position.newFunctionsFullTimeEquivalentCapacity\r\n                    }\r\n            ))\r\n\r\n        const positionsTableColumns = [\r\n            {\r\n                field: 'position',\r\n                headerName: 'Позиция',\r\n                flex: 1,\r\n                renderCell: (params) => {\r\n                    const url = params.getValue(params.id, 'url')\r\n\r\n                    return url ?\r\n                        <Link href={ url } target=\"_blank\">\r\n                            { params.getValue(params.id, 'position') }\r\n                        </Link>\r\n                    : params.getValue(params.id, 'position')\r\n                },\r\n            },\r\n            {\r\n                field: 'personName',\r\n                headerName: 'ФИО',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/persons/${ params.getValue(params.id, 'personKey') }` }>\r\n                        { params.getValue(params.id, 'personName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpent',\r\n                headerName: 'Новый функционал: списано всего (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'newFunctionsFullTimeEquivalentCapacity',\r\n                headerName: 'Новый функционал: плановый FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\r\n            },\r\n            {\r\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\r\n                headerName: 'Новый функционал: фактический FTE за 28 дней',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Проектная команда { projectTeamName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                    <br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <ValueByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <ReengineeringByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemsTableContents }\r\n                        columns={ systemsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n               <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку ПО\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ changeRequestsTableContents }\r\n                        columns={ changeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Команда\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ positionsTableContents }\r\n                        columns={ positionsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId, {\r\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, projectTeamId: props.match.params.projectTeamId }}}\r\n})(ProjectTeamPlanningPeriodDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\CapacityAndQueue.js",["197","198","199"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box} from \"@material-ui/core\";\r\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { DataGridPro, GridToolbarContainer, GridToolbarExport, } from '@mui/x-data-grid-pro';\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\nconst fetchCapacityAndQueue = gql`\r\n    query capacityAndQueue {\r\n        companies {\r\n            id\r\n            name         \r\n            queueLength\r\n        }\r\n        \r\n        dedicatedTeams {\r\n            id\r\n            name\r\n            queueLength\r\n        }\r\n        \r\n        projectTeams {\r\n            id\r\n            name\r\n            queueLength\r\n            \r\n            dedicatedTeam {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nfunction ToolBarWithExport() {\r\n  return (\r\n    <GridToolbarContainer>\r\n        <GridToolbarExport\r\n          csvOptions={{\r\n              delimiter: \";\",\r\n              utf8WithBom: true,\r\n          }}\r\n        />\r\n\r\n\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nclass CapacityAndQueue extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const companies = this.props.data.companies\r\n        const dedicatedTeams = this.props.data.dedicatedTeams\r\n        const projectTeams = this.props.data.projectTeams\r\n\r\n        const companiesQueue = companies.slice().map(\r\n            company => {\r\n                return {\r\n                    id: company.id,\r\n                    name: company.name,\r\n                    queueLength: Math.round(company.queueLength),\r\n                }\r\n            }\r\n        )\r\n\r\n        const dedicatedTeamsQueue = dedicatedTeams.slice().map(\r\n            dedicatedTeam => {\r\n                return {\r\n                    id: dedicatedTeam.id,\r\n                    name: dedicatedTeam.name,\r\n                    queueLength: Math.round(dedicatedTeam.queueLength),\r\n                }\r\n            }\r\n        )\r\n\r\n        const projectTeamsQueue = projectTeams.slice().map(\r\n            projectTeam => {\r\n                return {\r\n                    id: projectTeam.id,\r\n                    name: projectTeam.name + \" : \" + projectTeam.dedicatedTeam.name,\r\n                    queueLength: Math.round(projectTeam.queueLength),\r\n                }\r\n            }\r\n        )\r\n\r\n        const top10ProjectTeams = projectTeamsQueue.sort(\r\n            function(a, b) {\r\n                return b.queueLength - a.queueLength\r\n            }\r\n        ).slice(0, 9)\r\n\r\n        const top20To50ProjectTeams = projectTeamsQueue.sort(\r\n            function(a, b) {\r\n                return b.queueLength - a.queueLength\r\n            }\r\n        ).slice(10)\r\n\r\n        const topDedicatedTeams = dedicatedTeamsQueue.sort(\r\n                        function(a, b) {\r\n                return b.queueLength - a.queueLength\r\n            }\r\n        )\r\n\r\n        const topDedicatedTeamsColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/dedicatedTeams/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'queueLength',\r\n                headerName: 'Очередь (мес)',\r\n                flex: 1,\r\n            },\r\n        ];\r\n\r\n        const topProjectTeams = projectTeamsQueue.sort(\r\n                        function(a, b) {\r\n                return b.queueLength - a.queueLength\r\n            }\r\n        )\r\n\r\n        const topProjectTeamsColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'queueLength',\r\n                headerName: 'Очередь (мес)',\r\n                flex: 1,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body1\">\r\n                    Выделенные команды (месяцы)\r\n                </Typography>\r\n                <BarChart\r\n                    width={1600}\r\n                    height={800}\r\n                    data={topDedicatedTeams}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 30,\r\n                        bottom: 400,\r\n                    }}\r\n                    barCategoryGap=\"10%\"\r\n                    barGap=\"0%\"\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\r\n                    <YAxis domain={['auto', 'auto']} />\r\n                    <Tooltip />\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n                    <Bar dataKey=\"queueLength\" name={\"Очередь (мес)\"} />\r\n                </BarChart>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={topDedicatedTeams}\r\n                        columns={topDedicatedTeamsColumns}\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <Typography variant=\"body1\">\r\n                    Top-10 проектных команд (месяцы)\r\n                </Typography>\r\n                <BarChart\r\n                    width={1600}\r\n                    height={800}\r\n                    data={top10ProjectTeams}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 30,\r\n                        bottom: 400,\r\n                    }}\r\n                    barCategoryGap=\"10%\"\r\n                    barGap=\"0%\"\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\r\n                    <YAxis domain={['auto', 'auto']} />\r\n                    <Tooltip />\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n                    <Bar dataKey=\"queueLength\" name={\"Очередь (мес)\"} />\r\n                </BarChart>\r\n\r\n                <Typography variant=\"body1\">\r\n                    Остальные проектные команды (месяцы)\r\n                </Typography>\r\n                <BarChart\r\n                    width={1600}\r\n                    height={800}\r\n                    data={top20To50ProjectTeams}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 30,\r\n                        bottom: 400,\r\n                    }}\r\n                    barCategoryGap=\"10%\"\r\n                    barGap=\"0%\"\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\r\n                    <YAxis domain={['auto', 'auto']} />\r\n                    <Tooltip />\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n                    <Bar dataKey=\"queueLength\" name={\"Очередь (мес)\"} />\r\n                </BarChart>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={topProjectTeams}\r\n                        columns={topProjectTeamsColumns}\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchCapacityAndQueue)(CapacityAndQueue);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\utils.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDatePeriodChart.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDateIssueChart.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ValueByDatePeriodChart.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemPlanningPeriodDetail.js",["200","201"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchSystemPlanningPeriodByPlanningPeriodIdAndSystemId = gql`\r\n    query SystemPlanningPeriodByPlanningPeriodIdAndSystemId($planningPeriodId: Int!, $systemId: Int!) {\r\n          systemPlanningPeriodByPlanningPeriodIdAndSystemId(systemId: $systemId, planningPeriodId: $planningPeriodId) {\r\n                id\r\n                estimate\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n                \r\n                \r\n                system {\r\n                    name\r\n                }\r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n                \r\n                analysisTimeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                analysisCalculatedFinishDate\r\n                \r\n                analysisEstimate\r\n                \r\n                developmentTimeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                developmentCalculatedFinishDate\r\n                \r\n                developmentEstimate\r\n                \r\n                testingTimeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                testingCalculatedFinishDate\r\n                \r\n                testingEstimate\r\n\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                systemChangeRequests {\r\n                    id\r\n                    key\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategoryId\r\n                    effortPerFunctionPoint\r\n                    mainDeveloper {\r\n                        id\r\n                        name\r\n                    }\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass SystemPlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n\r\n        const systemPlanningPeriod = this.props.data.systemPlanningPeriodByPlanningPeriodIdAndSystemId\r\n\r\n        const systemName = systemPlanningPeriod.system.name\r\n        const estimate = systemPlanningPeriod.estimate\r\n        const calculatedFinishDate = systemPlanningPeriod.calculatedFinishDate\r\n        const effortPerFunctionPoint = systemPlanningPeriod.effortPerFunctionPoint\r\n        const planningPeriodName = systemPlanningPeriod.planningPeriod.name\r\n        const planningPeriodStart = systemPlanningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = systemPlanningPeriod.planningPeriod.end\r\n        const systemChangeRequests = systemPlanningPeriod.systemChangeRequests\r\n\r\n        const analysisTimeSheetsByDate = systemPlanningPeriod.analysisTimeSheetsByDate\r\n        const analysisEstimate = systemPlanningPeriod.analysisEstimate\r\n        const analysisCalculatedFinishDate = systemPlanningPeriod.analysisCalculatedFinishDate\r\n\r\n        const developmentTimeSheetsByDate = systemPlanningPeriod.developmentTimeSheetsByDate\r\n        const developmentEstimate = systemPlanningPeriod.developmentEstimate\r\n        const developmentCalculatedFinishDate = systemPlanningPeriod.developmentCalculatedFinishDate\r\n\r\n        const testingTimeSheetsByDate = systemPlanningPeriod.testingTimeSheetsByDate\r\n        const testingEstimate = systemPlanningPeriod.testingEstimate\r\n        const testingCalculatedFinishDate = systemPlanningPeriod.testingCalculatedFinishDate\r\n\r\n        const timeSheetsByDate = systemPlanningPeriod.timeSheetsByDate\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(systemChangeRequest => (\r\n                    {\r\n                        id: systemChangeRequest.id,\r\n                        key: systemChangeRequest.key,\r\n                        name: systemChangeRequest.name,\r\n                        hasValue: systemChangeRequest.hasValue,\r\n                        estimate: systemChangeRequest.estimate,\r\n                        timeLeft: systemChangeRequest.timeLeft,\r\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint,\r\n                        mainDeveloperName: systemChangeRequest.mainDeveloper.name,\r\n                    }\r\n            ))\r\n\r\n        const systemChangeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'mainDeveloperName',\r\n                headerName: 'Основной разработчик',\r\n                width: 200,\r\n                align: 'left',\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Система { systemName }<br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })<br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка<br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate ={ calculatedFinishDate }\r\n                />\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ analysisTimeSheetsByDate }\r\n                    estimate={ analysisEstimate }\r\n                    calculatedFinishDate={ analysisCalculatedFinishDate }\r\n                />\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Разработка\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ developmentTimeSheetsByDate }\r\n                    estimate={ developmentEstimate }\r\n                    calculatedFinishDate={ developmentCalculatedFinishDate }\r\n                />\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ testingTimeSheetsByDate }\r\n                    estimate={ testingEstimate }\r\n                    calculatedFinishDate={ testingCalculatedFinishDate }\r\n                />\r\n\r\n               <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemChangeRequestsTableContents }\r\n                        columns={ systemChangeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchSystemPlanningPeriodByPlanningPeriodIdAndSystemId, {\r\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\r\n})(SystemPlanningPeriodDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodSystemDetail.js",["202","203"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId = gql`\r\n     query ProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId($projectTeamId:Int!, $planningPeriodId: Int!, $systemId: Int!) {\r\n          projectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId(projectTeamId: $projectTeamId, planningPeriodId: $planningPeriodId, systemId: $systemId) {\r\n                id\r\n                estimate\r\n                calculatedFinishDate\r\n                \r\n                effortPerFunctionPoint\r\n                system {\r\n                    name\r\n                }\r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                systemChangeRequests {\r\n                    id\r\n                    key\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategoryId\r\n                    effortPerFunctionPoint\r\n                    \r\n                    mainDeveloper {\r\n                        id\r\n                        name\r\n                    }\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass ProjectTeamPlanningPeriodSystemDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n\r\n        const projectTeamPlanningPeriodSystem = this.props.data.projectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId\r\n\r\n        const systemName = projectTeamPlanningPeriodSystem.system.name\r\n        const estimate = projectTeamPlanningPeriodSystem.estimate\r\n        const calculatedFinishDate = projectTeamPlanningPeriodSystem.calculatedFinishDate\r\n        const effortPerFunctionPoint = projectTeamPlanningPeriodSystem.effortPerFunctionPoint\r\n        const planningPeriodName = projectTeamPlanningPeriodSystem.planningPeriod.name\r\n        const planningPeriodStart = projectTeamPlanningPeriodSystem.planningPeriod.start\r\n        const planningPeriodEnd = projectTeamPlanningPeriodSystem.planningPeriod.end\r\n        const systemChangeRequests = projectTeamPlanningPeriodSystem.systemChangeRequests\r\n\r\n        const timeSheetsByDate = projectTeamPlanningPeriodSystem.timeSheetsByDate\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(systemChangeRequest => (\r\n                    {\r\n                        id: systemChangeRequest.id,\r\n                        key: systemChangeRequest.key,\r\n                        name: systemChangeRequest.name,\r\n                        hasValue: systemChangeRequest.hasValue,\r\n                        estimate: systemChangeRequest.estimate,\r\n                        timeLeft: systemChangeRequest.timeLeft,\r\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint,\r\n                        mainDeveloperName: systemChangeRequest.mainDeveloper.name,\r\n                    }\r\n            ))\r\n\r\n        const systemChangeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'mainDeveloperName',\r\n                headerName: 'Основной разработчик',\r\n                width: 200,\r\n                align: 'left',\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Система { systemName }<br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })<br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка<br/>\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n               <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemChangeRequestsTableContents }\r\n                        columns={ systemChangeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId, {\r\n    options: (props) => { return { variables: { projectTeamId: props.match.params.projectTeamId, planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\r\n})(ProjectTeamPlanningPeriodSystemDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodSystemDetail.js",["204","205"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchDedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId = gql`\r\n     query DedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId($dedicatedTeamId:Int!, $planningPeriodId: Int!, $systemId: Int!) {\r\n          dedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId(dedicatedTeamId: $dedicatedTeamId, planningPeriodId: $planningPeriodId, systemId: $systemId) {\r\n                id\r\n                estimate\r\n                calculatedFinishDate\r\n                effortPerFunctionPoint\r\n                system {\r\n                    name\r\n                }\r\n                \r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                systemChangeRequests {\r\n                    id\r\n                    key\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategoryId\r\n                    effortPerFunctionPoint\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass DedicatedTeamPlanningPeriodSystemDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n\r\n        const dedicatedTeamPlanningPeriodSystem = this.props.data.dedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId\r\n\r\n        const systemName = dedicatedTeamPlanningPeriodSystem.system.name\r\n        const estimate = dedicatedTeamPlanningPeriodSystem.estimate\r\n        const calculatedFinishDate = dedicatedTeamPlanningPeriodSystem.calculatedFinishDate\r\n        const effortPerFunctionPoint = dedicatedTeamPlanningPeriodSystem.effortPerFunctionPoint\r\n        const planningPeriodName = dedicatedTeamPlanningPeriodSystem.planningPeriod.name\r\n        const planningPeriodStart = dedicatedTeamPlanningPeriodSystem.planningPeriod.start\r\n        const planningPeriodEnd = dedicatedTeamPlanningPeriodSystem.planningPeriod.end\r\n        const systemChangeRequests = dedicatedTeamPlanningPeriodSystem.systemChangeRequests\r\n\r\n        const timeSheetsByDate = dedicatedTeamPlanningPeriodSystem.timeSheetsByDate\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(systemChangeRequest => (\r\n                    {\r\n                        id: systemChangeRequest.id,\r\n                        key: systemChangeRequest.key,\r\n                        name: systemChangeRequest.name,\r\n                        hasValue: systemChangeRequest.hasValue,\r\n                        estimate: systemChangeRequest.estimate,\r\n                        timeLeft: systemChangeRequest.timeLeft,\r\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint\r\n                    }\r\n            ))\r\n\r\n        const systemChangeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Система { systemName }<br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })<br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка<br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование+ Управление\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n               <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemChangeRequestsTableContents }\r\n                        columns={ systemChangeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchDedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId, {\r\n    options: (props) => { return { variables: { dedicatedTeamId: props.match.params.dedicatedTeamId, planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\r\n})(DedicatedTeamPlanningPeriodSystemDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\EpicDetail.js",["206"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink, NavLink} from \"react-router-dom\";\r\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\r\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\r\n\r\nconst fetchEpicByKey = gql`\r\n    query EpicByKeyQuery($key: String!) {\r\n        epicByKey(key: $key) {\r\n            id \r\n            key\r\n            name\r\n            \r\n            estimate\r\n            effortPerFunctionPoint\r\n            timeSpent\r\n            timeLeft\r\n            calculatedFinishDate\r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n                timeSpentCumsumPrediction\r\n            }\r\n            \r\n            analysisEstimate\r\n            analysisTimeSpent\r\n            analysisTimeLeft\r\n            analysisTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            \r\n            developmentEstimate\r\n            developmentTimeSpent\r\n            developmentTimeLeft\r\n            developmentTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            testingEstimate\r\n            testingTimeSpent\r\n            testingTimeLeft\r\n            testingTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            systems {\r\n                id\r\n                estimate\r\n                timeLeft\r\n                system {\r\n                    id\r\n                    name\r\n                }\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n            }\r\n            \r\n            changeRequests {\r\n                id\r\n                key\r\n                estimate\r\n                timeLeft\r\n                hasValue\r\n                name\r\n                stateCategoryId\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n                newFunctionsTimeSpentPrevious28Days\r\n            }\r\n            \r\n            persons {\r\n                person {\r\n                    id\r\n                    name\r\n                }\r\n                newFunctionsTimeSpent\r\n                newFunctionsFullTimeEquivalentPrevious28Days\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass EpicDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const epicKey = this.props.match.params.key\r\n        const epic = this.props.data.epicByKey\r\n\r\n        const timeSheetsByDate = epic.timeSheetsByDate\r\n        const systems = epic.systems\r\n        const changeRequests = epic.changeRequests\r\n        const persons = epic.persons\r\n\r\n        const estimate = epic.estimate\r\n        const effortPerFunctionPoint = epic.effortPerFunctionPoint\r\n\r\n        const analysisTimeSheetsByDate = epic.analysisTimeSheetsByDate\r\n        const analysisEstimate = epic.analysisEstimate\r\n\r\n        const developmentTimeSheetsByDate = epic.developmentTimeSheetsByDate\r\n        const developmentEstimate = epic.developmentEstimate\r\n\r\n        const testingTimeSheetsByDate = epic.testingTimeSheetsByDate\r\n        const testingEstimate = epic.testingEstimate\r\n\r\n        const calculatedFinishDate = epic.calculatedFinishDate\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today]\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        if (calculatedFinishDate) {\r\n            const calculatedFinishDateAsDate = new Date(calculatedFinishDate)\r\n            allEdgeDates.push(calculatedFinishDateAsDate)\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\r\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\r\n\r\n        const systemsTableContents = systems.slice()\r\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\r\n            .map(system => (\r\n                    {\r\n                        id: system.id,\r\n                        estimate: system.estimate,\r\n                        timeLeft: system.timeLeft,\r\n                        systemId: system.system.id,\r\n                        systemName: system.system.name,\r\n                        effortPerFunctionPoint: system.effortPerFunctionPoint,\r\n                        calculatedFinishDate: system.calculatedFinishDate,\r\n                    }\r\n            ))\r\n\r\n        const systemsTableColumns = [\r\n            {\r\n                field: 'systemName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/epics/${ epicKey }/systems/${ params.getValue(params.id, 'systemId') }` }>\r\n                        { params.getValue(params.id, 'systemName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        const changeRequestsTableContents = changeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(changeRequest => (\r\n                    {\r\n                        id: changeRequest.id,\r\n                        key: changeRequest.key,\r\n                        name: changeRequest.name,\r\n                        hasValue: changeRequest.hasValue,\r\n                        estimate: changeRequest.estimate,\r\n                        timeLeft: changeRequest.timeLeft,\r\n                        stateCategoryId: changeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\r\n                        calculatedFinishDate: changeRequest.calculatedFinishDate,\r\n                        newFunctionsTimeSpentPrevious28Days: changeRequest.newFunctionsTimeSpentPrevious28Days,\r\n                    }\r\n            ))\r\n\r\n        const changeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpentPrevious28Days',\r\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        const personsTableContents = persons.slice()\r\n            .sort((a, b) =>  (\r\n                (a.newFunctionsFullTimeEquivalentPrevious28Days > b.newFunctionsFullTimeEquivalentPrevious28Days) ? -1 : (\r\n                    (a.newFunctionsFullTimeEquivalentPrevious28Days == b.newFunctionsFullTimeEquivalentPrevious28Days) ? 0 : 1\r\n                )\r\n            ))\r\n            .map(person => (\r\n                    {\r\n                        id: person.person.id,\r\n                        name: person.person.name,\r\n                        newFunctionsTimeSpent: person.newFunctionsTimeSpent,\r\n                        newFunctionsFullTimeEquivalentPrevious28Days: person.newFunctionsFullTimeEquivalentPrevious28Days\r\n                    }\r\n            ))\r\n\r\n            const personsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Имя',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpent',\r\n                headerName: 'Новый функционал: списано всего (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\r\n                headerName: 'Новый функционал: фактический FTE за 28 дней',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\r\n            },\r\n        ];\r\n\r\n        return (\r\n           <Box>\r\n                <Typography variant=\"body1\" noWrap>\r\n                    <NavLink to={ this.props.location.pathname }>\r\n                        { epic.key }\r\n                    </NavLink> &nbsp;\r\n                    { epic.name } &nbsp;\r\n                    <Link href={ epic.url }>\r\n                        [ источник ]\r\n                    </Link>\r\n                    <br />\r\n                    Осталось { epic.timeLeft.toFixed(1) } ч ( { (epic.timeLeft / epic.estimate * 100).toFixed(2) }% ) <br />\r\n                    Сделано { epic.timeSpent.toFixed(1) } ч <br />\r\n                    Оценка { epic.estimate.toFixed(1) } ч <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка <br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                </Typography>\r\n                <br />\r\n\r\n                <TimeSheetsByDateIssueChart\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <TimeSheetsByDateIssueChart\r\n                    title=\"Аналитика\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"red\"\r\n                    timeSheetsByDate={ analysisTimeSheetsByDate }\r\n                    estimate={ analysisEstimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <TimeSheetsByDateIssueChart\r\n                    title=\"Разработка\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"green\"\r\n                    timeSheetsByDate={ developmentTimeSheetsByDate }\r\n                    estimate={ developmentEstimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <TimeSheetsByDateIssueChart\r\n                    title=\"Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"blue\"\r\n                    timeSheetsByDate={ testingTimeSheetsByDate }\r\n                    estimate={ testingEstimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemsTableContents }\r\n                        columns={ systemsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку ПО\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ changeRequestsTableContents }\r\n                        columns={ changeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Команда\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ personsTableContents }\r\n                        columns={ personsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchEpicByKey, {\r\n    options: (props) => { return { variables: { key: props.match.params.key }}}\r\n})(EpicDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\EpicSystemDetail.js",["207"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchEpicSystemByEpicKeyAndSystemId = gql`\r\n     query EpicSystemByEpicKeyAndSystemId($epicKey: String!, $systemId: Int!) {\r\n          epicSystemByEpicKeyAndSystemId(epicKey: $epicKey, systemId: $systemId) {\r\n                id\r\n                estimate\r\n                calculatedFinishDate\r\n                effortPerFunctionPoint\r\n                system {\r\n                    name\r\n                }\r\n\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                systemChangeRequests {\r\n                    id\r\n                    key\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategoryId\r\n                    effortPerFunctionPoint\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass EpicSystemDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const epicSystem = this.props.data.epicSystemByEpicKeyAndSystemId\r\n\r\n        const systemName = epicSystem.system.name\r\n        const estimate = epicSystem.estimate\r\n        const calculatedFinishDate = epicSystem.calculatedFinishDate\r\n        const effortPerFunctionPoint = epicSystem.effortPerFunctionPoint\r\n        const systemChangeRequests = epicSystem.systemChangeRequests\r\n\r\n        const timeSheetsByDate = epicSystem.timeSheetsByDate\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today]\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        if (calculatedFinishDate) {\r\n            allEdgeDates.push(new Date(calculatedFinishDate).getTime())\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\r\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\r\n\r\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(systemChangeRequest => (\r\n                    {\r\n                        id: systemChangeRequest.id,\r\n                        key: systemChangeRequest.key,\r\n                        name: systemChangeRequest.name,\r\n                        hasValue: systemChangeRequest.hasValue,\r\n                        estimate: systemChangeRequest.estimate,\r\n                        timeLeft: systemChangeRequest.timeLeft,\r\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint\r\n                    }\r\n            ))\r\n\r\n        const systemChangeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Система { systemName }<br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка<br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n               <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemChangeRequestsTableContents }\r\n                        columns={ systemChangeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchEpicSystemByEpicKeyAndSystemId, {\r\n    options: (props) => { return { variables: { epicKey: props.match.params.epicKey, systemId: props.match.params.systemId }}}\r\n})(EpicSystemDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamDetail.js",["208","209","210"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\r\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\";\r\n\r\nconst fetchDedicatedTeamByDedicatedTeamId = gql`\r\n         query DedicatedTeamById($id: Int!) {\r\n              dedicatedTeamById(id: $id) {\r\n                    id\r\n                    estimate\r\n                    name\r\n                    cio {\r\n                        name\r\n                    }\r\n                    cto {\r\n                        name\r\n                    }\r\n                    calculatedFinishDate\r\n               \r\n                    timeSheetsByDate {\r\n                        date\r\n                        timeSpentCumsum\r\n                        timeSpentCumsumPrediction\r\n                        timeSpentWithoutValuePercentCumsum\r\n                        timeSpentWithValuePercentCumsum\r\n                        timeSpentForReengineeringPercentCumsum\r\n                        timeSpentNotForReengineeringPercentCumsum\r\n                    }\r\n               \r\n                    projectTeams {\r\n                        id\r\n                        estimate\r\n                        timeLeft\r\n                        name\r\n                        calculatedFinishDate\r\n                        timeSpentChronon\r\n                        queueLength\r\n                        positionPersonPlanFactIssueCount\r\n                        timeSpentForReengineeringPercent\r\n                    }\r\n                    \r\n                    dedicatedTeamPlanningPeriods {\r\n                        planningPeriod {\r\n                            id \r\n                            name\r\n                            start\r\n                            end\r\n                        }\r\n                        calculatedFinishDate\r\n                        estimate\r\n                        timeLeft\r\n                        effortPerFunctionPoint\r\n                        timeSpentChronon\r\n                    }\r\n              }\r\n        }\r\n`;\r\n\r\nclass DedicatedTeamDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const dedicatedTeamId = this.props.match.params.dedicatedTeamId\r\n\r\n        const dedicatedTeam = this.props.data.dedicatedTeamById\r\n\r\n        const dedicatedTeamName = dedicatedTeam.name\r\n        const cioName = dedicatedTeam.cio.name\r\n        const ctoName = dedicatedTeam.cto.name\r\n        const estimate = dedicatedTeam.estimate\r\n\r\n        const timeSheetsByDate = dedicatedTeam.timeSheetsByDate\r\n        const calculatedFinishDate = dedicatedTeam.calculatedFinishDate\r\n        \r\n        const dedicatedTeamPlanningPeriods = dedicatedTeam.dedicatedTeamPlanningPeriods\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today]\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        if (calculatedFinishDate) {\r\n            allEdgeDates.push(new Date(calculatedFinishDate).getTime())\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\r\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\r\n\r\n        const projectTeams = dedicatedTeam.projectTeams\r\n\r\n        const projectTeamsTableContents = projectTeams.slice()\r\n            .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\r\n            .map(projectTeam => (\r\n                    {\r\n                        id: projectTeam.id,\r\n                        estimate: projectTeam.estimate,\r\n                        timeLeft: projectTeam.timeLeft,\r\n                        name: projectTeam.name,\r\n                        calculatedFinishDate: projectTeam.calculatedFinishDate,\r\n                        timeSpentChronon: projectTeam.timeSpentChronon,\r\n                        queueLength: projectTeam.queueLength,\r\n                        positionPersonPlanFactIssueCount: projectTeam.positionPersonPlanFactIssueCount,\r\n                        timeSpentForReengineeringPercent: projectTeam.timeSpentForReengineeringPercent,\r\n                    }\r\n            ))\r\n\r\n        const projectTeamsTableColumns = [\r\n            {\r\n                field: 'projectTeamName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'queueLength',\r\n                headerName: 'Длина очереди (мес)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeSpentChronon',\r\n                headerName: 'Трудомощность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'positionPersonPlanFactIssueCount',\r\n                headerName: 'Количество проблем с планированием команды (количество членов команды разницей между планом и фактом > 0.4 FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n            },\r\n            {\r\n                field: 'timeSpentForReengineeringPercent',\r\n                headerName: 'Затраты на технологическое перевооружение и исправление проблем (%)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }) ,\r\n            },\r\n        ];\r\n        \r\n        const planningPeriodsTableContents = dedicatedTeamPlanningPeriods.slice()\r\n            .sort((a, b) => ((a.planningPeriod.start < b.planningPeriod.start) ? 1 : ((a.planningPeriod.start > b.planningPeriod.start) ? -1 : 0)))\r\n            .filter(a => a.estimate > 0)\r\n            .map(dedicatedTeamPlanningPeriod => (\r\n                    {\r\n                        id: dedicatedTeamPlanningPeriod.planningPeriod.id,\r\n                        name: dedicatedTeamPlanningPeriod.planningPeriod.name,\r\n                        estimate: dedicatedTeamPlanningPeriod.estimate,\r\n                        timeLeft: dedicatedTeamPlanningPeriod.timeLeft,\r\n                        effortPerFunctionPoint: dedicatedTeamPlanningPeriod.effortPerFunctionPoint,\r\n                        calculatedFinishDate: dedicatedTeamPlanningPeriod.calculatedFinishDate,\r\n                        timeSpentChronon: dedicatedTeamPlanningPeriod.timeSpentChronon,\r\n                    }\r\n            ))\r\n\r\n        const planningPeriodsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${ params.getValue(params.id, 'id') }/dedicatedTeams/${ dedicatedTeamId }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'timeSpentChronon',\r\n                headerName: 'Трудомощность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Выделенная команда { dedicatedTeamName }\r\n                    <br />\r\n                    Бизнес-партнер { cioName }\r\n                    <br />\r\n                    Руководитель разработки (CTO) { ctoName }\r\n                    <br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    <br />\r\n                </Typography>\r\n\r\n                <TimeSheetsByDateIssueChart\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <ReengineeringByDatePeriodChart\r\n                    planningPeriodEnd={ xAxisEnd }\r\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Проектные команды\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ projectTeamsTableContents }\r\n                        columns={ projectTeamsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n                <br />\r\n\r\n                {/*<Typography variant=\"h6\" noWrap>*/}\r\n                {/*    Периоды*/}\r\n                {/*</Typography>*/}\r\n\r\n                {/*<div>*/}\r\n                {/*    <DataGridPro*/}\r\n                {/*        rows={ planningPeriodsTableContents }*/}\r\n                {/*        columns={ planningPeriodsTableColumns }*/}\r\n                {/*        autoHeight*/}\r\n                {/*    />*/}\r\n                {/*</div>*/}\r\n\r\n                {/*<br />*/}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchDedicatedTeamByDedicatedTeamId, {\r\n    options: (props) => { return { variables: { id: props.match.params.dedicatedTeamId }}}\r\n})(DedicatedTeamDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamDetail.js",["211","212","213","214"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\r\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\";\r\n\r\nconst fetchProjectTeamByDedicatedTeamId = gql`\r\n    query ProjectTeamById($id: Int!) {\r\n        projectTeamById(id: $id) {\r\n            id\r\n            estimate\r\n            name\r\n            url\r\n            \r\n            calculatedFinishDate\r\n            \r\n            dedicatedTeam {\r\n                id\r\n                name\r\n            }\r\n            \r\n            projectManager {\r\n                id\r\n                name\r\n            }\r\n            \r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n                timeSpentCumsumPrediction\r\n                timeSpentWithoutValuePercentCumsum\r\n                timeSpentWithValuePercentCumsum\r\n                timeSpentForReengineeringPercentCumsum\r\n                timeSpentNotForReengineeringPercentCumsum\r\n            }\r\n            \r\n            timeSheetsByMonth {\r\n                id\r\n                month\r\n                timeSpentFte\r\n                analysisTimeSpentFte\r\n                developmentTimeSpentFte\r\n                testingTimeSpentFte\r\n                managementTimeSpentFte\r\n                incidentFixingTimeSpentFte\r\n                workingDaysInMonthOccured\r\n            }\r\n            \r\n            projectTeamPlanningPeriods {\r\n                planningPeriod {\r\n                    id \r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n                calculatedFinishDate\r\n                estimate\r\n                timeLeft\r\n                effortPerFunctionPoint\r\n                timeSpentChronon\r\n            }\r\n            \r\n            chrononPositions {\r\n                id\r\n                position {\r\n                    id\r\n                    url\r\n                    name\r\n                }\r\n                person {\r\n                    id\r\n                    key\r\n                    name\r\n                }\r\n                timeSpent\r\n                timeSpentChrononFte\r\n                totalCapacityFte\r\n                \r\n                planFactFteDifference\r\n                \r\n                state {\r\n                    name\r\n                }\r\n            }\r\n            \r\n            positionPersonPlanFactIssueCount\r\n        }\r\n    }\r\n`;\r\n\r\nfunction ToolBarWithExport() {\r\n  return (\r\n    <GridToolbarContainer>\r\n        <GridToolbarExport\r\n          csvOptions={{\r\n              delimiter: \";\",\r\n              utf8WithBom: true,\r\n          }}\r\n        />\r\n\r\n\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nclass ProjectTeamDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const projectTeamId = this.props.match.params.projectTeamId\r\n        const projectTeam = this.props.data.projectTeamById\r\n\r\n        const projectTeamName = projectTeam.name\r\n        const projectTeamUrl = projectTeam.url\r\n        const estimate = projectTeam.estimate\r\n\r\n        const dedicatedTeam = projectTeam.dedicatedTeam\r\n        const dedicatedTeamId = dedicatedTeam.id\r\n        const dedicatedTeamName = dedicatedTeam.name\r\n\r\n        const projectManager = projectTeam.projectManager\r\n        const projectManagerName = projectManager.name\r\n\r\n        const timeSheetsByDate = projectTeam.timeSheetsByDate\r\n        const timeSheetsByMonth = projectTeam.timeSheetsByMonth\r\n        const calculatedFinishDate = projectTeam.calculatedFinishDate\r\n\r\n        const projectTeamPlanningPeriods = projectTeam.projectTeamPlanningPeriods\r\n        const positions = projectTeam.chrononPositions\r\n\r\n        const positionPersonPlanFactIssueCount = projectTeam.positionPersonPlanFactIssueCount\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today]\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        if (calculatedFinishDate) {\r\n            allEdgeDates.push(new Date(calculatedFinishDate).getTime())\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\r\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\r\n\r\n        const planningPeriodsTableContents = projectTeamPlanningPeriods.slice()\r\n            .sort((a, b) => ((a.planningPeriod.start < b.planningPeriod.start) ? 1 : ((a.planningPeriod.start > b.planningPeriod.start) ? -1 : 0)))\r\n            .filter(a => a.estimate > 0)\r\n            .map(projectTeamPlanningPeriod => (\r\n                    {\r\n                        id: projectTeamPlanningPeriod.planningPeriod.id,\r\n                        name: projectTeamPlanningPeriod.planningPeriod.name,\r\n                        estimate: projectTeamPlanningPeriod.estimate,\r\n                        timeLeft: projectTeamPlanningPeriod.timeLeft,\r\n                        effortPerFunctionPoint: projectTeamPlanningPeriod.effortPerFunctionPoint,\r\n                        calculatedFinishDate: projectTeamPlanningPeriod.calculatedFinishDate,\r\n                        timeSpentChronon: projectTeamPlanningPeriod.timeSpentChronon,\r\n                    }\r\n            ))\r\n\r\n        const planningPeriodsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${ params.getValue(params.id, 'id') }/projectTeams/${ projectTeamId }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'timeSpentChronon',\r\n                headerName: 'Трудомощность, ч',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        const positionsTableContents = positions.slice()\r\n            .filter(position => position.timeSpentChrononFte > 0 || position.position.id !=  \"-1\"\r\n            )\r\n            .sort((a, b) =>  (\r\n                (a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : (\r\n                    (a.timeSpentChrononFte == b.timeSpentChrononFte) ? 0 : 1\r\n                )\r\n            ))\r\n            .map(position => (\r\n                    {\r\n                        id: position.id,\r\n                        url: position.position.url,\r\n                        position: position.position.name,\r\n                        personId: position.person.id,\r\n                        personKey: position.person.key,\r\n                        personName: position.person.name,\r\n                        timeSpent: position.timeSpent,\r\n                        timeSpentChrononFte: position.timeSpentChrononFte,\r\n                        totalCapacityFte: position.totalCapacityFte,\r\n                        planFactFteDifference: position.planFactFteDifference,\r\n                        stateName: position.state.name\r\n                    }\r\n            ))\r\n\r\n        const positionsTableColumns = [\r\n            {\r\n                field: 'position',\r\n                headerName: 'Позиция',\r\n                flex: 1,\r\n                renderCell: (params) => {\r\n                    const url = params.getValue(params.id, 'url')\r\n\r\n                    return url ?\r\n                        <Link href={ url } target=\"_blank\">\r\n                            { params.getValue(params.id, 'position') }\r\n                        </Link>\r\n                    : params.getValue(params.id, 'position')\r\n                },\r\n            },\r\n            {\r\n                field: 'stateName',\r\n                headerName: 'Статус',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'personName',\r\n                headerName: 'ФИО',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/persons/${ params.getValue(params.id, 'personKey') }` }>\r\n                        { params.getValue(params.id, 'personName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'timeSpent',\r\n                headerName: 'Списано всего, ч',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'totalCapacityFte',\r\n                headerName: 'Плановая трудомощность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n            {\r\n                field: 'timeSpentChrononFte',\r\n                headerName: 'Фактическая трудомощность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n            {\r\n                field: 'planFactFteDifference',\r\n                headerName: 'Разница между планом и фактом, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n\r\n        ];\r\n\r\n        const timeSheetsByMonthTableContents = timeSheetsByMonth.slice()\r\n            .sort((a, b) => ((a.month < b.month) ? 1 : ((a.month > b.month) ? -1 : 0)))\r\n            .map(timeSheetByMonth => (\r\n                    {\r\n                        id: timeSheetByMonth.id,\r\n                        month: timeSheetByMonth.month,\r\n                        timeSpentFte: timeSheetByMonth.timeSpentFte,\r\n                        analysisTimeSpentFte: timeSheetByMonth.analysisTimeSpentFte,\r\n                        developmentTimeSpentFte: timeSheetByMonth.developmentTimeSpentFte,\r\n                        testingTimeSpentFte: timeSheetByMonth.testingTimeSpentFte,\r\n                        managementTimeSpentFte: timeSheetByMonth.managementTimeSpentFte,\r\n                        incidentFixingTimeSpentFte: timeSheetByMonth.incidentFixingTimeSpentFte,\r\n                        workingDaysInMonthOccured: timeSheetByMonth.workingDaysInMonthOccured,\r\n                    }\r\n            ))\r\n\r\n        const timeSheetsByMonthTableColumns = [\r\n            {\r\n                field: 'month',\r\n                headerName: 'Год-месяц',\r\n                width: 200,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ projectTeamId }/month/${ params.getValue(params.id, 'month') }/persons/` }>\r\n                        { params.getValue(params.id, 'month') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'timeSpentFte',\r\n                headerName: 'Трудозатраты (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'analysisTimeSpentFte',\r\n                headerName: 'Трудозатраты аналитики (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'developmentTimeSpentFte',\r\n                headerName: 'Трудозатраты разработки (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'testingTimeSpentFte',\r\n                headerName: 'Трудозатраты тестирования (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'managementTimeSpentFte',\r\n                headerName: 'Трудозатраты управление (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'incidentFixingTimeSpentFte',\r\n                headerName: 'Трудозатраты инциденты (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'workingDaysInMonthOccured',\r\n                headerName: 'Рабочих дней в месяце',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Проектная команда { projectTeamName } &nbsp;\r\n                    <Link href={ projectTeamUrl } target=\"_blank\">\r\n                        [ источник ]\r\n                    </Link>\r\n                    <br />\r\n                    Менеджер проекта { projectManagerName }\r\n                    <br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    Количество проблем с планированием команды (количество членов команды разницей между планом и фактом > 0.4 FTE) { positionPersonPlanFactIssueCount }\r\n                    <br />\r\n                    Выделенная команда &nbsp;\r\n                    <RouterLink to={ `/dedicatedTeams/${ dedicatedTeamId }` }>\r\n                        { dedicatedTeamName }\r\n                    </RouterLink>\r\n                    <br />\r\n                    <br />\r\n                </Typography>\r\n\r\n                <TimeSheetsByDateIssueChart\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <ReengineeringByDatePeriodChart\r\n                    planningPeriodEnd={ xAxisEnd }\r\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <br />\r\n\r\n                {/*<Typography variant=\"h6\" noWrap>*/}\r\n                {/*    Периоды*/}\r\n                {/*</Typography>*/}\r\n\r\n                {/*<div>*/}\r\n                {/*    <DataGridPro*/}\r\n                {/*        rows={ planningPeriodsTableContents }*/}\r\n                {/*        columns={ planningPeriodsTableColumns }*/}\r\n                {/*        autoHeight*/}\r\n                {/*    />*/}\r\n                {/*</div>*/}\r\n\r\n                {/*<br />*/}\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Команда\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ positionsTableContents }\r\n                        columns={ positionsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Трудозатраты по месяцам\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ timeSheetsByMonthTableContents }\r\n                        columns={ timeSheetsByMonthTableColumns }\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchProjectTeamByDedicatedTeamId, {\r\n    options: (props) => { return { variables: { id: props.match.params.projectTeamId }}}\r\n})(ProjectTeamDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PersonList.js",["215","216","217","218","219","220"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport {graphql} from '@apollo/client/react/hoc';\r\nimport moment from 'moment';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Link as RouterLink, NavLink} from \"react-router-dom\"\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\r\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\r\n\r\nfunction ToolBarWithExport() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      <GridToolbarExport />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nconst fetchPersonList = gql`\r\n    query Persons {\r\n        persons {\r\n            id \r\n            name\r\n            mainProjectTeam {\r\n                id\r\n                name\r\n                dedicatedTeam {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass PersonList extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const persons = this.props.data.persons\r\n\r\n        const personsTableContents = persons.slice()\r\n            .filter((person) => (\r\n              person.mainProjectTeam.id != -1\r\n            ))\r\n            .sort((a, b) =>  (\r\n                (a.name > b.name) ? 1 : (\r\n                    (a.name == b.name) ? 0 : -1\r\n                )\r\n            ))\r\n            .map(person => (\r\n                    {\r\n                        id: person.id,\r\n                        name: person.name,\r\n                        mainProjectTeamId: person.mainProjectTeam.id,\r\n                        mainProjectTeamName: person.mainProjectTeam.name,\r\n                        mainDedicatedTeamId: person.mainProjectTeam.dedicatedTeam.id,\r\n                        mainDedicatedTeamName: person.mainProjectTeam.dedicatedTeam.name,\r\n                    }\r\n            ))\r\n\r\n            const personsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Имя',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'mainProjectTeamName',\r\n                headerName: 'Основная проектная команда',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'mainProjectTeamId') }` }>\r\n                        { params.getValue(params.id, 'mainProjectTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'mainDedicatedTeamName',\r\n                headerName: 'Основная выделенная команда',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/dedicatedTeams/${ params.getValue(params.id, 'mainDedicatedTeamId') }` }>\r\n                        { params.getValue(params.id, 'mainDedicatedTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Команда\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ personsTableContents }\r\n                        columns={ personsTableColumns }\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPersonList)(PersonList);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodPersonsList.js",["221","222","223","224","225","226","227"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport {graphql} from '@apollo/client/react/hoc';\r\nimport moment from 'moment';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Link as RouterLink, NavLink} from \"react-router-dom\"\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\r\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchPlanningPeriodPersonList = gql`\r\n    query PlanningPeriodByIdQuery($id: Int!) {\r\n        planningPeriodById(id: $id) {\r\n            persons {\r\n              personId\r\n              personKey\r\n              personName\r\n              effortPerFunctionPoint\r\n              newFunctionsTimeSpent\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass PlanningPeriodPersonsList extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n\r\n        const persons = this.props.data.planningPeriodById.persons\r\n\r\n        const personsTableContents = persons.slice()\r\n            .sort((a, b) =>  (\r\n                (a.personName > b.personName) ? 1 : (\r\n                    (a.personName == b.personName) ? 0 : -1\r\n                )\r\n            ))\r\n            .map(person => (\r\n                    {\r\n                        id: person.personId,\r\n                        personId: person.personId,\r\n                        key: person.personKey,\r\n                        name: person.personName,\r\n                        effortPerFunctionPoint: person.effortPerFunctionPoint,\r\n                    }\r\n            ))\r\n\r\n            const personsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'ФИО',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/persons/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Команда\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ personsTableContents }\r\n                        columns={ personsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPlanningPeriodPersonList, {\r\n    options: (props) => { return { variables: { id: props.match.params.planningPeriodId }}}\r\n})(PlanningPeriodPersonsList);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodPersonDetail.js",["228","229","230","231","232","233","234","235"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport {graphql} from '@apollo/client/react/hoc';\r\nimport moment from 'moment';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Link as RouterLink, NavLink} from \"react-router-dom\"\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\r\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchPlanningPeriodPersonByPlanningPeriodIdAndPersonKeyQuery = gql`\r\n    query PlanningPeriodPersonByPlanningPeriodIdAndPersonKeyQuery($planningPeriodId: Int!, $personKey: String!) {\r\n        planningPeriodPersonByPlanningPeriodIdAndPersonKey(planningPeriodId: $planningPeriodId, personKey: $personKey) {\r\n          systemChangeRequests {\r\n            systemChangeRequestId\r\n            systemChangeRequestKey\r\n            systemChangeRequestName\r\n            newFunctionsTimeSpent\r\n            effortPerFunctionPoint\r\n            newFunctionsPercentageOfPersonTotalTimeInPlanningPeriod\r\n            effortPerFunctionPointWeightedByPersonTotalTimeInPlanningPeriod\r\n          }\r\n        }\r\n    }\r\n`;\r\n\r\nclass PlanningPeriodPersonDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n        const personKey = this.props.match.params.personKey\r\n\r\n        const systemChangeRequests = this.props.data.planningPeriodPersonByPlanningPeriodIdAndPersonKey.systemChangeRequests\r\n\r\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.systemChangeRequestId > b.systemChangeRequestId) ? 1 : (\r\n                    (a.systemChangeRequestId == b.systemChangeRequestId) ? 0 : -1\r\n                )\r\n            ))\r\n            .map(systemChangeRequest => (\r\n                    {\r\n                        id: systemChangeRequest.systemChangeRequestId,\r\n                        key: systemChangeRequest.systemChangeRequestKey,\r\n                        name: systemChangeRequest.systemChangeRequestName,\r\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint,\r\n                        newFunctionsPercentageOfPersonTotalTimeInPlanningPeriod: systemChangeRequest.newFunctionsPercentageOfPersonTotalTimeInPlanningPeriod,\r\n                        effortPerFunctionPointWeightedByPersonTotalTimeInPlanningPeriod: systemChangeRequest.effortPerFunctionPointWeightedByPersonTotalTimeInPlanningPeriod,\r\n                        newFunctionsTimeSpent: systemChangeRequest.newFunctionsTimeSpent,\r\n                    }\r\n            ))\r\n\r\n            const systemChangeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Заявка на доработку системы',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'newFunctionsPercentageOfPersonTotalTimeInPlanningPeriod',\r\n                headerName: 'Доля времени, потраченного на доработку системы',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPointWeightedByPersonTotalTimeInPlanningPeriod',\r\n                headerName: 'Затраты на ф.т. * доля времени, потраченного на доработку системы',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpent',\r\n                headerName: 'Списано на аналитику, разработку и тестирование (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }/persons/${ personKey }` }>\r\n                        { params.getValue(params.id, 'newFunctionsTimeSpent').toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemChangeRequestsTableContents }\r\n                        columns={ systemChangeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPlanningPeriodPersonByPlanningPeriodIdAndPersonKeyQuery, {\r\n    options: (props) => { return { variables: {\r\n        planningPeriodId: props.match.params.planningPeriodId,\r\n        personKey: props.match.params.personKey,\r\n    }}}\r\n})(PlanningPeriodPersonDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodProjectTeamsList.js",["236","237","238","239"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\r\n\r\nconst fetchPlanningPeriodById = gql`\r\n    query PlanningPeriodByIdQuery($id: Int!) {\r\n        planningPeriodById(id: $id) {\r\n            name\r\n            projectTeamPlanningPeriods {\r\n                id\r\n                projectTeam {\r\n                    id\r\n                    name\r\n                    projectManager {\r\n                      id\r\n                      name\r\n                    }\r\n                    dedicatedTeam {\r\n                      id\r\n                      name\r\n                    }\r\n                }\r\n                effortPerFunctionPoint\r\n                functionPoints\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass PlanningPeriodProjectTeamsList extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n\r\n        const planningPeriodName = this.props.data.planningPeriodById.name\r\n\r\n        const projectTeamPlanningPeriods = this.props.data.planningPeriodById.projectTeamPlanningPeriods\r\n\r\n        const projectTeamsTableContents = projectTeamPlanningPeriods.slice()\r\n            .sort((a, b) => ((a.projectTeam.name > b.projectTeam.name) ? 1 : ((a.projectTeam.name < b.projectTeam.name) ? -1 : 0)))\r\n            .map(projectTeamPlanningPeriod => (\r\n                    {\r\n                        id: projectTeamPlanningPeriod.id,\r\n                        projectTeamId: projectTeamPlanningPeriod.projectTeam.id,\r\n                        projectTeamName: projectTeamPlanningPeriod.projectTeam.name,\r\n                        projectManagerName: projectTeamPlanningPeriod.projectTeam.projectManager.name,\r\n                        effortPerFunctionPoint: projectTeamPlanningPeriod.effortPerFunctionPoint,\r\n                        functionPoints: projectTeamPlanningPeriod.functionPoints,\r\n                    }\r\n            ))\r\n\r\n        const projectTeamsTableColumns = [\r\n            {\r\n                field: 'projectTeamName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\r\n                        { params.getValue(params.id, 'projectTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'projectManagerName',\r\n                headerName: 'Руководитель проекта',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'functionPoints',\r\n                headerName: 'Функциональных точек (шт)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Проектные команды\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ projectTeamsTableContents }\r\n                        columns={ projectTeamsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPlanningPeriodById, {\r\n    options: (props) => { return { variables: { id: props.match.params.planningPeriodId }}}\r\n})(PlanningPeriodProjectTeamsList);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamList.js",["240"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport,} from '@mui/x-data-grid-pro';\r\n\r\nconst fetchProjectTeams = gql`\r\n    query ProjectTeams {\r\n        projectTeams {\r\n            id\r\n            estimate\r\n            timeLeft\r\n            name\r\n            calculatedFinishDate\r\n            timeSpentChrononFte\r\n            queueLength\r\n            positionPersonPlanFactIssueCount\r\n            \r\n            projectManager {\r\n                id\r\n                name\r\n            }\r\n            \r\n            dedicatedTeam {\r\n                id\r\n                name\r\n                \r\n                cio {\r\n                    id\r\n                    name\r\n                }\r\n                cto {\r\n                    id\r\n                    name\r\n                }                   \r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nfunction ToolBarWithExport() {\r\n  return (\r\n    <GridToolbarContainer>\r\n        <GridToolbarExport\r\n          csvOptions={{\r\n              delimiter: \";\",\r\n              utf8WithBom: true,\r\n          }}\r\n        />\r\n\r\n\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nclass ProjectTeamList extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const projectTeams = this.props.data.projectTeams\r\n\r\n        const projectTeamsTableContents = projectTeams.slice()\r\n            .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\r\n            .map(projectTeam => (\r\n                    {\r\n                        id: projectTeam.id,\r\n                        name: projectTeam.name,\r\n                        projectManagerName: projectTeam.projectManager.name,\r\n                        cioName: projectTeam.dedicatedTeam.cio.name,\r\n                        ctoName: projectTeam.dedicatedTeam.cto.name,\r\n                        positionPersonPlanFactIssueCount: projectTeam.positionPersonPlanFactIssueCount,\r\n                        timeSpentChrononFte: projectTeam.timeSpentChrononFte,\r\n                    }\r\n            ))\r\n\r\n        const projectTeamsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'projectManagerName',\r\n                headerName: 'Руководитель проекта',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'cioName',\r\n                headerName: 'Бизнес-партнер',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'ctoName',\r\n                headerName: 'Руководитель разработки (CTO)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'timeSpentChrononFte',\r\n                headerName: 'FTE команды',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n            {\r\n                field: 'positionPersonPlanFactIssueCount',\r\n                headerName: 'Количество проблем с планированием команды (количество членов команды разницей между планом и фактом > 0.4 FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Проектные команды\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ projectTeamsTableContents }\r\n                        columns={ projectTeamsTableColumns }\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchProjectTeams)(ProjectTeamList);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ReengineeringByDatePeriodChart.js",["241"],"import React, {Component} from \"react\";\r\nimport { Legend, Tooltip, ReferenceLine, LineChart, Line, XAxis, YAxis } from \"recharts\";\r\nimport moment from 'moment';\r\nimport { getEveryMonthTicksBetweenTwoDates } from '../utils'\r\n\r\nclass ReengineeringByDatePeriodChart extends Component {\r\n    render() {\r\n        const planningPeriodEnd = this.props.planningPeriodEnd\r\n        const today = (new Date()).getTime()\r\n        const title = this.props.title\r\n        const xAxisStart = this.props.xAxisStart\r\n        const xAxisEnd = this.props.xAxisEnd\r\n        const color = this.props.color\r\n        const timeSpentPercentForReengineeringAndNotForReengineeringByDate = this.props.timeSpentPercentForReengineeringAndNotForReengineeringByDate\r\n\r\n        return (\r\n                <LineChart\r\n                    width={ 1440 }\r\n                    height={ 300 }\r\n                    data={ timeSpentPercentForReengineeringAndNotForReengineeringByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentForReengineeringPercentCumsum: item.timeSpentForReengineeringPercentCumsum }\r\n                        }).filter(item => {\r\n                            return item.date >= xAxisStart\r\n                        })\r\n                    }\r\n                    margin={{\r\n                        left: 20,\r\n                        top: 50\r\n                    }}\r\n                >\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={ [dataMin => xAxisStart, dataMax => xAxisEnd] }\r\n                        tickFormatter={ (date) => moment(date).format('YYYY-MM-DD') }\r\n                        ticks={ getEveryMonthTicksBetweenTwoDates(xAxisStart, xAxisEnd) }\r\n                    />\r\n                    <YAxis\r\n                        type=\"number\"\r\n                        dataKey=\"timeSpentCumsum\"\r\n                        tickFormatter={ tick => {\r\n                            return Math.round(tick * 100) + \" %\";\r\n                        }}\r\n                    />\r\n                    <Tooltip\r\n                        labelFormatter={ (date) => moment(date).format('YYYY-MM-DD') }\r\n                    />\r\n                    <Legend />\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label={{ position: \"left\", value: \"Сегодня\" }} ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={ 1 } stroke={ color } strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" label={{ position: 'top',  value: \"100%\" }} />\r\n\r\n                    <Line\r\n                        name={ title }\r\n                        dataKey=\"timeSpentForReengineeringPercentCumsum\"\r\n                        stroke={ color }\r\n                        dot={ false }\r\n                    />\r\n                </LineChart>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReengineeringByDatePeriodChart;","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PersonDetail.js",["242","243"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchPersonByKey = gql`\r\n    query PersonByKey($key: String!) {\r\n          personByKey(key: $key) {\r\n               id\r\n               name\r\n                \r\n               analysisTimeSpentChrononFte\r\n               developmentTimeSpentChrononFte\r\n               testingTimeSpentChrononFte\r\n               managementTimeSpentChrononFte\r\n               incidentFixingTimeSpentChrononFte\r\n               nonProjectActivityTimeSpentChrononFte\r\n               timeSpentChrononFte\r\n               \r\n               incidents {\r\n                    id\r\n                    incident {\r\n                        id\r\n                        key\r\n                        url\r\n                        name\r\n                        \r\n                                \r\n                        projectTeam {\r\n                            id\r\n                            name\r\n                        }\r\n                    }\r\n                    timeSpentChrononFte          \r\n               }\r\n               \r\n               systemChangeRequests {\r\n                    id\r\n                    systemChangeRequest {\r\n                        id\r\n                        key\r\n                        url\r\n                        name\r\n                        \r\n                        changeRequest {\r\n                            id\r\n                            name\r\n                            \r\n                            projectTeam {\r\n                                id\r\n                                name\r\n                            }\r\n                        }\r\n                    }\r\n                    managementTimeSpentChrononFte          \r\n               }\r\n        \r\n               nonProjectActivities {\r\n                    id\r\n                    nonProjectActivity {\r\n                        id\r\n                        key\r\n                        url\r\n                        name\r\n\r\n                    }\r\n                    timeSpentChrononFte          \r\n               }\r\n     \r\n               tasks {\r\n                    id\r\n                    task {\r\n                        id\r\n                        key\r\n                        url\r\n                        name\r\n                        \r\n                        systemChangeRequest {\r\n                            id\r\n                            key\r\n                            name\r\n                            \r\n                            changeRequest {\r\n                                id\r\n                                key\r\n                                name\r\n                                \r\n                                projectTeam {\r\n                                    id\r\n                                    name\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    timeSpentChrononFte          \r\n               }\r\n               chrononStartDate\r\n               chrononEndDate\r\n          }\r\n    }\r\n`;\r\n\r\nclass PersonDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const personKey = this.props.match.params.key\r\n        const person = this.props.data.personByKey\r\n\r\n        const personName = person.name\r\n\r\n        const analysisTimeSpentChrononFte = person.analysisTimeSpentChrononFte\r\n        const developmentTimeSpentChrononFte = person.developmentTimeSpentChrononFte\r\n        const testingTimeSpentChrononFte = person.testingTimeSpentChrononFte\r\n        const managementTimeSpentChrononFte = person.managementTimeSpentChrononFte\r\n        const incidentFixingTimeSpentChrononFte = person.incidentFixingTimeSpentChrononFte\r\n        const nonProjectActivityTimeSpentChrononFte = person.nonProjectActivityTimeSpentChrononFte\r\n        const timeSpentChrononFte = person.timeSpentChrononFte\r\n\r\n        const chrononStartDate = person.chrononStartDate\r\n        const chrononEndDate = person.chrononEndDate\r\n\r\n        const tasks = person.tasks\r\n        const incidents = person.incidents\r\n        const nonProjectActivities = person.nonProjectActivities\r\n        const systemChangeRequests = person.systemChangeRequests\r\n\r\n        const incidentsTableContents = incidents.slice()\r\n            .filter(a => a.timeSpentChrononFte > 0)\r\n            .sort((a, b) => ((a.timeSpentChrononFte < b.timeSpentChrononFte) ? 1 : ((a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : 0)))\r\n            .map(incidentTaskTimeSpent => (\r\n                    {\r\n                        id: incidentTaskTimeSpent.id,\r\n                        incidentId: incidentTaskTimeSpent.incident.id,\r\n                        incidentKey: incidentTaskTimeSpent.incident.key,\r\n                        incidentUrl: incidentTaskTimeSpent.incident.url,\r\n                        incidentName: incidentTaskTimeSpent.incident.name,\r\n                        projectTeamId: incidentTaskTimeSpent.incident.projectTeam.id,\r\n                        projectTeamName: incidentTaskTimeSpent.incident.projectTeam.name,\r\n                        timeSpentChrononFte: incidentTaskTimeSpent.timeSpentChrononFte,\r\n                    }\r\n            ))\r\n\r\n        const incidentsTableColumns = [\r\n            {\r\n                field: 'projectTeamName',\r\n                headerName: 'Команда проекта',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\r\n                        { params.getValue(params.id, 'projectTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'incidentName',\r\n                headerName: 'Инцидент',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <Link href={ params.getValue(params.id, 'incidentUrl') } target=\"_blank\">\r\n                        { params.getValue(params.id, 'incidentName') }\r\n                    </Link>\r\n                ),\r\n            },\r\n            {\r\n                field: 'timeSpentChrononFte',\r\n                headerName: 'Трудомощность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\r\n            },\r\n        ];\r\n\r\n      const systemChangeRequestsTableContents = systemChangeRequests.slice()\r\n            .filter(a => a.managementTimeSpentChrononFte > 0)\r\n            .sort((a, b) => ((a.managementTimeSpentChrononFte < b.managementTimeSpentChrononFte) ? 1 : ((a.managementTimeSpentChrononFte > b.managementTimeSpentChrononFte) ? -1 : 0)))\r\n            .map(systemChangeRequestsTaskTimeSpent => (\r\n                    {\r\n                        id: systemChangeRequestsTaskTimeSpent.id,\r\n                        incidentId: systemChangeRequestsTaskTimeSpent.systemChangeRequest.id,\r\n                        incidentKey: systemChangeRequestsTaskTimeSpent.systemChangeRequest.key,\r\n                        incidentUrl: systemChangeRequestsTaskTimeSpent.systemChangeRequest.url,\r\n                        incidentName: systemChangeRequestsTaskTimeSpent.systemChangeRequest.name,\r\n                        projectTeamId: systemChangeRequestsTaskTimeSpent.systemChangeRequest.changeRequest.projectTeam.id,\r\n                        projectTeamName: systemChangeRequestsTaskTimeSpent.systemChangeRequest.changeRequest.projectTeam.name,\r\n                        managementTimeSpentChrononFte: systemChangeRequestsTaskTimeSpent.managementTimeSpentChrononFte,\r\n                    }\r\n            ))\r\n\r\n        const systemChangeRequestsTableColumns = [\r\n            {\r\n                field: 'projectTeamName',\r\n                headerName: 'Команда проекта',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\r\n                        { params.getValue(params.id, 'projectTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'systemChangeRequestName',\r\n                headerName: 'Заявка на доработку ПО',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <Link href={ params.getValue(params.id, 'incidentUrl') } target=\"_blank\">\r\n                        { params.getValue(params.id, 'incidentName') }\r\n                    </Link>\r\n                ),\r\n            },\r\n            {\r\n                field: 'managementTimeSpentChrononFte',\r\n                headerName: 'Трудомощность - управление, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\r\n            },\r\n        ];\r\n\r\n\r\n        const nonProjectActivitiesTableContents = nonProjectActivities.slice()\r\n            .filter(a => a.timeSpentChrononFte > 0)\r\n            .sort((a, b) => ((a.timeSpentChrononFte < b.timeSpentChrononFte) ? 1 : ((a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : 0)))\r\n            .map(nonProjectActivityTaskTimeSpent => (\r\n                    {\r\n                        id: nonProjectActivityTaskTimeSpent.id,\r\n                        nonProjectActivityId: nonProjectActivityTaskTimeSpent.nonProjectActivity.id,\r\n                        nonProjectActivityKey: nonProjectActivityTaskTimeSpent.nonProjectActivity.key,\r\n                        nonProjectActivityUrl: nonProjectActivityTaskTimeSpent.nonProjectActivity.url,\r\n                        nonProjectActivityName: nonProjectActivityTaskTimeSpent.nonProjectActivity.name,\r\n                        timeSpentChrononFte: nonProjectActivityTaskTimeSpent.timeSpentChrononFte,\r\n                    }\r\n            ))\r\n\r\n        const nonProjectActivitiesTableColumns = [\r\n            {\r\n                field: 'nonProjectActivityName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <Link href={ params.getValue(params.id, 'nonProjectActivityUrl') } target=\"_blank\">\r\n                        { params.getValue(params.id, 'nonProjectActivityName') }\r\n                    </Link>\r\n                ),\r\n            },\r\n            {\r\n                field: 'timeSpentChrononFte',\r\n                headerName: 'Трудомощность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\r\n            },\r\n        ];\r\n\r\n        const tasksTableContents = tasks.slice()\r\n            .filter(a => a.timeSpentChrononFte > 0)\r\n            .sort((a, b) => ((a.timeSpentChrononFte < b.timeSpentChrononFte) ? 1 : ((a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : 0)))\r\n            .map(personTaskTimeSpent => (\r\n                    {\r\n                        id: personTaskTimeSpent.id,\r\n                        taskId: personTaskTimeSpent.task.id,\r\n                        taskKey: personTaskTimeSpent.task.key,\r\n                        taskUrl: personTaskTimeSpent.task.url,\r\n                        taskName: personTaskTimeSpent.task.name,\r\n                        systemChangeRequestId: personTaskTimeSpent.task.systemChangeRequest.id,\r\n                        systemChangeRequestKey: personTaskTimeSpent.task.systemChangeRequest.key,\r\n                        systemChangeRequestName: personTaskTimeSpent.task.systemChangeRequest.name,\r\n                        changeRequestId: personTaskTimeSpent.task.systemChangeRequest.changeRequest.id,\r\n                        changeRequestKey: personTaskTimeSpent.task.systemChangeRequest.changeRequest.key,\r\n                        changeRequestName: personTaskTimeSpent.task.systemChangeRequest.changeRequest.name,\r\n                        projectTeamId: personTaskTimeSpent.task.systemChangeRequest.changeRequest.projectTeam.id,\r\n                        projectTeamName: personTaskTimeSpent.task.systemChangeRequest.changeRequest.projectTeam.name,\r\n                        timeSpentChrononFte: personTaskTimeSpent.timeSpentChrononFte,\r\n                    }\r\n            ))\r\n\r\n        const tasksTableColumns = [\r\n            {\r\n                field: 'projectTeamName',\r\n                headerName: 'Команда проекта',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\r\n                        { params.getValue(params.id, 'projectTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'changeRequestName',\r\n                headerName: 'Заявка на доработку ПО',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/changeRequests/${ params.getValue(params.id, 'changeRequestKey') }` }>\r\n                        { params.getValue(params.id, 'changeRequestName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'systemChangeRequestName',\r\n                headerName: 'Заявка на доработку системы',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/systemChangeRequests/${ params.getValue(params.id, 'systemChangeRequestKey') }` }>\r\n                        { params.getValue(params.id, 'systemChangeRequestName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'taskName',\r\n                headerName: 'Задача',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <Link href={ params.getValue(params.id, 'taskUrl') } target=\"_blank\">\r\n                        { params.getValue(params.id, 'taskName') }\r\n                    </Link>\r\n                ),\r\n            },\r\n            {\r\n                field: 'timeSpentChrononFte',\r\n                headerName: 'Трудомощность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Сотрудник { personName } данные за период с {chrononStartDate} по {chrononEndDate} <br />\r\n                    FTE: { timeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - аналитика: { analysisTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - разработка: { developmentTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - тестирование: { testingTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - управление: { managementTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - инциденты: { incidentFixingTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - непроизводственная деятельность: { nonProjectActivityTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                </Typography>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                   Списания на задачи\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ tasksTableContents }\r\n                        columns={ tasksTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                   Списание на управление в заявках на доработку систем\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemChangeRequestsTableContents }\r\n                        columns={ systemChangeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                   Списания на инциденты\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ incidentsTableContents }\r\n                        columns={ incidentsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                   Списания на непроизводственную (текущую) деятельность\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ nonProjectActivitiesTableContents }\r\n                        columns={ nonProjectActivitiesTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <br />\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPersonByKey, {\r\n    options: (props) => { return { variables: { key: props.match.params.key }}}\r\n})(PersonDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\CompanyDetail.js",["244","245","246","247"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\r\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\";\r\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\";\r\n\r\nconst fetchCompanyWithIdOne = gql`\r\n    query Company {\r\n        planningPeriods {\r\n            id \r\n            name\r\n            start\r\n            end\r\n            calculatedFinishDate\r\n            estimate\r\n            timeLeft\r\n            timeSpentChrononFte\r\n            effortPerFunctionPoint\r\n        }\r\n        \r\n        dedicatedTeams {\r\n            id\r\n            name\r\n            timeLeft\r\n            timeSpentChrononFte\r\n            calculatedFinishDate\r\n            queueLength\r\n            timeSpentForReengineeringPercent\r\n        }\r\n        \r\n        companyById(id: 1) {\r\n            id\r\n            name\r\n            estimate\r\n\r\n            analysisTimeSpentChrononFte\r\n            developmentTimeSpentChrononFte\r\n            testingTimeSpentChrononFte\r\n            managementTimeSpentChrononFte\r\n            incidentFixingTimeSpentChrononFte\r\n            nonProjectActivityTimeSpentChrononFte\r\n            timeSpentChrononFte\r\n\r\n            timeSpentForReengineeringPercent\r\n            calculatedFinishDate\r\n            \r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n                timeSpentCumsumPrediction\r\n                timeSpentWithoutValuePercentCumsum\r\n                timeSpentWithValuePercentCumsum\r\n                timeSpentForReengineeringPercentCumsum\r\n                timeSpentNotForReengineeringPercentCumsum\r\n            }\r\n        }\r\n        \r\n        quarters {\r\n            id\r\n            key\r\n            name\r\n            timeSpentChrononFte\r\n        }\r\n    }\r\n`;\r\n\r\nclass CompanyDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriods = this.props.data.planningPeriods\r\n        const dedicatedTeams = this.props.data.dedicatedTeams\r\n        const quarters = this.props.data.quarters\r\n\r\n        const company = this.props.data.companyById\r\n        const companyName = company.name\r\n        const calculatedFinishDate = company.calculatedFinishDate\r\n        const estimate = company.estimate\r\n\r\n        const analysisTimeSpentChrononFte = company.analysisTimeSpentChrononFte\r\n        const developmentTimeSpentChrononFte = company.developmentTimeSpentChrononFte\r\n        const testingTimeSpentChrononFte = company.testingTimeSpentChrononFte\r\n        const managementTimeSpentChrononFte = company.managementTimeSpentChrononFte\r\n        const incidentFixingTimeSpentChrononFte = company.incidentFixingTimeSpentChrononFte\r\n        const nonProjectActivityTimeSpentChrononFte = company.nonProjectActivityTimeSpentChrononFte\r\n        const timeSpentChrononFte = company.timeSpentChrononFte\r\n\r\n        const timeSheetsByDate = company.timeSheetsByDate\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today]\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        if (calculatedFinishDate) {\r\n            allEdgeDates.push(new Date(calculatedFinishDate).getTime())\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\r\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\r\n\r\n        const planningPeriodsTableContents = planningPeriods.slice()\r\n            .sort((a, b) => ((a.start < b.start) ? 1 : ((a.start > b.start) ? -1 : 0)))\r\n            .filter(a => a.estimate > 0)\r\n            .map(planningPeriod => (\r\n                    {\r\n                        id: planningPeriod.id,\r\n                        estimate: planningPeriod.estimate,\r\n                        timeLeft: planningPeriod.timeLeft,\r\n                        name: planningPeriod.name,\r\n                        effortPerFunctionPoint: planningPeriod.effortPerFunctionPoint,\r\n                        calculatedFinishDate: planningPeriod.calculatedFinishDate,\r\n                        timeSpentChrononFte: planningPeriod.timeSpentChrononFte,\r\n                    }\r\n            ))\r\n\r\n        const planningPeriodsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeSpentChrononFte',\r\n                headerName: 'Трудомощность FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        const dedicatedTeamsTableContents = dedicatedTeams.slice()\r\n            .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\r\n            .filter(dedicatedTeam => dedicatedTeam.timeLeft > 0)\r\n            .map(dedicatedTeam => (\r\n                    {\r\n                        id: dedicatedTeam.id,\r\n                        name: dedicatedTeam.name,\r\n                        timeLeft: dedicatedTeam.timeLeft,\r\n                        timeSpentChrononFte: dedicatedTeam.timeSpentChrononFte,\r\n                        calculatedFinishDate: dedicatedTeam.calculatedFinishDate,\r\n                        queueLength: dedicatedTeam.queueLength,\r\n                        timeSpentForReengineeringPercent: dedicatedTeam.timeSpentForReengineeringPercent,\r\n                    }\r\n            ))\r\n\r\n        const dedicatedTeamsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/dedicatedTeams/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'queueLength',\r\n                headerName: 'Длина очереди (мес)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeSpentChrononFte',\r\n                headerName: 'Трудомощность FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'timeSpentForReengineeringPercent',\r\n                headerName: 'Затраты на технологическое перевооружение и исправление проблем (%)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }) ,\r\n            },\r\n        ];\r\n\r\n        const quartersTableContents = quarters.slice()\r\n            .sort((a, b) => ((a.start < b.start) ? 1 : ((a.start > b.start) ? -1 : 0)))\r\n            .map(quarter => (\r\n                    {\r\n                        id: quarter.id,\r\n                        key: quarter.key,\r\n                        name: quarter.name,\r\n                        timeSpentChrononFte: quarter.timeSpentChrononFte,\r\n                    }\r\n            ))\r\n\r\n        const quartersTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/quarters/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'timeSpentChrononFte',\r\n                headerName: 'Трудомощность FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Компания { companyName }\r\n                    <br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    FTE (аналитика, разработка, тестирование, управление, инциденты, непроектная деятельность): { timeSpentChrononFte.toLocaleString(undefined, { maximumFractionDigits: 0 }) } <br />\r\n                    - аналитика { analysisTimeSpentChrononFte.toLocaleString(undefined, { maximumFractionDigits: 0 }) } <br />\r\n                    - разработка { developmentTimeSpentChrononFte.toLocaleString(undefined, { maximumFractionDigits: 0 }) } <br />\r\n                    - тестирование { testingTimeSpentChrononFte.toLocaleString(undefined, { maximumFractionDigits: 0 }) } <br />\r\n                    - управление { managementTimeSpentChrononFte.toLocaleString(undefined, { maximumFractionDigits: 0 }) } <br />\r\n                    - инциденты { incidentFixingTimeSpentChrononFte.toLocaleString(undefined, { maximumFractionDigits: 0 }) } <br />\r\n                    - непроизводственная (текущая) деятельность { nonProjectActivityTimeSpentChrononFte.toLocaleString(undefined, { maximumFractionDigits: 0 }) } <br />\r\n                    <br />\r\n                </Typography>\r\n\r\n                <TimeSheetsByDateIssueChart\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты + Текущая деятельность\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <Typography variant=\"body1\">\r\n                    <RouterLink to={ `/capacityAndQueue` }>\r\n                        Очереди по командам\r\n                    </RouterLink>\r\n                </Typography>\r\n                <br />\r\n\r\n\r\n                <ValueByDatePeriodChart\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <ReengineeringByDatePeriodChart\r\n                    planningPeriodEnd={ xAxisEnd }\r\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Выделенные команды\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ dedicatedTeamsTableContents }\r\n                        columns={ dedicatedTeamsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"body1\">\r\n                    <RouterLink to={ `/projectTeams` }>\r\n                        Проектные команды одним списком\r\n                    </RouterLink>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"body1\">\r\n                    <RouterLink to={ `/projectManagers` }>\r\n                        Менеджеры проектов одним списком\r\n                    </RouterLink>\r\n                </Typography>\r\n                <br />\r\n\r\n                <Typography variant=\"body1\">\r\n                    <RouterLink to={ `/systems` }>\r\n                        Системы одним списком\r\n                    </RouterLink>\r\n                </Typography>\r\n                <br />\r\n\r\n                {/*<Typography variant=\"h6\" noWrap>*/}\r\n                {/*    Кварталы*/}\r\n                {/*</Typography>*/}\r\n\r\n                {/*<div>*/}\r\n                {/*    <DataGridPro*/}\r\n                {/*        rows={ quartersTableContents }*/}\r\n                {/*        columns={ quartersTableColumns }*/}\r\n                {/*        autoHeight*/}\r\n                {/*    />*/}\r\n                {/*</div>*/}\r\n\r\n                {/*<Typography variant=\"h6\" noWrap>*/}\r\n                {/*    Периоды*/}\r\n                {/*</Typography>*/}\r\n\r\n                {/*<div>*/}\r\n                {/*    <DataGridPro*/}\r\n                {/*        rows={ planningPeriodsTableContents }*/}\r\n                {/*        columns={ planningPeriodsTableColumns }*/}\r\n                {/*        autoHeight*/}\r\n                {/*    />*/}\r\n                {/*</div>*/}\r\n                <br />\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchCompanyWithIdOne)(CompanyDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\QuarterDetail.js",["248","249","250"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\r\n\r\nconst fetchQuarterByKey = gql`\r\n    query QuarterByKeyQuery($key: String!) {\r\n        quarterByKey(key: $key) {\r\n            id \r\n            key\r\n            name\r\n            newFunctionsFullTimeEquivalentPrevious28Days\r\n            start\r\n            end\r\n            estimate\r\n            effortPerFunctionPoint\r\n            calculatedFinishDate\r\n            changeRequestCalculatedDateAfterQuarterEndIssueCount\r\n            changeRequestCount\r\n            changeRequestCalculatedDateBeforeQuarterEndShare\r\n            \r\n            dedicatedTeamQuarters {\r\n                id\r\n                estimate\r\n                timeLeft\r\n                dedicatedTeam {\r\n                    id\r\n                    name\r\n                }\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n                newFunctionsTimeSpentPrevious28Days\r\n                newFunctionsFullTimeEquivalentPrevious28Days\r\n                timeSpentForReengineeringPercent\r\n                changeRequestCalculatedDateBeforeQuarterEndShare\r\n            }\r\n            \r\n#            systemQuarters {\r\n#                id\r\n#                estimate\r\n#                timeLeft\r\n#                system {\r\n#                    id\r\n#                    name\r\n#                }\r\n#                effortPerFunctionPoint\r\n#                calculatedFinishDate\r\n#            }\r\n    \r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n                timeSpentCumsumPrediction\r\n                timeSpentWithoutValuePercentCumsum\r\n                timeSpentWithValuePercentCumsum\r\n                timeSpentForReengineeringPercentCumsum\r\n                timeSpentNotForReengineeringPercentCumsum\r\n            }\r\n            \r\n            changeRequests {\r\n                id\r\n                key\r\n                estimate\r\n                timeLeft\r\n                hasValue\r\n                name\r\n                stateCategoryId\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n                newFunctionsTimeSpentPrevious28Days\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass QuarterDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const quarterKey = this.props.match.params.key\r\n        const quarter = this.props.data.quarterByKey\r\n        const newFunctionsFullTimeEquivalentPrevious28Days = quarter.newFunctionsFullTimeEquivalentPrevious28Days\r\n        const estimate = quarter.estimate\r\n        const effortPerFunctionPoint = quarter.effortPerFunctionPoint\r\n        const calculatedFinishDate = quarter.calculatedFinishDate\r\n        const changeRequestCalculatedDateBeforeQuarterEndShare = quarter.changeRequestCalculatedDateBeforeQuarterEndShare\r\n        const planningPeriodStart = quarter.start\r\n        const planningPeriodEnd = quarter.end\r\n\r\n        const dedicatedTeamQuarters = quarter.dedicatedTeamQuarters\r\n        const systemQuarters = quarter.systemQuarters\r\n\r\n        const timeSheetsByDate = quarter.timeSheetsByDate\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const changeRequests = quarter.changeRequests\r\n\r\n        const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\r\n\r\n        const allEdgeDates = [today]\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        if (calculatedFinishDate) {\r\n            allEdgeDates.push(new Date(calculatedFinishDate).getTime())\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates) - fourWeeks\r\n        const xAxisEnd = Math.max(...allEdgeDates) + fourWeeks\r\n\r\n        const dedicatedTeamsTableContents = dedicatedTeamQuarters.slice()\r\n            .sort((a, b) => ((a.dedicatedTeam.name > b.dedicatedTeam.name) ? 1 : ((a.dedicatedTeam.name < b.dedicatedTeam.name) ? -1 : 0)))\r\n            .map(dedicatedTeamQuarter => (\r\n                    {\r\n                        id: dedicatedTeamQuarter.id,\r\n                        estimate: dedicatedTeamQuarter.estimate,\r\n                        timeLeft: dedicatedTeamQuarter.timeLeft,\r\n                        dedicatedTeamId: dedicatedTeamQuarter.dedicatedTeam.id,\r\n                        dedicatedTeamName: dedicatedTeamQuarter.dedicatedTeam.name,\r\n                        effortPerFunctionPoint: dedicatedTeamQuarter.effortPerFunctionPoint,\r\n                        calculatedFinishDate: dedicatedTeamQuarter.calculatedFinishDate,\r\n                        newFunctionsTimeSpentPrevious28Days: dedicatedTeamQuarter.newFunctionsTimeSpentPrevious28Days,\r\n                        newFunctionsFullTimeEquivalentPrevious28Days: dedicatedTeamQuarter.newFunctionsFullTimeEquivalentPrevious28Days,\r\n                        timeSpentForReengineeringPercent: dedicatedTeamQuarter.timeSpentForReengineeringPercent,\r\n                        changeRequestCalculatedDateBeforeQuarterEndShare: dedicatedTeamQuarter.changeRequestCalculatedDateBeforeQuarterEndShare,\r\n                    }\r\n            ))\r\n\r\n        const dedicatedTeamsTableColumns = [\r\n            {\r\n                field: 'dedicatedTeamName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/quarters/${quarterKey}/dedicatedTeams/${ params.getValue(params.id, 'dedicatedTeamId') }` }>\r\n                        { params.getValue(params.id, 'dedicatedTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpentPrevious28Days',\r\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\r\n                headerName: 'Новый функционал: фактический FTE за 28 дней',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'timeSpentForReengineeringPercent',\r\n                headerName: 'Затраты на технологическое перевооружение и исправление проблем (%)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }) ,\r\n            },\r\n            {\r\n                field: 'changeRequestCalculatedDateBeforeQuarterEndShare',\r\n                headerName: 'Прогноз исполнения плана по заявкам на доработку ПО (%)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n        ];\r\n\r\n        // const systemsTableContents = systemQuarters.slice()\r\n        //     .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\r\n        //     .map(systemQuarter => (\r\n        //             {\r\n        //                 id: systemQuarter.id,\r\n        //                 estimate: systemQuarter.estimate,\r\n        //                 timeLeft: systemQuarter.timeLeft,\r\n        //                 systemId: systemQuarter.system.id,\r\n        //                 systemName: systemQuarter.system.name,\r\n        //                 effortPerFunctionPoint: systemQuarter.effortPerFunctionPoint,\r\n        //                 calculatedFinishDate: systemQuarter.calculatedFinishDate\r\n        //             }\r\n        //     ))\r\n        //\r\n        // const systemsTableColumns = [\r\n        //     {\r\n        //         field: 'systemName',\r\n        //         headerName: 'Название',\r\n        //         flex: 1,\r\n        //         renderCell: (params) => (\r\n        //             <RouterLink to={ `/quarters/${quarterId}/systems/${ params.getValue(params.id, 'systemId') }` }>\r\n        //                 { params.getValue(params.id, 'systemName') }\r\n        //             </RouterLink>\r\n        //         ),\r\n        //     },\r\n        //     {\r\n        //         field: 'calculatedFinishDate',\r\n        //         headerName: 'Расчетная дата завершения',\r\n        //         width: 200,\r\n        //         align: 'center',\r\n        //     },\r\n        //     {\r\n        //         field: 'estimate',\r\n        //         headerName: 'Оценка (ч)',\r\n        //         width: 200,\r\n        //         align: 'right',\r\n        //         valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n        //     },\r\n        //     {\r\n        //         field: 'timeLeft',\r\n        //         headerName: 'Осталось (ч)',\r\n        //         width: 200,\r\n        //         align: 'right',\r\n        //         valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n        //     },\r\n        //     {\r\n        //         field: 'effortPerFunctionPoint',\r\n        //         headerName: 'Затраты на ф.т.',\r\n        //         width: 200,\r\n        //         align: 'right',\r\n        //         valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n        //     },\r\n        // ];\r\n\r\n                const changeRequestsTableContents = changeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(changeRequest => (\r\n                    {\r\n                        id: changeRequest.id,\r\n                        key: changeRequest.key,\r\n                        name: changeRequest.name,\r\n                        hasValue: changeRequest.hasValue,\r\n                        estimate: changeRequest.estimate,\r\n                        timeLeft: changeRequest.timeLeft,\r\n                        stateCategoryId: changeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\r\n                        calculatedFinishDate: changeRequest.calculatedFinishDate,\r\n                        newFunctionsTimeSpentPrevious28Days: changeRequest.newFunctionsTimeSpentPrevious28Days\r\n                    }\r\n            ))\r\n\r\n        const changeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpentPrevious28Days',\r\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                    <br />\r\n                    Новый функционал: фактический FTE за 28 дней: { newFunctionsFullTimeEquivalentPrevious28Days.toLocaleString(undefined, { maximumFractionDigits: 0 }) }\r\n                    <br />\r\n                    Прогноз исполнения плана по заявкам на доработку ПО: { (changeRequestCalculatedDateBeforeQuarterEndShare * 100).toLocaleString(undefined, { maximumFractionDigits: 0 }) }%\r\n                    <br />\r\n                    <br />\r\n                </Typography>\r\n\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <ValueByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <ReengineeringByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Выделенные команды\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ dedicatedTeamsTableContents }\r\n                        columns={ dedicatedTeamsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"body1\">\r\n                    <RouterLink to={ `/quarters/${ quarterKey}/projectTeams` }>\r\n                        Проектные команды одним списком\r\n                    </RouterLink>\r\n                </Typography>\r\n                <br />\r\n\r\n                {/*<Typography variant=\"h6\" noWrap>*/}\r\n                {/*    Системы*/}\r\n                {/*</Typography>*/}\r\n                {/*<div>*/}\r\n                {/*    <DataGridPro*/}\r\n                {/*        rows={ systemsTableContents }*/}\r\n                {/*        columns={ systemsTableColumns }*/}\r\n                {/*        autoHeight*/}\r\n                {/*    />*/}\r\n                {/*</div>*/}\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку ПО\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ changeRequestsTableContents }\r\n                        columns={ changeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchQuarterByKey, {\r\n    options: (props) => { return { variables: { key: props.match.params.key }}}\r\n})(QuarterDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamQuarterDetail.js",["251","252","253"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchDedicatedTeamQuarterByQuarterKeyAndDedicatedTeamId = gql`\r\n        query DedicatedTeamQuarterByQuarterKeyAndDedicatedTeamId($quarterKey: String!, $dedicatedTeamId: Int!) {\r\n              dedicatedTeamQuarterByQuarterKeyAndDedicatedTeamId(dedicatedTeamId: $dedicatedTeamId, quarterKey: $quarterKey) {\r\n                    id\r\n                    estimate\r\n                    effortPerFunctionPoint\r\n                    calculatedFinishDate\r\n                    changeRequestCalculatedDateAfterQuarterEndIssueCount\r\n                    changeRequestCount\r\n                    changeRequestCalculatedDateBeforeQuarterEndShare\r\n                    \r\n                    dedicatedTeam {\r\n                        name\r\n                        cio {\r\n                            name\r\n                        }\r\n                        cto {\r\n                            name\r\n                        }\r\n                    }\r\n                    \r\n                    quarter {\r\n                        name\r\n                        start\r\n                        end\r\n                    }\r\n                    \r\n                    timeSheetsByDate {\r\n                        date\r\n                        timeSpentCumsum\r\n                        timeSpentCumsumPrediction\r\n                        timeSpentWithoutValuePercentCumsum\r\n                        timeSpentWithValuePercentCumsum\r\n                        timeSpentForReengineeringPercentCumsum\r\n                        timeSpentNotForReengineeringPercentCumsum\r\n                    }\r\n                    \r\n                    projectTeamQuarters {\r\n                        id\r\n                        estimate\r\n                        timeLeft\r\n                        projectTeam {\r\n                            id\r\n                            name\r\n                        }\r\n                        effortPerFunctionPoint\r\n                        calculatedFinishDate\r\n                        newFunctionsTimeSpentInCurrentQuarter\r\n                        changeRequestCalculatedDateBeforeQuarterEndShare\r\n                    }\r\n                    \r\n                    dedicatedTeamQuarterSystems {\r\n                        id\r\n                        estimate\r\n                        timeLeft\r\n                        system {\r\n                            id\r\n                            name\r\n                        }\r\n                        effortPerFunctionPoint\r\n                        calculatedFinishDate\r\n                    }\r\n                    \r\n                    changeRequests {\r\n                        id\r\n                        key\r\n                        estimate\r\n                        timeLeft\r\n                        hasValue\r\n                        name\r\n                        stateCategoryId\r\n                        effortPerFunctionPoint\r\n                        calculatedFinishDate\r\n                        newFunctionsTimeSpentInCurrentQuarter\r\n                    }\r\n              }\r\n        }\r\n`;\r\n\r\nclass DedicatedTeamQuarterDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const quarterKey = this.props.match.params.quarterKey\r\n        const dedicatedTeamId = this.props.match.params.dedicatedTeamId\r\n\r\n        const dedicatedTeamQuarter = this.props.data.dedicatedTeamQuarterByQuarterKeyAndDedicatedTeamId\r\n\r\n        const dedicatedTeamName = dedicatedTeamQuarter.dedicatedTeam.name\r\n        const cioName = dedicatedTeamQuarter.dedicatedTeam.cio.name\r\n        const ctoName = dedicatedTeamQuarter.dedicatedTeam.cto.name\r\n        const estimate = dedicatedTeamQuarter.estimate\r\n        const effortPerFunctionPoint = dedicatedTeamQuarter.effortPerFunctionPoint\r\n        const calculatedFinishDate = dedicatedTeamQuarter.calculatedFinishDate\r\n        const changeRequestCalculatedDateBeforeQuarterEndShare = dedicatedTeamQuarter.changeRequestCalculatedDateBeforeQuarterEndShare\r\n        const quarterName = dedicatedTeamQuarter.quarter.name\r\n        const quarterStart = dedicatedTeamQuarter.quarter.start\r\n        const quarterEnd = dedicatedTeamQuarter.quarter.end\r\n        const projectTeamQuarters = dedicatedTeamQuarter.projectTeamQuarters\r\n        const dedicatedTeamQuarterSystems = dedicatedTeamQuarter.dedicatedTeamQuarterSystems\r\n        const changeRequests = dedicatedTeamQuarter.changeRequests\r\n        const positions = dedicatedTeamQuarter.positions\r\n\r\n        const timeSheetsByDate = dedicatedTeamQuarter.timeSheetsByDate\r\n\r\n        const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\r\n        const xAxisStart = new Date(quarterStart).getTime() - fourWeeks\r\n        const xAxisEnd = new Date(quarterEnd).getTime() + fourWeeks\r\n\r\n        const systemsTableContents = dedicatedTeamQuarterSystems.slice()\r\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\r\n            .map(dedicatedTeamQuarterSystem => (\r\n                    {\r\n                        id: dedicatedTeamQuarterSystem.id,\r\n                        estimate: dedicatedTeamQuarterSystem.estimate,\r\n                        timeLeft: dedicatedTeamQuarterSystem.timeLeft,\r\n                        systemId: dedicatedTeamQuarterSystem.system.id,\r\n                        systemName: dedicatedTeamQuarterSystem.system.name,\r\n                        effortPerFunctionPoint: dedicatedTeamQuarterSystem.effortPerFunctionPoint,\r\n                        calculatedFinishDate: dedicatedTeamQuarterSystem.calculatedFinishDate,\r\n                    }\r\n            ))\r\n\r\n        const systemsTableColumns = [\r\n            {\r\n                field: 'systemName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                // renderCell: (params) => (\r\n                //     <RouterLink to={ `/quarters/${ quarterKey }/dedicatedTeams/${ dedicatedTeamId }/systems/${ params.getValue(params.id, 'systemId') }` }>\r\n                //         { params.getValue(params.id, 'systemName') }\r\n                //     </RouterLink>\r\n                // ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        const projectTeamsTableContents = projectTeamQuarters.slice()\r\n            .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\r\n            .map(projectTeamQuarter => (\r\n                    {\r\n                        id: projectTeamQuarter.id,\r\n                        estimate: projectTeamQuarter.estimate,\r\n                        timeLeft: projectTeamQuarter.timeLeft,\r\n                        projectTeamId: projectTeamQuarter.projectTeam.id,\r\n                        projectTeamName: projectTeamQuarter.projectTeam.name,\r\n                        effortPerFunctionPoint: projectTeamQuarter.effortPerFunctionPoint,\r\n                        calculatedFinishDate: projectTeamQuarter.calculatedFinishDate,\r\n                        newFunctionsTimeSpentInCurrentQuarter: projectTeamQuarter.newFunctionsTimeSpentInCurrentQuarter,\r\n                        changeRequestCalculatedDateBeforeQuarterEndShare: projectTeamQuarter.changeRequestCalculatedDateBeforeQuarterEndShare,\r\n                    }\r\n            ))\r\n\r\n        const projectTeamsTableColumns = [\r\n            {\r\n                field: 'projectTeamName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/quarters/${ quarterKey }/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\r\n                        { params.getValue(params.id, 'projectTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpentInCurrentQuarter',\r\n                headerName: 'Фактические трудозатраты с начала квартала (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'changeRequestCalculatedDateBeforeQuarterEndShare',\r\n                headerName: 'Прогноз исполнения плана по заявкам на доработку ПО (%)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n        ];\r\n\r\n        const changeRequestsTableContents = changeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(changeRequest => (\r\n                    {\r\n                        id: changeRequest.id,\r\n                        key: changeRequest.key,\r\n                        name: changeRequest.name,\r\n                        hasValue: changeRequest.hasValue,\r\n                        estimate: changeRequest.estimate,\r\n                        timeLeft: changeRequest.timeLeft,\r\n                        stateCategoryId: changeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\r\n                        calculatedFinishDate: changeRequest.calculatedFinishDate,\r\n                        newFunctionsTimeSpentInCurrentQuarter: changeRequest.newFunctionsTimeSpentInCurrentQuarter\r\n                    }\r\n            ))\r\n\r\n        const changeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpentInCurrentQuarter',\r\n                headerName: 'Фактические трудозатраты с начала квартала (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Выделенная команда { dedicatedTeamName }\r\n                    <br />\r\n                    Бизнес-партнер { cioName }\r\n                    <br />\r\n                    Руководитель разработки (CTO) { ctoName }\r\n                    <br />\r\n                    Период планирования { quarterName } ({ quarterStart }-{ quarterEnd })\r\n                    <br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                    <br />\r\n                    Прогноз исполнения плана по заявкам на доработку ПО: { (changeRequestCalculatedDateBeforeQuarterEndShare * 100).toLocaleString(undefined, { maximumFractionDigits: 0 }) }%\r\n                    <br />\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ quarterEnd }\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <ValueByDatePeriodChart\r\n                    planningPeriodEnd={ quarterEnd }\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <ReengineeringByDatePeriodChart\r\n                    planningPeriodEnd={ quarterEnd }\r\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Проектные команды\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ projectTeamsTableContents }\r\n                        columns={ projectTeamsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemsTableContents }\r\n                        columns={ systemsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку ПО\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ changeRequestsTableContents }\r\n                        columns={ changeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                {/*<br />*/}\r\n                {/*<Typography variant=\"h6\" noWrap>*/}\r\n                {/*    Команда*/}\r\n                {/*</Typography>*/}\r\n                {/*<div>*/}\r\n                {/*    <DataGridPro*/}\r\n                {/*        rows={ positionsTableContents }*/}\r\n                {/*        columns={ positionsTableColumns }*/}\r\n                {/*        autoHeight*/}\r\n                {/*    />*/}\r\n                {/*</div>*/}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchDedicatedTeamQuarterByQuarterKeyAndDedicatedTeamId, {\r\n    options: (props) => { return { variables: { quarterKey: props.match.params.quarterKey, dedicatedTeamId: props.match.params.dedicatedTeamId }}}\r\n})(DedicatedTeamQuarterDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamQuarterDetail.js",["254","255","256","257"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchProjectTeamQuarterByQuarterKeyAndProjectTeamId = gql`\r\n   query ProjectTeamQuarterByQuarterKeyAndProjectTeamId($quarterKey: String!, $projectTeamId: Int!) {\r\n          projectTeamQuarterByQuarterKeyAndProjectTeamId(projectTeamId: $projectTeamId, quarterKey: $quarterKey) {\r\n                id\r\n                estimate\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n                changeRequestCalculatedDateAfterQuarterEndIssueCount\r\n                changeRequestCount\r\n                changeRequestCalculatedDateBeforeQuarterEndShare\r\n                newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare\r\n                \r\n                projectTeam {\r\n                    name\r\n                    \r\n                    changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter {\r\n                        id\r\n                        changeRequest {\r\n                            id\r\n                            key\r\n                            estimate\r\n                            timeLeft\r\n                            hasValue\r\n                            name\r\n                            stateCategoryId\r\n                            effortPerFunctionPoint\r\n                            calculatedFinishDate\r\n                            newFunctionsTimeSpentInCurrentQuarter\r\n                        }\r\n                    }\r\n                    \r\n                    personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter {\r\n                        id\r\n                        person {\r\n                            id\r\n                            key\r\n                            name\r\n                      }\r\n                      newFunctionsTimeSpentInCurrentQuarter\r\n                    }\r\n                }\r\n                quarter {\r\n                    key\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                    timeSpentWithoutValuePercentCumsum\r\n                    timeSpentWithValuePercentCumsum\r\n                    timeSpentForReengineeringPercentCumsum\r\n                    timeSpentNotForReengineeringPercentCumsum\r\n                }\r\n                \r\n                projectTeamQuarterSystems {\r\n                  id\r\n                  estimate\r\n                  timeLeft\r\n                  system {\r\n                    id\r\n                    name\r\n                  }\r\n                  effortPerFunctionPoint\r\n                  calculatedFinishDate\r\n                }\r\n                \r\n                changeRequests {\r\n                    id\r\n                    key\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategoryId\r\n                    effortPerFunctionPoint\r\n                    calculatedFinishDate\r\n                    newFunctionsTimeSpentInCurrentQuarter\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass ProjectTeamQuarterDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const quarterKey = this.props.match.params.quarterKey\r\n        const projectTeamId = this.props.match.params.projectTeamId\r\n        const projectTeamQuarter = this.props.data.projectTeamQuarterByQuarterKeyAndProjectTeamId\r\n        const projectTeamName = projectTeamQuarter.projectTeam.name\r\n        const changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter = projectTeamQuarter.projectTeam.changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter\r\n        const personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter = projectTeamQuarter.projectTeam.personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter\r\n        const estimate = projectTeamQuarter.estimate\r\n        const effortPerFunctionPoint = projectTeamQuarter.effortPerFunctionPoint\r\n        const calculatedFinishDate = projectTeamQuarter.calculatedFinishDate\r\n        const changeRequestCalculatedDateBeforeQuarterEndShare = projectTeamQuarter.changeRequestCalculatedDateBeforeQuarterEndShare\r\n        const newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare = projectTeamQuarter.newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare\r\n        const quarterName = projectTeamQuarter.quarter.name\r\n        const quarterStart = projectTeamQuarter.quarter.start\r\n        const quarterEnd = projectTeamQuarter.quarter.end\r\n        const projectTeamQuarterSystems = projectTeamQuarter.projectTeamQuarterSystems\r\n        const changeRequests = projectTeamQuarter.changeRequests\r\n        const positions = projectTeamQuarter.positions\r\n\r\n        const timeSheetsByDate = projectTeamQuarter.timeSheetsByDate\r\n\r\n        const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\r\n        const xAxisStart = new Date(quarterStart).getTime() - fourWeeks\r\n        const xAxisEnd = new Date(quarterEnd).getTime() + fourWeeks\r\n\r\n        const systemsTableContents = projectTeamQuarterSystems.slice()\r\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\r\n            .map(projectTeamQuarterSystem => (\r\n                    {\r\n                        id: projectTeamQuarterSystem.id,\r\n                        estimate: projectTeamQuarterSystem.estimate,\r\n                        timeLeft: projectTeamQuarterSystem.timeLeft,\r\n                        systemId: projectTeamQuarterSystem.system.id,\r\n                        systemName: projectTeamQuarterSystem.system.name,\r\n                        effortPerFunctionPoint: projectTeamQuarterSystem.effortPerFunctionPoint,\r\n                        calculatedFinishDate: projectTeamQuarterSystem.calculatedFinishDate\r\n                    }\r\n            ))\r\n\r\n        const systemsTableColumns = [\r\n            {\r\n                field: 'systemName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                // renderCell: (params) => (\r\n                //     <RouterLink to={ `/quarters/${ quarterKey }/projectTeams/${ projectTeamId }/systems/${ params.getValue(params.id, 'systemId') }` }>\r\n                //         { params.getValue(params.id, 'systemName') }\r\n                //     </RouterLink>\r\n                // ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        const changeRequestsTableContents = changeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(changeRequest => (\r\n                    {\r\n                        id: changeRequest.id,\r\n                        key: changeRequest.key,\r\n                        name: changeRequest.name,\r\n                        hasValue: changeRequest.hasValue,\r\n                        estimate: changeRequest.estimate,\r\n                        timeLeft: changeRequest.timeLeft,\r\n                        stateCategoryId: changeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\r\n                        calculatedFinishDate: changeRequest.calculatedFinishDate,\r\n                        newFunctionsTimeSpentInCurrentQuarter: changeRequest.newFunctionsTimeSpentInCurrentQuarter\r\n                    }\r\n            ))\r\n\r\n        const changeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpentInCurrentQuarter',\r\n                headerName: 'Фактические трудозатраты с начала квартала (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        const changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarterTableContents = changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.slice()\r\n            .sort((a, b) =>  (\r\n                (a.changeRequest.stateCategoryId === 3 && b.changeRequest.stateCategoryId !== 3) ? 1 : (\r\n                    (a.changeRequest.stateCategoryId === 3 && b.changeRequest.stateCategoryId === 3) ? 0 : (\r\n                        (a.changeRequest.stateCategoryId !== 3 && b.changeRequest.stateCategoryId === 3) ? -1 : (\r\n                            b.changeRequest.timeLeft - a.changeRequest.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter => (\r\n                    {\r\n                        id: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.id,\r\n                        key: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.key,\r\n                        name: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.name,\r\n                        hasValue: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.hasValue,\r\n                        estimate: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.estimate,\r\n                        timeLeft: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.timeLeft,\r\n                        stateCategoryId: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.effortPerFunctionPoint,\r\n                        calculatedFinishDate: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.calculatedFinishDate,\r\n                        newFunctionsTimeSpentInCurrentQuarter: changeRequestWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarter.changeRequest.newFunctionsTimeSpentInCurrentQuarter\r\n                    }\r\n            ))\r\n\r\n        const changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarterTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'key') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpentInCurrentQuarter',\r\n                headerName: 'Фактические трудозатраты с начала квартала (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\r\n            },\r\n        ];\r\n\r\n        const personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarterTableContents = personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter.slice()\r\n            .sort((a, b) =>  (\r\n                (a.newFunctionsTimeSpentInCurrentQuarter < b.newFunctionsTimeSpentInCurrentQuarter) ? 1 : (\r\n                    (a.newFunctionsTimeSpentInCurrentQuarter > b.newFunctionsTimeSpentInCurrentQuarter) ? -1 : 0\r\n                )\r\n            ))\r\n            .map(personWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter => (\r\n                    {\r\n                        id: personWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter.id,\r\n                        key: personWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter.key,\r\n                        name: personWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter.person.name,\r\n                        newFunctionsTimeSpentInCurrentQuarter: personWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarter.newFunctionsTimeSpentInCurrentQuarter,\r\n                    }\r\n            ))\r\n\r\n        const personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarterTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'ФИО',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpentInCurrentQuarter',\r\n                headerName: 'Затрачено времени (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Проектная команда { projectTeamName }\r\n                    <br />\r\n                    Период планирования { quarterName } ({ quarterStart }-{ quarterEnd })\r\n                    <br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                    <br />\r\n                    Прогноз исполнения плана по заявкам на доработку ПО: { (changeRequestCalculatedDateBeforeQuarterEndShare * 100).toLocaleString(undefined, { maximumFractionDigits: 0 }) }%\r\n                    <br />\r\n                    Процент трудозатрат на задачи квартала { (newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare * 100).toLocaleString(undefined, { maximumFractionDigits: 0 }) }%\r\n                    <br />\r\n                    <br />\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ quarterEnd }\r\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    calculatedFinishDate={ calculatedFinishDate }\r\n                />\r\n\r\n                <ValueByDatePeriodChart\r\n                    planningPeriodEnd={ quarterEnd }\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <ReengineeringByDatePeriodChart\r\n                    planningPeriodEnd={ quarterEnd }\r\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemsTableContents }\r\n                        columns={ systemsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n               <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку ПО\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ changeRequestsTableContents }\r\n                        columns={ changeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку ПО, по которым шла работа, но которые не входят в текущий квартал\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarterTableContents }\r\n                        columns={ changeRequestsWithTimeSpentInCurrentQuarterWhileItIsNotInCurrentQuarterTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Сотрудники, выполнявшие работы по заявкам на доработку ПО, которые не входят в текущий квартал\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarterTableContents }\r\n                        columns={ personsWithTimeSpentForChangeRequestsInCurrentQuarterWhileChangeRequestNotInCurrentQuarterTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchProjectTeamQuarterByQuarterKeyAndProjectTeamId, {\r\n    options: (props) => { return { variables: { quarterKey: props.match.params.quarterKey, projectTeamId: props.match.params.projectTeamId }}}\r\n})(ProjectTeamQuarterDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PersonSystemChangeRequestDetail.js",["258","259","260"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchPersonSystemChangeRequestTimeSheetsByDateByPersonKeyAndSystemChangeRequestKey = gql`\r\n    query PersonSystemChangeRequestTimeSheetsByDateByPersonKeyAndSystemChangeRequestKey($personKey: String!, $systemChangeRequestKey: String!) {\r\n        personSystemChangeRequestTimeSheetsByDateByPersonKeyAndSystemChangeRequestKey(personKey: $personKey, systemChangeRequestKey: $systemChangeRequestKey) {\r\n            id\r\n            date\r\n            timeSpent\r\n        }\r\n    }\r\n`;\r\n\r\nclass PersonSystemChangeRequestDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const timeSheetsByDate = this.props.data.personSystemChangeRequestTimeSheetsByDateByPersonKeyAndSystemChangeRequestKey\r\n\r\n        const timeSheetsTableContents = timeSheetsByDate.slice()\r\n            .sort((a, b) => ((a.date > b.date) ? 1 : ((a.date < b.date) ? -1 : 0)))\r\n            .map(timeSheetRecord => (\r\n                    {\r\n                        id: timeSheetRecord.id,\r\n                        date: timeSheetRecord.date,\r\n                        timeSpent: timeSheetRecord.timeSpent,\r\n                    }\r\n            ))\r\n\r\n        const timeSheetsTableColumns = [\r\n            {\r\n                field: 'date',\r\n                headerName: 'Дата',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'timeSpent',\r\n                headerName: 'Списано (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Тайм-шиты\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ timeSheetsTableContents }\r\n                        columns={ timeSheetsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPersonSystemChangeRequestTimeSheetsByDateByPersonKeyAndSystemChangeRequestKey, {\r\n    options: (props) => { return { variables: { systemChangeRequestKey: props.match.params.systemChangeRequestKey, personKey: props.match.params.personKey }}}\r\n})(PersonSystemChangeRequestDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\QuarterProjectTeamList.js",["261"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\r\n\r\nconst fetchQuarterProjectTeamsByQuarterKey = gql`\r\n    query QuarterProjectTeamsByQuarterKey($quarterKey: String!) {\r\n        quarterProjectTeamsByQuarterKey(quarterKey: $quarterKey) {\r\n            id\r\n            estimate\r\n            timeLeft\r\n            \r\n            calculatedFinishDate\r\n            newFunctionsFullTimeEquivalentPrevious28Days\r\n            newFunctionsTimeSpentPrevious28Days\r\n            newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare\r\n            changeRequestCalculatedDateAfterQuarterEndIssueCount\r\n            changeRequestCount\r\n            changeRequestCalculatedDateBeforeQuarterEndShare\r\n        \r\n            projectTeam {\r\n                id\r\n                name\r\n                newFunctionsFullTimeEquivalentPrevious28Days\r\n                projectManager {\r\n                    id\r\n                    name\r\n                }\r\n\r\n                dedicatedTeam {\r\n                    id\r\n                    name\r\n                    \r\n                    cio {\r\n                        id\r\n                        key\r\n                        name\r\n                    }\r\n                    cto {\r\n                        id\r\n                        key\r\n                        name\r\n                    }                   \r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass QuarterProjectTeamList extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const quarterKey = this.props.match.params.quarterKey\r\n        const quarterProjectTeams = this.props.data.quarterProjectTeamsByQuarterKey\r\n\r\n        const quarterProjectTeamsTableContents = quarterProjectTeams.slice()\r\n            .sort((a, b) => ((a.projectTeam.name > b.projectTeam.name) ? 1 : ((a.projectTeam.name < b.projectTeam.name) ? -1 : 0)))\r\n            .map(projectTeamQuarter => (\r\n                    {\r\n                        id: projectTeamQuarter.id,\r\n                        projectTeamId: projectTeamQuarter.projectTeam.id,\r\n                        name: projectTeamQuarter.projectTeam.name,\r\n                        projectManagerName: projectTeamQuarter.projectTeam.projectManager.name,\r\n                        cioName: projectTeamQuarter.projectTeam.dedicatedTeam.cio.name,\r\n                        ctoName: projectTeamQuarter.projectTeam.dedicatedTeam.cto.name,\r\n                        changeRequestCalculatedDateAfterQuarterEndIssueCount: projectTeamQuarter.changeRequestCalculatedDateAfterQuarterEndIssueCount,\r\n                        projectTeamQuarterNewFunctionsFullTimeEquivalentPrevious28Days: projectTeamQuarter.newFunctionsFullTimeEquivalentPrevious28Days,\r\n                        projectTeamNewFunctionsFullTimeEquivalentPrevious28Days: projectTeamQuarter.projectTeam.newFunctionsFullTimeEquivalentPrevious28Days,\r\n                        changeRequestCalculatedDateBeforeQuarterEndShare: projectTeamQuarter.changeRequestCalculatedDateBeforeQuarterEndShare,\r\n                        newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare: projectTeamQuarter.newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare\r\n                    }\r\n            ))\r\n\r\n        const quarterProjectTeamsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/quarters/${ quarterKey }/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'projectManagerName',\r\n                headerName: 'Руководитель проекта',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'cioName',\r\n                headerName: 'Бизнес-партнер',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'ctoName',\r\n                headerName: 'Руководитель разработки (CTO)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'changeRequestCalculatedDateBeforeQuarterEndShare',\r\n                headerName: 'Прогноз исполнения плана по заявкам на доработку ПО (%)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare',\r\n                headerName: 'Процент трудозатрат на задачи квартала (%)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Проектные команды\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ quarterProjectTeamsTableContents }\r\n                        columns={ quarterProjectTeamsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchQuarterProjectTeamsByQuarterKey, {\r\n    options: (props) => { return { variables: { quarterKey: props.match.params.quarterKey }}}\r\n})(QuarterProjectTeamList);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemList.js",["262"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\r\n\r\nconst fetchSystems = gql`\r\n    query Systems {\r\n        systems {\r\n            id\r\n            estimate\r\n            timeLeft\r\n            name\r\n            newFunctionsFullTimeEquivalentPrevious28Days\r\n            newFunctionsTimeSpentPrevious28Days\r\n        }\r\n    }\r\n`;\r\n\r\nclass SystemList extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const systems = this.props.data.systems\r\n\r\n        const systemsTableContents = systems.slice()\r\n            .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\r\n            .filter(system => (\r\n                   system.newFunctionsFullTimeEquivalentPrevious28Days > 0\r\n                )\r\n            )\r\n            .map(system => (\r\n                    {\r\n                        id: system.id,\r\n                        name: system.name,\r\n                        newFunctionsFullTimeEquivalentPrevious28Days: system.newFunctionsFullTimeEquivalentPrevious28Days,\r\n                    }\r\n            ))\r\n\r\n        const systemsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/systems/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\r\n                headerName: 'Новый функционал: фактический FTE за 28 дней',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Системы\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemsTableContents }\r\n                        columns={ systemsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchSystems)(SystemList);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemDetail.js",["263","264","265","266","267","268"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\r\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\";\r\n\r\nconst fetchSystemById = gql`\r\n    query SystemById($id: Int!) {\r\n        systemById(id: $id) {\r\n            id\r\n            estimate\r\n            timeLeft\r\n            name\r\n            newFunctionsFullTimeEquivalentPrevious28Days\r\n            newFunctionsTimeSpentPrevious28Days\r\n            \r\n            persons {\r\n                id\r\n                \r\n                person {\r\n                    id\r\n                    key\r\n                    name\r\n                    isActive\r\n                    newFunctionsFullTimeEquivalentPrevious28Days\r\n                }\r\n                \r\n                newFunctionsTimeSpent\r\n                \r\n                newFunctionsFullTimeEquivalentPrevious28Days\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass SystemDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const systemId = this.props.match.params.systemId\r\n        const system = this.props.data.systemById\r\n\r\n        const systemName = system.name\r\n        const estimate = system.estimate\r\n\r\n        const persons = system.persons\r\n\r\n        const personsTableContents = persons.slice()\r\n            .sort((a, b) =>  (\r\n                (a.newFunctionsFullTimeEquivalentPrevious28Days > b.newFunctionsFullTimeEquivalentPrevious28Days) ? -1 : (\r\n                    (a.newFunctionsFullTimeEquivalentPrevious28Days == b.newFunctionsFullTimeEquivalentPrevious28Days) ? 0 : 1\r\n                )\r\n            ))\r\n            .map(person => (\r\n                    {\r\n                        id: person.id,\r\n                        personId: person.person.id,\r\n                        key: person.person.key,\r\n                        name: person.person.name,\r\n                        newFunctionsTimeSpent: person.newFunctionsTimeSpent,\r\n                        newFunctionsFullTimeEquivalentPrevious28DaysTotal: person.person.newFunctionsFullTimeEquivalentPrevious28Days,\r\n                        newFunctionsFullTimeEquivalentPrevious28Days: person.newFunctionsFullTimeEquivalentPrevious28Days,\r\n                        isActive: person.person.isActive,\r\n                    }\r\n            ))\r\n\r\n        const personsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'ФИО',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/persons/${ params.getValue(params.id, 'key') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'isActive',\r\n                headerName: 'Активный',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    params.getValue(params.id, 'isActive') ? \"Да\" : \"Нет\"\r\n                ),\r\n            },\r\n            {\r\n                field: 'newFunctionsTimeSpent',\r\n                headerName: 'Новый функционал: списано всего (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\r\n            },\r\n            {\r\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\r\n                headerName: 'Новый функционал: фактический FTE за 28 дней на эту систему',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n            {\r\n                field: 'newFunctionsFullTimeEquivalentPrevious28DaysTotal',\r\n                headerName: 'Новый функционал: фактический FTE за 28 дней на все системы',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Система { systemName } &nbsp;\r\n                    <br />\r\n                    <br />\r\n                </Typography>\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Команда\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ personsTableContents }\r\n                        columns={ personsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchSystemById, {\r\n    options: (props) => { return { variables: { id: props.match.params.systemId }}}\r\n})(SystemDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectManagerList.js",["269"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport,} from '@mui/x-data-grid-pro';\r\n\r\nconst fetchProjectManagers = gql`\r\n    query ProjectManagers {\r\n        projectManagers {\r\n            id\r\n            \r\n            name\r\n            \r\n            isActive\r\n            \r\n            analysisTimeSpentChrononFte\r\n            developmentTimeSpentChrononFte\r\n            testingTimeSpentChrononFte\r\n            managementTimeSpentChrononFte\r\n            incidentFixingTimeSpentChrononFte\r\n            nonProjectActivityTimeSpentChrononFte\r\n            \r\n            timeSpentChrononFte\r\n        }\r\n    }\r\n`;\r\n\r\nfunction ToolBarWithExport() {\r\n  return (\r\n    <GridToolbarContainer>\r\n        <GridToolbarExport\r\n          csvOptions={{\r\n              delimiter: \";\",\r\n              utf8WithBom: true,\r\n          }}\r\n        />\r\n\r\n\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nclass ProjectManagerList extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const projectManagers = this.props.data.projectManagers\r\n\r\n        const projectManagersTableContents = projectManagers.slice()\r\n            .sort((a, b) => ((a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : ((a.timeSpentChrononFte < b.timeSpentChrononFte) ? 1 : 0)))\r\n            .map(projectManager => (\r\n                    {\r\n                        id: projectManager.id,\r\n                        name: projectManager.name,\r\n                        isActive: projectManager.isActive,\r\n                        timeSpentChrononFte: projectManager.timeSpentChrononFte,\r\n                        analysisTimeSpentChrononFte: projectManager.analysisTimeSpentChrononFte,\r\n                        developmentTimeSpentChrononFte: projectManager.developmentTimeSpentChrononFte,\r\n                        testingTimeSpentChrononFte: projectManager.testingTimeSpentChrononFte,\r\n                        managementTimeSpentChrononFte: projectManager.managementTimeSpentChrononFte,\r\n                        incidentFixingTimeSpentChrononFte: projectManager.incidentFixingTimeSpentChrononFte,\r\n                        nonProjectActivityTimeSpentChrononFte: projectManager.nonProjectActivityTimeSpentChrononFte,\r\n                    }\r\n            ))\r\n\r\n        const projectManagersTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'ФИО',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectManagers/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'isActive',\r\n                headerName: 'Работает',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'timeSpentChrononFte',\r\n                headerName: 'FTE команд за последний период',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n            {\r\n                field: 'analysisTimeSpentChrononFte',\r\n                headerName: 'Аналитика, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n            {\r\n                field: 'developmentTimeSpentChrononFte',\r\n                headerName: 'Разработка, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n            {\r\n                field: 'testingTimeSpentChrononFte',\r\n                headerName: 'Тестирование, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n            {\r\n                field: 'managementTimeSpentChrononFte',\r\n                headerName: 'Управление, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n            {\r\n                field: 'incidentFixingTimeSpentChrononFte',\r\n                headerName: 'Устранение инцидентов, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n            {\r\n                field: 'nonProjectActivityTimeSpentChrononFte',\r\n                headerName: 'Непроизводственная (текущая) деятельность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Менеджеры проектов\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ projectManagersTableContents }\r\n                        columns={ projectManagersTableColumns }\r\n                        autoHeight\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchProjectManagers)(ProjectManagerList);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectManagerDetail.js",["270","271"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchProjectManagerById = gql`\r\n            query ProjectManagerById($id: Int) {\r\n                projectManagerById(id: $id) {\r\n                    id\r\n                    \r\n                    name\r\n                    \r\n                    isActive\r\n                    \r\n                    months {\r\n                        id\r\n                        month\r\n                        timeSpentFte\r\n                        \r\n                        analysisTimeSpentFte\r\n                        developmentTimeSpentFte\r\n                        testingTimeSpentFte\r\n                        managementTimeSpentFte\r\n                        incidentFixingTimeSpentFte\r\n                        nonProjectActivityTimeSpentFte\r\n                        \r\n                        workingDaysInMonthOccured\r\n                    }\r\n                    \r\n                    projectTeams {\r\n                        id\r\n                        name\r\n                        timeSpentChrononFte\r\n                    }\r\n                }\r\n            }\r\n`;\r\n\r\nfunction ToolBarWithExport() {\r\n  return (\r\n    <GridToolbarContainer>\r\n        <GridToolbarExport\r\n          csvOptions={{\r\n              delimiter: \";\",\r\n              utf8WithBom: true,\r\n          }}\r\n        />\r\n\r\n\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nclass ProjectManagerDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const projectManagerId = this.props.match.params.id\r\n        const projectManager = this.props.data.projectManagerById\r\n        const months = projectManager.months\r\n        const projectTeams = projectManager.projectTeams\r\n\r\n        const monthsTableContents = months.slice()\r\n            .sort((a, b) => ((a.month < b.month) ? 1 : ((a.month > b.month) ? -1 : 0)))\r\n            .map(month => (\r\n                    {\r\n                        id: month.id,\r\n                        month: month.month,\r\n                        timeSpentFte: month.timeSpentFte,\r\n                        analysisTimeSpentFte: month.analysisTimeSpentFte,\r\n                        developmentTimeSpentFte: month.developmentTimeSpentFte,\r\n                        testingTimeSpentFte: month.testingTimeSpentFte,\r\n                        managementTimeSpentFte: month.managementTimeSpentFte,\r\n                        incidentFixingTimeSpentFte: month.incidentFixingTimeSpentFte,\r\n                        nonProjectActivityTimeSpentFte: month.nonProjectActivityTimeSpentFte,\r\n                        workingDaysInMonthOccured: month.workingDaysInMonthOccured,\r\n                    }\r\n            ))\r\n\r\n        const monthsTableColumns = [\r\n            {\r\n                field: 'month',\r\n                headerName: 'Год-месяц',\r\n                width: 200,\r\n            },\r\n            {\r\n                field: 'timeSpentFte',\r\n                headerName: 'Трудозатраты (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'analysisTimeSpentFte',\r\n                headerName: 'Трудозатраты аналитики (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'developmentTimeSpentFte',\r\n                headerName: 'Трудозатраты разработки (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'testingTimeSpentFte',\r\n                headerName: 'Трудозатраты тестирования (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'managementTimeSpentFte',\r\n                headerName: 'Трудозатраты управление (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'incidentFixingTimeSpentFte',\r\n                headerName: 'Трудозатраты инциденты (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'nonProjectActivityTimeSpentFte',\r\n                headerName: 'Непроизводственная (текущая) деятельность (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'workingDaysInMonthOccured',\r\n                headerName: 'Рабочих дней в месяце',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        const projectTeamsTableContents = projectTeams.slice()\r\n            .sort((a, b) => ((a.timeSpentChrononFte < b.timeSpentChrononFte) ? 1 : ((a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : 0)))\r\n            .map(projectTeam => (\r\n                    {\r\n                        id: projectTeam.id,\r\n                        name: projectTeam.name,\r\n                        timeSpentChrononFte: projectTeam.timeSpentChrononFte,\r\n                    }\r\n            ))\r\n\r\n        const projectTeamsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                flex: 1,\r\n                headerName: 'Название',\r\n               renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'timeSpentChrononFte',\r\n                headerName: 'Трудомощность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Трудозатраты по месяцам\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ monthsTableContents }\r\n                        columns={ monthsTableColumns }\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n                <br />\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Команды\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ projectTeamsTableContents }\r\n                        columns={ projectTeamsTableColumns }\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchProjectManagerById, {\r\n    options: (props) => { return { variables: { id: props.match.params.id }}}\r\n})(ProjectManagerDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PersonListByProjectTeamIdAndMonth.js",["272","273","274","275"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport {graphql} from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\nconst fetchPersonListByProjectTeamIdAndMonth = gql`\r\n    query PersonsByProjectTeamIdAndMonth($projectTeamId: Int, $month: Date) {\r\n        personsByProjectTeamIdAndMonth(projectTeamId: $projectTeamId, month: $month) {\r\n            analysisTimeSpentMonthFte\r\n            developmentTimeSpentMonthFte\r\n            testingTimeSpentMonthFte\r\n            managementTimeSpentMonthFte\r\n            incidentFixingTimeSpentMonthFte\r\n            timeSpentMonthFte\r\n            person {\r\n                id\r\n                key\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass PersonListByProjectTeamIdAndMonth extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const month = this.props.match.params.month\r\n        const personsByProjectTeamIdAndMonth = this.props.data.personsByProjectTeamIdAndMonth\r\n\r\n        const personsTableContents = personsByProjectTeamIdAndMonth.slice()\r\n            .sort((a, b) =>  (\r\n                (a.person.name > b.person.name) ? 1 : (\r\n                    (a.person.name == b.person.name) ? 0 : -1\r\n                )\r\n            ))\r\n            .map(person => (\r\n                    {\r\n                        id: person.person.id,\r\n                        personKey: person.person.key,\r\n                        personName: person.person.name,\r\n                        analysisTimeSpentMonthFte: person.analysisTimeSpentMonthFte,\r\n                        developmentTimeSpentMonthFte: person.developmentTimeSpentMonthFte,\r\n                        testingTimeSpentMonthFte: person.testingTimeSpentMonthFte,\r\n                        managementTimeSpentMonthFte: person.managementTimeSpentMonthFte,\r\n                        incidentFixingTimeSpentMonthFte: person.incidentFixingTimeSpentMonthFte,\r\n                        timeSpentMonthFte: person.timeSpentMonthFte,\r\n                    }\r\n            ))\r\n         const personsTableColumns = [\r\n             {\r\n                field: 'personName',\r\n                headerName: 'ФИО',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/persons/${ params.getValue(params.id, 'personKey') }/month/${ month }` }>\r\n                        { params.getValue(params.id, 'personName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'timeSpentMonthFte',\r\n                headerName: 'Трудозатраты (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'analysisTimeSpentMonthFte',\r\n                headerName: 'Трудозатраты аналитики (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'developmentTimeSpentMonthFte',\r\n                headerName: 'Трудозатраты разработки (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'testingTimeSpentMonthFte',\r\n                headerName: 'Трудозатраты тестирования (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'managementTimeSpentMonthFte',\r\n                headerName: 'Трудозатраты управление (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n            {\r\n                field: 'incidentFixingTimeSpentMonthFte',\r\n                headerName: 'Трудозатраты инциденты (FTE)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\r\n            },\r\n        ];\r\n\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Команда\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ personsTableContents }\r\n                        columns={ personsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPersonListByProjectTeamIdAndMonth, {\r\n    options: (props) => { return { variables: { projectTeamId: props.match.params.projectTeamId, month: props.match.params.month }}}\r\n})(PersonListByProjectTeamIdAndMonth);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PersonMonthDetailByPersonKeyAndMonth.js",["276","277","278"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchPersonMonthByPersonKeyAndMonth = gql`\r\n    query PersonMonthByPersonKeyAndMonth($personKey: String!, $month: Date!) {\r\n        personMonthByPersonKeyAndMonth(personKey: $personKey, month: $month) {\r\n            person {\r\n                id\r\n                name\r\n            }\r\n            \r\n            analysisTimeSpentMonthFte\r\n            developmentTimeSpentMonthFte\r\n            testingTimeSpentMonthFte\r\n            managementTimeSpentMonthFte\r\n            incidentFixingTimeSpentMonthFte\r\n            nonProjectActivityTimeSpentMonthFte\r\n            timeSpentMonthFte\r\n            \r\n            incidents {\r\n                id\r\n                incident {\r\n                    id\r\n                    key\r\n                    url\r\n                    name\r\n                    \r\n                            \r\n                    projectTeam {\r\n                        id\r\n                        name\r\n                    }\r\n                }\r\n                timeSpentMonthFte          \r\n            }\r\n            \r\n            systemChangeRequests {\r\n                id\r\n                systemChangeRequest {\r\n                    id\r\n                    key\r\n                    url\r\n                    name\r\n                    \r\n                    changeRequest {\r\n                        id\r\n                        name\r\n                        \r\n                        projectTeam {\r\n                            id\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n                managementTimeSpentMonthFte          \r\n            }\r\n            \r\n            nonProjectActivities {\r\n                id\r\n                nonProjectActivity {\r\n                    id\r\n                    key\r\n                    url\r\n                    name\r\n            \r\n                }\r\n                timeSpentMonthFte          \r\n            }\r\n            \r\n            tasks {\r\n                id\r\n                task {\r\n                    id\r\n                    key\r\n                    url\r\n                    name\r\n                    \r\n                    systemChangeRequest {\r\n                        id\r\n                        key\r\n                        name\r\n                        \r\n                        changeRequest {\r\n                            id\r\n                            key\r\n                            name\r\n                            \r\n                            projectTeam {\r\n                                id\r\n                                name\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                timeSpentMonthFte          \r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass PersonMonthDetailByPersonKeyAndMonth extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const personKey = this.props.match.params.personKey\r\n        const month = this.props.match.params.month\r\n        const personMonth = this.props.data.personMonthByPersonKeyAndMonth\r\n\r\n        const personName = personMonth.person.name\r\n\r\n        const analysisTimeSpentMonthFte = personMonth.analysisTimeSpentMonthFte\r\n        const developmentTimeSpentMonthFte = personMonth.developmentTimeSpentMonthFte\r\n        const testingTimeSpentMonthFte = personMonth.testingTimeSpentMonthFte\r\n        const managementTimeSpentMonthFte = personMonth.managementTimeSpentMonthFte\r\n        const incidentFixingTimeSpentMonthFte = personMonth.incidentFixingTimeSpentMonthFte\r\n        const nonProjectActivityTimeSpentMonthFte = personMonth.nonProjectActivityTimeSpentMonthFte\r\n        const timeSpentMonthFte = personMonth.timeSpentMonthFte\r\n\r\n        const tasks = personMonth.tasks\r\n        const incidents = personMonth.incidents\r\n        const nonProjectActivities = personMonth.nonProjectActivities\r\n        const systemChangeRequests = personMonth.systemChangeRequests\r\n\r\n        const incidentsTableContents = incidents.slice()\r\n            .filter(a => a.timeSpentMonthFte > 0)\r\n            .sort((a, b) => ((a.timeSpentMonthFte < b.timeSpentMonthFte) ? 1 : ((a.timeSpentMonthFte > b.timeSpentMonthFte) ? -1 : 0)))\r\n            .map(incidentTaskTimeSpent => (\r\n                    {\r\n                        id: incidentTaskTimeSpent.id,\r\n                        incidentId: incidentTaskTimeSpent.incident.id,\r\n                        incidentKey: incidentTaskTimeSpent.incident.key,\r\n                        incidentUrl: incidentTaskTimeSpent.incident.url,\r\n                        incidentName: incidentTaskTimeSpent.incident.name,\r\n                        projectTeamId: incidentTaskTimeSpent.incident.projectTeam.id,\r\n                        projectTeamName: incidentTaskTimeSpent.incident.projectTeam.name,\r\n                        timeSpentMonthFte: incidentTaskTimeSpent.timeSpentMonthFte,\r\n                    }\r\n            ))\r\n\r\n        const incidentsTableColumns = [\r\n            {\r\n                field: 'projectTeamName',\r\n                headerName: 'Команда проекта',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\r\n                        { params.getValue(params.id, 'projectTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'incidentName',\r\n                headerName: 'Инцидент',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <Link href={ params.getValue(params.id, 'incidentUrl') } target=\"_blank\">\r\n                        { params.getValue(params.id, 'incidentName') }\r\n                    </Link>\r\n                ),\r\n            },\r\n            {\r\n                field: 'timeSpentMonthFte',\r\n                headerName: 'Трудомощность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\r\n            },\r\n        ];\r\n\r\n      const systemChangeRequestsTableContents = systemChangeRequests.slice()\r\n            .filter(a => a.managementTimeSpentMonthFte > 0)\r\n            .sort((a, b) => ((a.managementTimeSpentMonthFte < b.managementTimeSpentMonthFte) ? 1 : ((a.managementTimeSpentMonthFte > b.managementTimeSpentMonthFte) ? -1 : 0)))\r\n            .map(systemChangeRequestsTaskTimeSpent => (\r\n                    {\r\n                        id: systemChangeRequestsTaskTimeSpent.id,\r\n                        incidentId: systemChangeRequestsTaskTimeSpent.systemChangeRequest.id,\r\n                        incidentKey: systemChangeRequestsTaskTimeSpent.systemChangeRequest.key,\r\n                        incidentUrl: systemChangeRequestsTaskTimeSpent.systemChangeRequest.url,\r\n                        incidentName: systemChangeRequestsTaskTimeSpent.systemChangeRequest.name,\r\n                        projectTeamId: systemChangeRequestsTaskTimeSpent.systemChangeRequest.changeRequest.projectTeam.id,\r\n                        projectTeamName: systemChangeRequestsTaskTimeSpent.systemChangeRequest.changeRequest.projectTeam.name,\r\n                        managementTimeSpentMonthFte: systemChangeRequestsTaskTimeSpent.managementTimeSpentMonthFte,\r\n                    }\r\n            ))\r\n\r\n        const systemChangeRequestsTableColumns = [\r\n            {\r\n                field: 'projectTeamName',\r\n                headerName: 'Команда проекта',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\r\n                        { params.getValue(params.id, 'projectTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'systemChangeRequestName',\r\n                headerName: 'Заявка на доработку ПО',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <Link href={ params.getValue(params.id, 'incidentUrl') } target=\"_blank\">\r\n                        { params.getValue(params.id, 'incidentName') }\r\n                    </Link>\r\n                ),\r\n            },\r\n            {\r\n                field: 'managementTimeSpentMonthFte',\r\n                headerName: 'Трудомощность - управление, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\r\n            },\r\n        ];\r\n\r\n\r\n        const nonProjectActivitiesTableContents = nonProjectActivities.slice()\r\n            .filter(a => a.timeSpentMonthFte > 0)\r\n            .sort((a, b) => ((a.timeSpentMonthFte < b.timeSpentMonthFte) ? 1 : ((a.timeSpentMonthFte > b.timeSpentMonthFte) ? -1 : 0)))\r\n            .map(nonProjectActivityTaskTimeSpent => (\r\n                    {\r\n                        id: nonProjectActivityTaskTimeSpent.id,\r\n                        nonProjectActivityId: nonProjectActivityTaskTimeSpent.nonProjectActivity.id,\r\n                        nonProjectActivityKey: nonProjectActivityTaskTimeSpent.nonProjectActivity.key,\r\n                        nonProjectActivityUrl: nonProjectActivityTaskTimeSpent.nonProjectActivity.url,\r\n                        nonProjectActivityName: nonProjectActivityTaskTimeSpent.nonProjectActivity.name,\r\n                        timeSpentMonthFte: nonProjectActivityTaskTimeSpent.timeSpentMonthFte,\r\n                    }\r\n            ))\r\n\r\n        const nonProjectActivitiesTableColumns = [\r\n            {\r\n                field: 'nonProjectActivityName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <Link href={ params.getValue(params.id, 'nonProjectActivityUrl') } target=\"_blank\">\r\n                        { params.getValue(params.id, 'nonProjectActivityName') }\r\n                    </Link>\r\n                ),\r\n            },\r\n            {\r\n                field: 'timeSpentMonthFte',\r\n                headerName: 'Трудомощность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\r\n            },\r\n        ];\r\n\r\n        const tasksTableContents = tasks.slice()\r\n            .filter(a => a.timeSpentMonthFte > 0)\r\n            .sort((a, b) => ((a.timeSpentMonthFte < b.timeSpentMonthFte) ? 1 : ((a.timeSpentMonthFte > b.timeSpentMonthFte) ? -1 : 0)))\r\n            .map(personTaskTimeSpent => (\r\n                    {\r\n                        id: personTaskTimeSpent.id,\r\n                        taskId: personTaskTimeSpent.task.id,\r\n                        taskKey: personTaskTimeSpent.task.key,\r\n                        taskUrl: personTaskTimeSpent.task.url,\r\n                        taskName: personTaskTimeSpent.task.name,\r\n                        systemChangeRequestId: personTaskTimeSpent.task.systemChangeRequest.id,\r\n                        systemChangeRequestKey: personTaskTimeSpent.task.systemChangeRequest.key,\r\n                        systemChangeRequestName: personTaskTimeSpent.task.systemChangeRequest.name,\r\n                        changeRequestId: personTaskTimeSpent.task.systemChangeRequest.changeRequest.id,\r\n                        changeRequestKey: personTaskTimeSpent.task.systemChangeRequest.changeRequest.key,\r\n                        changeRequestName: personTaskTimeSpent.task.systemChangeRequest.changeRequest.name,\r\n                        projectTeamId: personTaskTimeSpent.task.systemChangeRequest.changeRequest.projectTeam.id,\r\n                        projectTeamName: personTaskTimeSpent.task.systemChangeRequest.changeRequest.projectTeam.name,\r\n                        timeSpentMonthFte: personTaskTimeSpent.timeSpentMonthFte,\r\n                    }\r\n            ))\r\n\r\n        const tasksTableColumns = [\r\n            {\r\n                field: 'projectTeamName',\r\n                headerName: 'Команда проекта',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\r\n                        { params.getValue(params.id, 'projectTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'changeRequestName',\r\n                headerName: 'Заявка на доработку ПО',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/changeRequests/${ params.getValue(params.id, 'changeRequestKey') }` }>\r\n                        { params.getValue(params.id, 'changeRequestName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'systemChangeRequestName',\r\n                headerName: 'Заявка на доработку системы',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/systemChangeRequests/${ params.getValue(params.id, 'systemChangeRequestKey') }` }>\r\n                        { params.getValue(params.id, 'systemChangeRequestName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'taskName',\r\n                headerName: 'Задача',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <Link href={ params.getValue(params.id, 'taskUrl') } target=\"_blank\">\r\n                        { params.getValue(params.id, 'taskName') }\r\n                    </Link>\r\n                ),\r\n            },\r\n            {\r\n                field: 'timeSpentMonthFte',\r\n                headerName: 'Трудомощность, FTE',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Сотрудник { personName } <br />\r\n                    FTE: { timeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - аналитика: { analysisTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - разработка: { developmentTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - тестирование: { testingTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - управление: { managementTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - инциденты: { incidentFixingTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                    - непроизводственная деятельность: { nonProjectActivityTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\r\n                </Typography>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                   Списания на задачи\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ tasksTableContents }\r\n                        columns={ tasksTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                   Списание на управление в заявках на доработку систем\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemChangeRequestsTableContents }\r\n                        columns={ systemChangeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                   Списания на инциденты\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ incidentsTableContents }\r\n                        columns={ incidentsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                   Списания на непроизводственную (текущую) деятельность\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ nonProjectActivitiesTableContents }\r\n                        columns={ nonProjectActivitiesTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n                <br />\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPersonMonthByPersonKeyAndMonth, {\r\n    options: (props) => { return { variables: { personKey: props.match.params.personKey, month: props.match.params.month }}}\r\n})(PersonMonthDetailByPersonKeyAndMonth);",{"ruleId":"279","replacedBy":"280"},{"ruleId":"281","replacedBy":"282"},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"287","severity":1,"message":"288","line":227,"column":69,"nodeType":"289","messageId":"290","endLine":227,"endColumn":71},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"287","severity":1,"message":"288","line":327,"column":44,"nodeType":"289","messageId":"290","endLine":327,"endColumn":46},{"ruleId":"287","severity":1,"message":"288","line":243,"column":69,"nodeType":"289","messageId":"290","endLine":243,"endColumn":71},{"ruleId":"283","severity":1,"message":"291","line":6,"column":25,"nodeType":"285","messageId":"286","endLine":6,"endColumn":29},{"ruleId":"283","severity":1,"message":"292","line":6,"column":77,"nodeType":"285","messageId":"286","endLine":6,"endColumn":96},{"ruleId":"283","severity":1,"message":"293","line":59,"column":15,"nodeType":"285","messageId":"286","endLine":59,"endColumn":29},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"294","line":85,"column":15,"nodeType":"285","messageId":"286","endLine":85,"endColumn":31},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"294","line":55,"column":15,"nodeType":"285","messageId":"286","endLine":55,"endColumn":31},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"294","line":50,"column":15,"nodeType":"285","messageId":"286","endLine":50,"endColumn":31},{"ruleId":"287","severity":1,"message":"288","line":274,"column":69,"nodeType":"289","messageId":"290","endLine":274,"endColumn":71},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"295","line":180,"column":15,"nodeType":"285","messageId":"286","endLine":180,"endColumn":43},{"ruleId":"283","severity":1,"message":"296","line":195,"column":15,"nodeType":"285","messageId":"286","endLine":195,"endColumn":42},{"ruleId":"283","severity":1,"message":"295","line":157,"column":15,"nodeType":"285","messageId":"286","endLine":157,"endColumn":43},{"ruleId":"283","severity":1,"message":"296","line":172,"column":15,"nodeType":"285","messageId":"286","endLine":172,"endColumn":42},{"ruleId":"287","severity":1,"message":"297","line":220,"column":90,"nodeType":"289","messageId":"290","endLine":220,"endColumn":92},{"ruleId":"287","severity":1,"message":"288","line":224,"column":44,"nodeType":"289","messageId":"290","endLine":224,"endColumn":46},{"ruleId":"283","severity":1,"message":"298","line":4,"column":8,"nodeType":"285","messageId":"286","endLine":4,"endColumn":14},{"ruleId":"283","severity":1,"message":"299","line":6,"column":29,"nodeType":"285","messageId":"286","endLine":6,"endColumn":36},{"ruleId":"283","severity":1,"message":"284","line":7,"column":14,"nodeType":"285","messageId":"286","endLine":7,"endColumn":18},{"ruleId":"283","severity":1,"message":"300","line":8,"column":8,"nodeType":"285","messageId":"286","endLine":8,"endColumn":34},{"ruleId":"287","severity":1,"message":"297","line":44,"column":41,"nodeType":"289","messageId":"290","endLine":44,"endColumn":43},{"ruleId":"287","severity":1,"message":"288","line":48,"column":29,"nodeType":"289","messageId":"290","endLine":48,"endColumn":31},{"ruleId":"283","severity":1,"message":"298","line":4,"column":8,"nodeType":"285","messageId":"286","endLine":4,"endColumn":14},{"ruleId":"283","severity":1,"message":"299","line":6,"column":29,"nodeType":"285","messageId":"286","endLine":6,"endColumn":36},{"ruleId":"283","severity":1,"message":"284","line":7,"column":14,"nodeType":"285","messageId":"286","endLine":7,"endColumn":18},{"ruleId":"283","severity":1,"message":"300","line":8,"column":8,"nodeType":"285","messageId":"286","endLine":8,"endColumn":34},{"ruleId":"283","severity":1,"message":"301","line":9,"column":22,"nodeType":"285","messageId":"286","endLine":9,"endColumn":42},{"ruleId":"283","severity":1,"message":"302","line":9,"column":44,"nodeType":"285","messageId":"286","endLine":9,"endColumn":61},{"ruleId":"287","severity":1,"message":"288","line":36,"column":35,"nodeType":"289","messageId":"290","endLine":36,"endColumn":37},{"ruleId":"283","severity":1,"message":"298","line":4,"column":8,"nodeType":"285","messageId":"286","endLine":4,"endColumn":14},{"ruleId":"283","severity":1,"message":"299","line":6,"column":29,"nodeType":"285","messageId":"286","endLine":6,"endColumn":36},{"ruleId":"283","severity":1,"message":"284","line":7,"column":14,"nodeType":"285","messageId":"286","endLine":7,"endColumn":18},{"ruleId":"283","severity":1,"message":"300","line":8,"column":8,"nodeType":"285","messageId":"286","endLine":8,"endColumn":34},{"ruleId":"283","severity":1,"message":"301","line":9,"column":22,"nodeType":"285","messageId":"286","endLine":9,"endColumn":42},{"ruleId":"283","severity":1,"message":"302","line":9,"column":44,"nodeType":"285","messageId":"286","endLine":9,"endColumn":61},{"ruleId":"283","severity":1,"message":"294","line":31,"column":15,"nodeType":"285","messageId":"286","endLine":31,"endColumn":31},{"ruleId":"287","severity":1,"message":"288","line":39,"column":46,"nodeType":"289","messageId":"290","endLine":39,"endColumn":48},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"303","line":7,"column":8,"nodeType":"285","messageId":"286","endLine":7,"endColumn":35},{"ruleId":"283","severity":1,"message":"304","line":8,"column":8,"nodeType":"285","messageId":"286","endLine":8,"endColumn":30},{"ruleId":"283","severity":1,"message":"305","line":42,"column":15,"nodeType":"285","messageId":"286","endLine":42,"endColumn":33},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"306","line":8,"column":15,"nodeType":"285","messageId":"286","endLine":8,"endColumn":32},{"ruleId":"283","severity":1,"message":"300","line":6,"column":8,"nodeType":"285","messageId":"286","endLine":6,"endColumn":34},{"ruleId":"283","severity":1,"message":"307","line":110,"column":15,"nodeType":"285","messageId":"286","endLine":110,"endColumn":24},{"ruleId":"283","severity":1,"message":"295","line":115,"column":15,"nodeType":"285","messageId":"286","endLine":115,"endColumn":43},{"ruleId":"283","severity":1,"message":"296","line":130,"column":15,"nodeType":"285","messageId":"286","endLine":130,"endColumn":42},{"ruleId":"283","severity":1,"message":"308","line":239,"column":15,"nodeType":"285","messageId":"286","endLine":239,"endColumn":36},{"ruleId":"283","severity":1,"message":"309","line":250,"column":15,"nodeType":"285","messageId":"286","endLine":250,"endColumn":35},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"310","line":93,"column":15,"nodeType":"285","messageId":"286","endLine":93,"endColumn":34},{"ruleId":"283","severity":1,"message":"311","line":97,"column":15,"nodeType":"285","messageId":"286","endLine":97,"endColumn":29},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"312","line":95,"column":15,"nodeType":"285","messageId":"286","endLine":95,"endColumn":30},{"ruleId":"283","severity":1,"message":"313","line":112,"column":15,"nodeType":"285","messageId":"286","endLine":112,"endColumn":24},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"314","line":101,"column":15,"nodeType":"285","messageId":"286","endLine":101,"endColumn":25},{"ruleId":"283","severity":1,"message":"315","line":102,"column":15,"nodeType":"285","messageId":"286","endLine":102,"endColumn":28},{"ruleId":"283","severity":1,"message":"313","line":117,"column":15,"nodeType":"285","messageId":"286","endLine":117,"endColumn":24},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"300","line":6,"column":8,"nodeType":"285","messageId":"286","endLine":6,"endColumn":34},{"ruleId":"283","severity":1,"message":"316","line":7,"column":17,"nodeType":"285","messageId":"286","endLine":7,"endColumn":27},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"300","line":6,"column":8,"nodeType":"285","messageId":"286","endLine":6,"endColumn":34},{"ruleId":"283","severity":1,"message":"317","line":9,"column":8,"nodeType":"285","messageId":"286","endLine":9,"endColumn":38},{"ruleId":"283","severity":1,"message":"318","line":43,"column":15,"nodeType":"285","messageId":"286","endLine":43,"endColumn":23},{"ruleId":"283","severity":1,"message":"319","line":47,"column":15,"nodeType":"285","messageId":"286","endLine":47,"endColumn":23},{"ruleId":"287","severity":1,"message":"288","line":54,"column":69,"nodeType":"289","messageId":"290","endLine":54,"endColumn":71},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"320","line":60,"column":15,"nodeType":"285","messageId":"286","endLine":60,"endColumn":31},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"301","line":6,"column":22,"nodeType":"285","messageId":"286","endLine":6,"endColumn":42},{"ruleId":"283","severity":1,"message":"302","line":6,"column":44,"nodeType":"285","messageId":"286","endLine":6,"endColumn":61},{"ruleId":"287","severity":1,"message":"288","line":37,"column":36,"nodeType":"289","messageId":"290","endLine":37,"endColumn":38},{"ruleId":"283","severity":1,"message":"300","line":6,"column":8,"nodeType":"285","messageId":"286","endLine":6,"endColumn":34},{"ruleId":"283","severity":1,"message":"307","line":110,"column":15,"nodeType":"285","messageId":"286","endLine":110,"endColumn":24},{"ruleId":"283","severity":1,"message":"321","line":111,"column":15,"nodeType":"285","messageId":"286","endLine":111,"endColumn":20},"no-native-reassign",["322"],"no-negated-in-lhs",["323"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Cell' is defined but never used.","'ResponsiveContainer' is defined but never used.","'companiesQueue' is assigned a value but never used.","'planningPeriodId' is assigned a value but never used.","'planningPeriodsTableContents' is assigned a value but never used.","'planningPeriodsTableColumns' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'moment' is defined but never used.","'NavLink' is defined but never used.","'TimeSheetsByDateIssueChart' is defined but never used.","'GridToolbarContainer' is defined but never used.","'GridToolbarExport' is defined but never used.","'TimeSheetsByDatePeriodChart' is defined but never used.","'ValueByDatePeriodChart' is defined but never used.","'planningPeriodName' is assigned a value but never used.","'planningPeriodEnd' is assigned a value but never used.","'personKey' is assigned a value but never used.","'quartersTableContents' is assigned a value but never used.","'quartersTableColumns' is assigned a value but never used.","'planningPeriodStart' is assigned a value but never used.","'systemQuarters' is assigned a value but never used.","'dedicatedTeamId' is assigned a value but never used.","'positions' is assigned a value but never used.","'quarterKey' is assigned a value but never used.","'projectTeamId' is assigned a value but never used.","'RouterLink' is defined but never used.","'ReengineeringByDatePeriodChart' is defined but never used.","'systemId' is assigned a value but never used.","'estimate' is assigned a value but never used.","'projectManagerId' is assigned a value but never used.","'month' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]