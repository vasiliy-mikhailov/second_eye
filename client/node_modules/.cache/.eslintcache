[{"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\index.js":"1","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\App.js":"2","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\reportWebVitals.js":"3","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodsList.js":"4","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodDetail.js":"5","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemChangeRequestDetail.js":"6","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ChangeRequestDetail.js":"7","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodDetail.js":"8","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodDetail.js":"9"},{"size":3004,"mtime":1629458505568,"results":"10","hashOfConfig":"11"},{"size":124,"mtime":1628778320358,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":2034,"mtime":1629538813519,"results":"14","hashOfConfig":"11"},{"size":10231,"mtime":1629204140501,"results":"15","hashOfConfig":"11"},{"size":12578,"mtime":1629197151298,"results":"16","hashOfConfig":"11"},{"size":14888,"mtime":1629197183371,"results":"17","hashOfConfig":"11"},{"size":11517,"mtime":1629458528762,"results":"18","hashOfConfig":"11"},{"size":10185,"mtime":1629460399719,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"gnqo0z",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\index.js",["40"],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\App.js",[],["41","42"],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\reportWebVitals.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodsList.js",["43"],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodDetail.js",["44","45","46"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {CartesianGrid, Legend, ReferenceLine, Scatter, ScatterChart, XAxis, YAxis, ZAxis} from \"recharts\";\r\nimport moment from \"moment\";\r\n\r\nconst fetchPlanningPeriodById = gql`\r\n    query PlanningPeriodByIdQuery($id: String!) {\r\n        planningPeriodById(id: $id) {\r\n            id \r\n            name\r\n            start\r\n            end\r\n            estimate\r\n            \r\n            dedicatedTeams {\r\n                id\r\n                name\r\n            }\r\n            \r\n            timeSpentPercentWithValueAndWithoutValueByDate {\r\n                date\r\n                timeSpentWithoutValuePercentCumsum\r\n                timeSpentWithValuePercentCumsum\r\n            }\r\n    \r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            changeRequests {\r\n                id\r\n                estimate\r\n                timeLeft\r\n                hasValue\r\n                name\r\n                \r\n                stateCategoryId\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass PlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriodId = this.props.match.params.id\r\n        const planningPeriod = this.props.data.planningPeriodById\r\n        const estimate = planningPeriod.estimate\r\n        const planningPeriodName = planningPeriod.name\r\n        const planningPeriodStart = planningPeriod.start\r\n        const planningPeriodEnd = planningPeriod.end\r\n\r\n        const dedicatedTeams = planningPeriod.dedicatedTeams\r\n        const changeRequests = planningPeriod.changeRequests\r\n\r\n        const timeSheetsByDate = planningPeriod.timeSheetsByDate\r\n        const timeSpentPercentWithValueAndWithoutValueByDate = planningPeriod.timeSpentPercentWithValueAndWithoutValueByDate\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today, planningPeriodStart, planningPeriodEnd]\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates)\r\n\r\n        const xAxisEnd = Math.max(...allEdgeDates)\r\n\r\n        return (\r\n            <Box>\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis\r\n                        type=\"number\"\r\n                        dataKey=\"timeSpentCumsum\"\r\n                        tickFormatter={ tick => {\r\n                            return tick.toLocaleString();\r\n                        }}\r\n                    />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodStart).getTime() } stroke=\"green\" strokeDasharray=\"5 5\" label=\"Начало периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodEnd).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Окончание периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={ estimate } stroke=\"black\" strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано всего\"\r\n                        data= {\r\n                            timeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"black\"\r\n                    />\r\n                </ScatterChart>\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis\r\n                        type=\"number\"\r\n                        dataKey=\"timeSpentWithoutValuePercentCumsum\"\r\n                        tickFormatter={(tick) => {\r\n                            return `${ tick * 100 }%`;\r\n                        }}\r\n                    />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodStart).getTime() } stroke=\"green\" strokeDasharray=\"5 5\" label=\"Начало периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodEnd).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Окончание периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={ 1 } stroke=\"black\" strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Доля списаний на задачи без ценности\"\r\n                        data= {\r\n                            timeSpentPercentWithValueAndWithoutValueByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentWithoutValuePercentCumsum: item.timeSpentWithoutValuePercentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"black\"\r\n                    />\r\n                </ScatterChart>\r\n\r\n                <Typography variant=\"body1\" noWrap>\r\n                    Выделенные команды\r\n                </Typography>\r\n\r\n               <ul>\r\n                    { dedicatedTeams\r\n                        .slice()\r\n                        .sort(function(a, b) {\r\n                            if (a.name > b.name) {\r\n                                return 1;\r\n                            }\r\n                            if (a.name === b.name) {\r\n                                return 0;\r\n                            }\r\n                            if (a.name < b.name) {\r\n                                return -1;\r\n                            }\r\n                        })\r\n                        .map(dedicatedTeam => (\r\n                            <li key={ dedicatedTeam.id }>\r\n                                <RouterLink to={ `/planningPeriods/${planningPeriodId}/dedicatedTeams/${dedicatedTeam.id}` }>\r\n                                { dedicatedTeam.name }\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                </ul>\r\n\r\n                <Typography variant=\"body1\" noWrap>\r\n                    Заявки на доработку\r\n                </Typography>\r\n               <ul>\r\n                    { changeRequests\r\n                        .slice()\r\n.                       sort(function(a, b) {\r\n                            if (a.stateCategoryId === 3 && b.stateCategoryId !== 3) {\r\n                                return 1;\r\n                            }\r\n                            if (a.stateCategoryId === 3 && b.stateCategoryId === 3) {\r\n                                return 0;\r\n                            }\r\n                            if (a.stateCategoryId !== 3 && b.stateCategoryId === 3) {\r\n                                return -1;\r\n                            }\r\n\r\n                            return b.timeLeft - a.timeLeft\r\n                        })\r\n                        .map(changeRequest => (\r\n                            <li key={ changeRequest.id }>\r\n                                { changeRequest.stateCategoryId !== 3 ? `Осталось ${ changeRequest.timeLeft } ч ` : '' }\r\n                                { changeRequest.estimate === 0 && changeRequest.stateCategoryId !== 3 ? `Оценка ${ changeRequest.estimate } ч ` : '' }\r\n                                { changeRequest.hasValue ? '' : 'Нет ценности ' }\r\n\r\n                                <RouterLink style={{ textDecoration: changeRequest.stateCategoryId === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${changeRequest.id}` }>\r\n                                { changeRequest.name }\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                </ul>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPlanningPeriodById, {\r\n    options: (props) => { return { variables: { id: props.match.params.id }}}\r\n})(PlanningPeriodDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemChangeRequestDetail.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ChangeRequestDetail.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodDetail.js",["47","48","49"],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodDetail.js",["50","51"],{"ruleId":"52","severity":1,"message":"53","line":11,"column":5,"nodeType":"54","messageId":"55","endLine":11,"endColumn":13},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":34,"column":31,"nodeType":"62","messageId":"63","endLine":34,"endColumn":39},{"ruleId":"52","severity":1,"message":"64","line":5,"column":14,"nodeType":"54","messageId":"55","endLine":5,"endColumn":18},{"ruleId":"52","severity":1,"message":"65","line":55,"column":15,"nodeType":"54","messageId":"55","endLine":55,"endColumn":33},{"ruleId":"60","severity":1,"message":"61","line":179,"column":31,"nodeType":"62","messageId":"63","endLine":179,"endColumn":39},{"ruleId":"52","severity":1,"message":"64","line":5,"column":14,"nodeType":"54","messageId":"55","endLine":5,"endColumn":18},{"ruleId":"60","severity":1,"message":"61","line":188,"column":30,"nodeType":"62","messageId":"63","endLine":188,"endColumn":38},{"ruleId":"66","severity":1,"message":"67","line":192,"column":40,"nodeType":"68","messageId":"69","endLine":192,"endColumn":42},{"ruleId":"52","severity":1,"message":"64","line":5,"column":14,"nodeType":"54","messageId":"55","endLine":5,"endColumn":18},{"ruleId":"52","severity":1,"message":"70","line":51,"column":15,"nodeType":"54","messageId":"55","endLine":51,"endColumn":31},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["71"],"no-negated-in-lhs",["72"],"array-callback-return","Array.prototype.sort() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","'Link' is defined but never used.","'planningPeriodName' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'planningPeriodId' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]