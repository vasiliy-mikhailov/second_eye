[{"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\index.js":"1","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\App.js":"2","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\reportWebVitals.js":"3","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodsList.js":"4","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodDetail.js":"5","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemChangeRequestDetail.js":"6","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ChangeRequestDetail.js":"7","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodDetail.js":"8","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodDetail.js":"9","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\CapacityAndQueue.js":"10","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\utils.js":"11","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDatePeriodChart.js":"12","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDateIssueChart.js":"13","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ValueByDatePeriodChart.js":"14","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemPlanningPeriodDetail.js":"15","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodSystemDetail.js":"16","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodSystemDetail.js":"17"},{"size":4170,"mtime":1631703353283,"results":"18","hashOfConfig":"19"},{"size":135,"mtime":1629779914551,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1629779914557,"results":"21","hashOfConfig":"19"},{"size":2295,"mtime":1629779914554,"results":"22","hashOfConfig":"19"},{"size":10268,"mtime":1632317048247,"results":"23","hashOfConfig":"19"},{"size":6580,"mtime":1631708695999,"results":"24","hashOfConfig":"19"},{"size":8628,"mtime":1631533287455,"results":"25","hashOfConfig":"19"},{"size":15550,"mtime":1632317083261,"results":"26","hashOfConfig":"19"},{"size":11827,"mtime":1632316189712,"results":"27","hashOfConfig":"19"},{"size":15460,"mtime":1631708743084,"results":"28","hashOfConfig":"19"},{"size":452,"mtime":1629988539883,"results":"29","hashOfConfig":"19"},{"size":3988,"mtime":1631795417068,"results":"30","hashOfConfig":"19"},{"size":3204,"mtime":1631708873508,"results":"31","hashOfConfig":"19"},{"size":3088,"mtime":1631795440291,"results":"32","hashOfConfig":"19"},{"size":10784,"mtime":1631708631465,"results":"33","hashOfConfig":"19"},{"size":7778,"mtime":1631703534331,"results":"34","hashOfConfig":"19"},{"size":7832,"mtime":1631703562934,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"gnqo0z",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"38"},"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\index.js",[],["79","80"],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\App.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\reportWebVitals.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodsList.js",["81"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\nconst fetchPlanningPeriods = gql`\r\n    query PlanningPeriods {\r\n        planningPeriods {\r\n            id \r\n            name\r\n            start\r\n            end\r\n        }\r\n    }\r\n`;\r\n\r\nclass PlanningPeriodsList extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriods = this.props.data.planningPeriods\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body1\">\r\n                    <RouterLink to={ `/capacityAndQueue` }>\r\n                        Очереди по командам\r\n                    </RouterLink>\r\n                </Typography>\r\n                <br />\r\n\r\n                <Typography variant=\"body1\">\r\n                    Периоды\r\n                </Typography>\r\n\r\n                <ul>\r\n                    { planningPeriods\r\n                        .slice()\r\n                        .sort(function(a, b) {\r\n                            if (a.start < b.start) {\r\n                                return 1;\r\n                            }\r\n                            if (a.start === b.start) {\r\n                                return 0;\r\n                            }\r\n                            if (a.start > b.start) {\r\n                                return -1;\r\n                            }\r\n                        })\r\n                        .map(planningPeriod => (\r\n                            <li key={ planningPeriod.id }>\r\n                                <RouterLink to={ `/planningPeriods/${planningPeriod.id}` }>\r\n                                { planningPeriod.name }\r\n                                </RouterLink>\r\n                                &nbsp;\r\n                                ({ planningPeriod.start } - { planningPeriod.end })\r\n                            </li>\r\n                        )\r\n                    )}\r\n                </ul>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPlanningPeriods)(PlanningPeriodsList);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\PlanningPeriodDetail.js",["82"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\r\n\r\nconst fetchPlanningPeriodById = gql`\r\n    query PlanningPeriodByIdQuery($id: Int!) {\r\n        planningPeriodById(id: $id) {\r\n            id \r\n            name\r\n            start\r\n            end\r\n            estimate\r\n            effortPerFunctionPoint\r\n            calculatedFinishDate\r\n            \r\n            dedicatedTeamPlanningPeriods {\r\n                id\r\n                estimate\r\n                timeLeft\r\n                dedicatedTeam {\r\n                    id\r\n                    name\r\n                }\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n            }\r\n            \r\n            systemPlanningPeriods {\r\n                id\r\n                estimate\r\n                timeLeft\r\n                system {\r\n                    id\r\n                    name\r\n                }\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n            }\r\n    \r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n                timeSpentCumsumPrediction\r\n                timeSpentWithoutValuePercentCumsum\r\n                timeSpentWithValuePercentCumsum\r\n            }\r\n            \r\n            timeSpentCumsumAtEndPrediction\r\n        }\r\n    }\r\n`;\r\n\r\nclass PlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriodId = this.props.match.params.id\r\n        const planningPeriod = this.props.data.planningPeriodById\r\n        const estimate = planningPeriod.estimate\r\n        const effortPerFunctionPoint = planningPeriod.effortPerFunctionPoint\r\n        const calculatedFinishDate = planningPeriod.calculatedFinishDate\r\n        const planningPeriodStart = planningPeriod.start\r\n        const planningPeriodEnd = planningPeriod.end\r\n\r\n        const dedicatedTeamPlanningPeriods = planningPeriod.dedicatedTeamPlanningPeriods\r\n        const systemPlanningPeriods = planningPeriod.systemPlanningPeriods\r\n\r\n        const timeSheetsByDate = planningPeriod.timeSheetsByDate\r\n        const timeSpentCumsumAtEndPrediction = planningPeriod.timeSpentCumsumAtEndPrediction\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        const dedicatedTeamsTableContents = dedicatedTeamPlanningPeriods.slice()\r\n            .sort((a, b) => ((a.dedicatedTeam.name > b.dedicatedTeam.name) ? 1 : ((a.dedicatedTeam.name < b.dedicatedTeam.name) ? -1 : 0)))\r\n            .map(dedicatedTeamPlanningPeriod => (\r\n                    {\r\n                        id: dedicatedTeamPlanningPeriod.id,\r\n                        estimate: dedicatedTeamPlanningPeriod.estimate,\r\n                        timeLeft: dedicatedTeamPlanningPeriod.timeLeft,\r\n                        dedicatedTeamId: dedicatedTeamPlanningPeriod.dedicatedTeam.id,\r\n                        dedicatedTeamName: dedicatedTeamPlanningPeriod.dedicatedTeam.name,\r\n                        effortPerFunctionPoint: dedicatedTeamPlanningPeriod.effortPerFunctionPoint,\r\n                        calculatedFinishDate: dedicatedTeamPlanningPeriod.calculatedFinishDate\r\n                    }\r\n            ))\r\n\r\n        const dedicatedTeamsTableColumns = [\r\n            {\r\n                field: 'dedicatedTeamName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/dedicatedTeams/${ params.getValue(params.id, 'dedicatedTeamId') }` }>\r\n                        { params.getValue(params.id, 'dedicatedTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 2}),\r\n            },\r\n        ];\r\n\r\n        const systemsTableContents = systemPlanningPeriods.slice()\r\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\r\n            .map(systemPlanningPeriod => (\r\n                    {\r\n                        id: systemPlanningPeriod.id,\r\n                        estimate: systemPlanningPeriod.estimate,\r\n                        timeLeft: systemPlanningPeriod.timeLeft,\r\n                        systemId: systemPlanningPeriod.system.id,\r\n                        systemName: systemPlanningPeriod.system.name,\r\n                        effortPerFunctionPoint: systemPlanningPeriod.effortPerFunctionPoint,\r\n                        calculatedFinishDate: systemPlanningPeriod.calculatedFinishDate\r\n                    }\r\n            ))\r\n\r\n        const systemsTableColumns = [\r\n            {\r\n                field: 'systemName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/systems/${ params.getValue(params.id, 'systemId') }` }>\r\n                        { params.getValue(params.id, 'systemName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 2}),\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    timeSpentCumsumAtEndPrediction={ timeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <ValueByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Выделенные команды\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ dedicatedTeamsTableContents }\r\n                        columns={ dedicatedTeamsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemsTableContents }\r\n                        columns={ systemsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPlanningPeriodById, {\r\n    options: (props) => { return { variables: { id: props.match.params.id }}}\r\n})(PlanningPeriodDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemChangeRequestDetail.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ChangeRequestDetail.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodDetail.js",["83"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId = gql`\r\n        query DedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId($planningPeriodId: Int!, $dedicatedTeamId: Int!) {\r\n              dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId(dedicatedTeamId: $dedicatedTeamId, planningPeriodId: $planningPeriodId) {\r\n                    id\r\n                    estimate\r\n                    effortPerFunctionPoint\r\n                    calculatedFinishDate\r\n                    dedicatedTeam {\r\n                        name\r\n                    }\r\n                    planningPeriod {\r\n                        name\r\n                        start\r\n                        end\r\n                    }\r\n                    timeSheetsByDate {\r\n                        date\r\n                        timeSpentCumsum\r\n                        timeSpentCumsumPrediction\r\n                        timeSpentWithoutValuePercentCumsum\r\n                        timeSpentWithValuePercentCumsum\r\n                    }\r\n                    \r\n                    timeSpentCumsumAtEndPrediction\r\n                    \r\n                    projectTeamPlanningPeriods {\r\n                        id\r\n                        estimate\r\n                        timeLeft\r\n                        projectTeam {\r\n                            id\r\n                            name\r\n                        }\r\n                        effortPerFunctionPoint\r\n                        calculatedFinishDate\r\n                    }\r\n                    \r\n                    dedicatedTeamPlanningPeriodSystems {\r\n                        id\r\n                        estimate\r\n                        timeLeft\r\n                        system {\r\n                            id\r\n                            name\r\n                        }\r\n                        effortPerFunctionPoint\r\n                        calculatedFinishDate\r\n                    }\r\n                    \r\n                    changeRequests {\r\n                        id\r\n                        estimate\r\n                        timeLeft\r\n                        hasValue\r\n                        name\r\n                        stateCategoryId\r\n                        effortPerFunctionPoint\r\n                    }\r\n              }\r\n        }\r\n`;\r\n\r\nclass DedicatedTeamPlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n        const dedicatedTeamId = this.props.match.params.dedicatedTeamId\r\n\r\n        const dedicatedTeamPlanningPeriod = this.props.data.dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId\r\n\r\n        const dedicatedTeamName = dedicatedTeamPlanningPeriod.dedicatedTeam.name\r\n        const estimate = dedicatedTeamPlanningPeriod.estimate\r\n        const effortPerFunctionPoint = dedicatedTeamPlanningPeriod.effortPerFunctionPoint\r\n        const calculatedFinishDate = dedicatedTeamPlanningPeriod.calculatedFinishDate\r\n        const planningPeriodName = dedicatedTeamPlanningPeriod.planningPeriod.name\r\n        const planningPeriodStart = dedicatedTeamPlanningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = dedicatedTeamPlanningPeriod.planningPeriod.end\r\n        const projectTeamPlanningPeriods = dedicatedTeamPlanningPeriod.projectTeamPlanningPeriods\r\n        const dedicatedTeamPlanningPeriodSystems = dedicatedTeamPlanningPeriod.dedicatedTeamPlanningPeriodSystems\r\n        const changeRequests = dedicatedTeamPlanningPeriod.changeRequests\r\n\r\n        const timeSheetsByDate = dedicatedTeamPlanningPeriod.timeSheetsByDate\r\n        const timeSpentCumsumAtEndPrediction = dedicatedTeamPlanningPeriod.timeSpentCumsumAtEndPrediction\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        const systemsTableContents = dedicatedTeamPlanningPeriodSystems.slice()\r\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\r\n            .map(dedicatedTeamPlanningPeriodSystem => (\r\n                    {\r\n                        id: dedicatedTeamPlanningPeriodSystem.id,\r\n                        estimate: dedicatedTeamPlanningPeriodSystem.estimate,\r\n                        timeLeft: dedicatedTeamPlanningPeriodSystem.timeLeft,\r\n                        systemId: dedicatedTeamPlanningPeriodSystem.system.id,\r\n                        systemName: dedicatedTeamPlanningPeriodSystem.system.name,\r\n                        effortPerFunctionPoint: dedicatedTeamPlanningPeriodSystem.effortPerFunctionPoint,\r\n                        calculatedFinishDate: dedicatedTeamPlanningPeriodSystem.calculatedFinishDate\r\n                    }\r\n            ))\r\n\r\n        const systemsTableColumns = [\r\n            {\r\n                field: 'systemName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/dedicatedTeams/${ dedicatedTeamId }/systems/${ params.getValue(params.id, 'systemId') }` }>\r\n                        { params.getValue(params.id, 'systemName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 2}),\r\n            },\r\n        ];\r\n\r\n        const projectTeamsTableContents = projectTeamPlanningPeriods.slice()\r\n            .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\r\n            .map(projectTeamPlanningPeriod => (\r\n                    {\r\n                        id: projectTeamPlanningPeriod.id,\r\n                        estimate: projectTeamPlanningPeriod.estimate,\r\n                        timeLeft: projectTeamPlanningPeriod.timeLeft,\r\n                        projectTeamId: projectTeamPlanningPeriod.projectTeam.id,\r\n                        projectTeamName: projectTeamPlanningPeriod.projectTeam.name,\r\n                        effortPerFunctionPoint: projectTeamPlanningPeriod.effortPerFunctionPoint,\r\n                        calculatedFinishDate: projectTeamPlanningPeriod.calculatedFinishDate\r\n                    }\r\n            ))\r\n\r\n        const projectTeamsTableColumns = [\r\n            {\r\n                field: 'projectTeamName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\r\n                        { params.getValue(params.id, 'projectTeamName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 2}),\r\n            },\r\n        ];\r\n\r\n        const changeRequestsTableContents = changeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(changeRequest => (\r\n                    {\r\n                        id: changeRequest.id,\r\n                        name: changeRequest.name,\r\n                        hasValue: changeRequest.hasValue,\r\n                        estimate: changeRequest.estimate,\r\n                        timeLeft: changeRequest.timeLeft,\r\n                        stateCategoryId: changeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint\r\n                    }\r\n            ))\r\n\r\n        const changeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'id') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 2}) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Выделенная команда { dedicatedTeamName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                    <br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    timeSpentCumsumAtEndPrediction={ timeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <ValueByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Проектные команды\r\n                </Typography>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ projectTeamsTableContents }\r\n                        columns={ projectTeamsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemsTableContents }\r\n                        columns={ systemsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку ПО\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ changeRequestsTableContents }\r\n                        columns={ changeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId, {\r\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, dedicatedTeamId: props.match.params.dedicatedTeamId }}}\r\n})(DedicatedTeamPlanningPeriodDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodDetail.js",["84"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId = gql`\r\n    query ProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId($planningPeriodId: Int!, $projectTeamId: Int!) {\r\n          projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId(projectTeamId: $projectTeamId, planningPeriodId: $planningPeriodId) {\r\n                id\r\n                estimate\r\n                effortPerFunctionPoint\r\n                calculatedFinishDate\r\n                \r\n                projectTeam {\r\n                    name\r\n                }\r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                    timeSpentWithoutValuePercentCumsum\r\n                    timeSpentWithValuePercentCumsum\r\n                }\r\n                \r\n                timeSpentCumsumAtEndPrediction\r\n                \r\n                projectTeamPlanningPeriodSystems {\r\n                  id\r\n                  estimate\r\n                  timeLeft\r\n                  system {\r\n                    id\r\n                    name\r\n                  }\r\n                  effortPerFunctionPoint\r\n                  calculatedFinishDate\r\n                }\r\n                  \r\n                \r\n                changeRequests {\r\n                    id\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategoryId\r\n                    effortPerFunctionPoint\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass ProjectTeamPlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n        const projectTeamId = this.props.match.params.projectTeamId\r\n        const projectTeamPlanningPeriod = this.props.data.projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId\r\n        const projectTeamName = projectTeamPlanningPeriod.projectTeam.name\r\n        const estimate = projectTeamPlanningPeriod.estimate\r\n        const effortPerFunctionPoint = projectTeamPlanningPeriod.effortPerFunctionPoint\r\n        const calculatedFinishDate = projectTeamPlanningPeriod.calculatedFinishDate\r\n        const planningPeriodName = projectTeamPlanningPeriod.planningPeriod.name\r\n        const planningPeriodStart = projectTeamPlanningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = projectTeamPlanningPeriod.planningPeriod.end\r\n        const projectTeamPlanningPeriodSystems = projectTeamPlanningPeriod.projectTeamPlanningPeriodSystems\r\n        const changeRequests = projectTeamPlanningPeriod.changeRequests\r\n\r\n        const timeSheetsByDate = projectTeamPlanningPeriod.timeSheetsByDate\r\n        const timeSpentCumsumAtEndPrediction = projectTeamPlanningPeriod.timeSpentCumsumAtEndPrediction\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        const systemsTableContents = projectTeamPlanningPeriodSystems.slice()\r\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\r\n            .map(projectTeamPlanningPeriodSystem => (\r\n                    {\r\n                        id: projectTeamPlanningPeriodSystem.id,\r\n                        estimate: projectTeamPlanningPeriodSystem.estimate,\r\n                        timeLeft: projectTeamPlanningPeriodSystem.timeLeft,\r\n                        systemId: projectTeamPlanningPeriodSystem.system.id,\r\n                        systemName: projectTeamPlanningPeriodSystem.system.name,\r\n                        effortPerFunctionPoint: projectTeamPlanningPeriodSystem.effortPerFunctionPoint,\r\n                        calculatedFinishDate: projectTeamPlanningPeriodSystem.calculatedFinishDate\r\n                    }\r\n            ))\r\n\r\n        const systemsTableColumns = [\r\n            {\r\n                field: 'systemName',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/projectTeams/${ projectTeamId }/systems/${ params.getValue(params.id, 'systemId') }` }>\r\n                        { params.getValue(params.id, 'systemName') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'calculatedFinishDate',\r\n                headerName: 'Расчетная дата завершения',\r\n                width: 200,\r\n                align: 'center',\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 2}),\r\n            },\r\n        ];\r\n\r\n        const changeRequestsTableContents = changeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(changeRequest => (\r\n                    {\r\n                        id: changeRequest.id,\r\n                        name: changeRequest.name,\r\n                        hasValue: changeRequest.hasValue,\r\n                        estimate: changeRequest.estimate,\r\n                        timeLeft: changeRequest.timeLeft,\r\n                        stateCategoryId: changeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint\r\n                    }\r\n            ))\r\n\r\n        const changeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'id') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 2}) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Проектная команда { projectTeamName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                    <br />\r\n                    Расчетная дата завершения { calculatedFinishDate }\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    timeSpentCumsumAtEndPrediction={ timeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <ValueByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\r\n                />\r\n\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemsTableContents }\r\n                        columns={ systemsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n               <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку ПО\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ changeRequestsTableContents }\r\n                        columns={ changeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId, {\r\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, projectTeamId: props.match.params.projectTeamId }}}\r\n})(ProjectTeamPlanningPeriodDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\CapacityAndQueue.js",["85","86"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box} from \"@material-ui/core\";\r\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { DataGridPro, GridToolbarContainer, GridToolbarExport, } from '@mui/x-data-grid-pro';\r\n\r\nconst fetchCapacityAndQueue = gql`\r\n    query capacityAndQueue {\r\n        companies {\r\n            id\r\n            name\r\n            actualChangeRequestCapacity\r\n            actualAnalysisCapacity\r\n            actualDevelopmentCapacity\r\n            actualTestingCapacity\r\n            \r\n            timeLeft\r\n            analysisTimeLeft\r\n            developmentTimeLeft\r\n            testingTimeLeft\r\n            \r\n            queueLength\r\n            analysisQueueLength\r\n            developmentQueueLength\r\n            testingQueueLength\r\n        }\r\n        \r\n        dedicatedTeams {\r\n            id\r\n            name\r\n            actualChangeRequestCapacity\r\n            actualAnalysisCapacity\r\n            actualDevelopmentCapacity\r\n            actualTestingCapacity\r\n            \r\n            timeLeft\r\n            analysisTimeLeft\r\n            developmentTimeLeft\r\n            testingTimeLeft\r\n            \r\n            queueLength\r\n            analysisQueueLength\r\n            developmentQueueLength\r\n            testingQueueLength\r\n        }\r\n        \r\n        projectTeams {\r\n            id\r\n            name\r\n            actualChangeRequestCapacity\r\n            actualAnalysisCapacity\r\n            actualDevelopmentCapacity\r\n            actualTestingCapacity\r\n            \r\n            timeLeft\r\n            analysisTimeLeft\r\n            developmentTimeLeft\r\n            testingTimeLeft\r\n            \r\n            queueLength\r\n            analysisQueueLength\r\n            developmentQueueLength\r\n            testingQueueLength\r\n            \r\n            dedicatedTeam {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nfunction ToolBarWithExport() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      <GridToolbarExport />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nclass CapacityAndQueue extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const companies = this.props.data.companies\r\n        const dedicatedTeams = this.props.data.dedicatedTeams\r\n        const projectTeams = this.props.data.projectTeams\r\n\r\n        const companiesQueue = companies.slice().map(\r\n            company => {\r\n                return {\r\n                    id: company.id,\r\n                    name: company.name,\r\n                    queueLength: Math.round(company.queueLength / 22),\r\n                    analysisQueueLength: Math.round(company.analysisQueueLength / 22),\r\n                    developmentQueueLength: Math.round(company.developmentQueueLength / 22),\r\n                    testingQueueLength: Math.round(company.testingQueueLength / 22)\r\n                }\r\n            }\r\n        )\r\n\r\n        const dedicatedTeamsQueue = dedicatedTeams.slice().map(\r\n            dedicatedTeam => {\r\n                return {\r\n                    id: dedicatedTeam.id,\r\n                    name: dedicatedTeam.name,\r\n                    queueLength: Math.round(dedicatedTeam.queueLength / 22),\r\n                    analysisQueueLength: Math.round(dedicatedTeam.analysisQueueLength / 22),\r\n                    developmentQueueLength: Math.round(dedicatedTeam.developmentQueueLength / 22),\r\n                    testingQueueLength: Math.round(dedicatedTeam.testingQueueLength / 22)\r\n                }\r\n            }\r\n        )\r\n\r\n        const projectTeamsQueue = projectTeams.slice().map(\r\n            projectTeam => {\r\n                return {\r\n                    id: projectTeam.id,\r\n                    name: projectTeam.name + \" : \" + projectTeam.dedicatedTeam.name,\r\n                    queueLength: Math.round(projectTeam.queueLength / 22),\r\n                    manDaysLeft: Math.round(projectTeam.timeLeft / 8 * 10) / 10,\r\n                    fte: Math.round(projectTeam.actualChangeRequestCapacity / 8 * 10) / 10,\r\n                    analysisFte: Math.round(projectTeam.actualAnalysisCapacity / 8 * 10) / 10,\r\n                    analysisManDaysLeft: Math.round(projectTeam.analysisTimeLeft / 8 * 10) / 10,\r\n                    developmentFte: Math.round(projectTeam.actualDevelopmentCapacity / 8 * 10) / 10,\r\n                    developmentManDaysLeft: Math.round(projectTeam.developmentTimeLeft / 8 * 10) / 10,\r\n                    testingFte: Math.round(projectTeam.actualTestingCapacity / 8 * 10) / 10,\r\n                    testingManDaysLeft: Math.round(projectTeam.testingTimeLeft / 8 * 10) / 10,\r\n                    analysisQueueLength: Math.round(projectTeam.analysisQueueLength / 22),\r\n                    developmentQueueLength: Math.round(projectTeam.developmentQueueLength / 22),\r\n                    testingQueueLength: Math.round(projectTeam.testingQueueLength / 22)\r\n                }\r\n            }\r\n        )\r\n\r\n        const top10ProjectTeams = projectTeamsQueue.sort(\r\n            function(a, b) {\r\n                return Math.max(\r\n                    b.queueLength,\r\n                    b.analysisQueueLength,\r\n                    b.developmentQueueLength,\r\n                    b.testingQueueLength\r\n                ) - Math.max(\r\n                    a.queueLength,\r\n                    a.analysisQueueLength,\r\n                    a.developmentQueueLength,\r\n                    a.testingQueueLength\r\n                )\r\n            }\r\n        ).slice(0, 9)\r\n\r\n        const top20To50ProjectTeams = projectTeamsQueue.sort(\r\n            function(a, b) {\r\n                return Math.max(\r\n                    b.queueLength,\r\n                    b.analysisQueueLength,\r\n                    b.developmentQueueLength,\r\n                    b.testingQueueLength\r\n                ) - Math.max(\r\n                    a.queueLength,\r\n                    a.analysisQueueLength,\r\n                    a.developmentQueueLength,\r\n                    a.testingQueueLength\r\n                )\r\n            }\r\n        ).slice(10)\r\n\r\n        const topDedicatedTeamsWithCompanies = companiesQueue.concat(dedicatedTeamsQueue).sort(\r\n                        function(a, b) {\r\n                return Math.max(\r\n                    b.queueLength,\r\n                    b.analysisQueueLength,\r\n                    b.developmentQueueLength,\r\n                    b.testingQueueLength\r\n                ) - Math.max(\r\n                    a.queueLength,\r\n                    a.analysisQueueLength,\r\n                    a.developmentQueueLength,\r\n                    a.testingQueueLength\r\n                )\r\n            }\r\n        )\r\n\r\n        const topDedicatedTeamsWithCompaniesColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'queueLength',\r\n                headerName: 'Очередь (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'analysisQueueLength',\r\n                headerName: 'Очередь аналитики (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'developmentQueueLength',\r\n                headerName: 'Очередь разработки (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'testingQueueLength',\r\n                headerName: 'Очередь тестирования (мес)',\r\n                flex: 1,\r\n            },\r\n        ];\r\n\r\n        const topProjectTeams = projectTeamsQueue.sort(\r\n                        function(a, b) {\r\n                return Math.max(\r\n                    b.queueLength,\r\n                    b.analysisQueueLength,\r\n                    b.developmentQueueLength,\r\n                    b.testingQueueLength\r\n                ) - Math.max(\r\n                    a.queueLength,\r\n                    a.analysisQueueLength,\r\n                    a.developmentQueueLength,\r\n                    a.testingQueueLength\r\n                )\r\n            }\r\n        )\r\n\r\n        const topProjectTeamsColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'queueLength',\r\n                headerName: 'Очередь (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'manDaysLeft',\r\n                headerName: 'Трудоемкость (чел дней)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'fte',\r\n                headerName: 'Трудомощность FTE',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'analysisQueueLength',\r\n                headerName: 'Очередь аналитики (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'analysisManDaysLeft',\r\n                headerName: 'Трудоемкость аналитики (чел дней)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'analysisFte',\r\n                headerName: 'Трудомощность аналитики FTE',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'developmentQueueLength',\r\n                headerName: 'Очередь разработки (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'developmentManDaysLeft',\r\n                headerName: 'Трудоемкость разработки (чел дней)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'developmentFte',\r\n                headerName: 'Трудомощность разработки FTE',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'testingQueueLength',\r\n                headerName: 'Очередь тестирования (мес)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'testingManDaysLeft',\r\n                headerName: 'Трудоемкость тестирования (чел дней)',\r\n                flex: 1,\r\n            },\r\n            {\r\n                field: 'testingFte',\r\n                headerName: 'Трудомощность тестирования FTE',\r\n                flex: 1,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body1\">\r\n                    Выделенные команды (месяцы)\r\n                </Typography>\r\n                <BarChart\r\n                    width={1600}\r\n                    height={800}\r\n                    data={topDedicatedTeamsWithCompanies}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 30,\r\n                        bottom: 400,\r\n                    }}\r\n                    barCategoryGap=\"10%\"\r\n                    barGap=\"0%\"\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\r\n                    <YAxis domain={['auto', 'auto']} />\r\n                    <Tooltip />\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n                    <Bar dataKey=\"analysisQueueLength\" fill=\"red\" name={\"Аналитика\"} />\r\n                    <Bar dataKey=\"developmentQueueLength\" fill=\"green\" name={\"Разработка\"} />\r\n                    <Bar dataKey=\"testingQueueLength\" fill=\"blue\" name={\"Тестирование\"} />\r\n                </BarChart>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={topDedicatedTeamsWithCompanies}\r\n                        columns={topDedicatedTeamsWithCompaniesColumns}\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n\r\n                <Typography variant=\"body1\">\r\n                    Top-10 проектных команд (месяцы)\r\n                </Typography>\r\n                <BarChart\r\n                    width={1600}\r\n                    height={800}\r\n                    data={top10ProjectTeams}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 30,\r\n                        bottom: 400,\r\n                    }}\r\n                    barCategoryGap=\"10%\"\r\n                    barGap=\"0%\"\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\r\n                    <YAxis domain={['auto', 'auto']} />\r\n                    <Tooltip />\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n                    <Bar dataKey=\"analysisQueueLength\" fill=\"red\" name={\"Аналитика\"} />\r\n                    <Bar dataKey=\"developmentQueueLength\" fill=\"green\" name={\"Разработка\"} />\r\n                    <Bar dataKey=\"testingQueueLength\" fill=\"blue\" name={\"Тестирование\"} />\r\n                </BarChart>\r\n\r\n                <Typography variant=\"body1\">\r\n                    Остальные проектные команды (месяцы)\r\n                </Typography>\r\n                <BarChart\r\n                    width={1600}\r\n                    height={800}\r\n                    data={top20To50ProjectTeams}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 30,\r\n                        bottom: 400,\r\n                    }}\r\n                    barCategoryGap=\"10%\"\r\n                    barGap=\"0%\"\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\r\n                    <YAxis domain={['auto', 'auto']} />\r\n                    <Tooltip />\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n                    <Bar dataKey=\"analysisQueueLength\" fill=\"red\" name={\"Аналитика\"} />\r\n                    <Bar dataKey=\"developmentQueueLength\" fill=\"green\" name={\"Разработка\"} />\r\n                    <Bar dataKey=\"testingQueueLength\" fill=\"blue\" name={\"Тестирование\"} />\r\n                </BarChart>\r\n\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={topProjectTeams}\r\n                        columns={topProjectTeamsColumns}\r\n                        components={{\r\n                            Toolbar: ToolBarWithExport,\r\n                        }}\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchCapacityAndQueue)(CapacityAndQueue);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\utils.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDatePeriodChart.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\TimeSheetsByDateIssueChart.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ValueByDatePeriodChart.js",[],"C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\SystemPlanningPeriodDetail.js",["87","88"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchSystemPlanningPeriodByPlanningPeriodIdAndSystemId = gql`\r\n    query SystemPlanningPeriodByPlanningPeriodIdAndSystemId($planningPeriodId: Int!, $systemId: Int!) {\r\n          systemPlanningPeriodByPlanningPeriodIdAndSystemId(systemId: $systemId, planningPeriodId: $planningPeriodId) {\r\n                id\r\n                estimate\r\n                effortPerFunctionPoint\r\n                system {\r\n                    name\r\n                }\r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n                \r\n                analysisTimeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                analysisTimeSpentCumsumAtEndPrediction\r\n                \r\n                analysisEstimate\r\n                \r\n                developmentTimeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                developmentTimeSpentCumsumAtEndPrediction\r\n                \r\n                developmentEstimate\r\n                \r\n                testingTimeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                testingTimeSpentCumsumAtEndPrediction\r\n                \r\n                testingEstimate\r\n\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                timeSpentCumsumAtEndPrediction\r\n                \r\n                systemChangeRequests {\r\n                    id\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategoryId\r\n                    effortPerFunctionPoint\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass SystemPlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n\r\n        const systemPlanningPeriod = this.props.data.systemPlanningPeriodByPlanningPeriodIdAndSystemId\r\n\r\n        const systemName = systemPlanningPeriod.system.name\r\n        const estimate = systemPlanningPeriod.estimate\r\n        const effortPerFunctionPoint = systemPlanningPeriod.effortPerFunctionPoint\r\n        const planningPeriodName = systemPlanningPeriod.planningPeriod.name\r\n        const planningPeriodStart = systemPlanningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = systemPlanningPeriod.planningPeriod.end\r\n        const systemChangeRequests = systemPlanningPeriod.systemChangeRequests\r\n\r\n        const analysisTimeSheetsByDate = systemPlanningPeriod.analysisTimeSheetsByDate\r\n        const analysisTimeSpentCumsumAtEndPrediction = systemPlanningPeriod.analysisTimeSpentCumsumAtEndPrediction\r\n        const analysisEstimate = systemPlanningPeriod.analysisEstimate\r\n\r\n        const developmentTimeSheetsByDate = systemPlanningPeriod.developmentTimeSheetsByDate\r\n        const developmentTimeSpentCumsumAtEndPrediction = systemPlanningPeriod.developmentTimeSpentCumsumAtEndPrediction\r\n        const developmentEstimate = systemPlanningPeriod.developmentEstimate\r\n\r\n        const testingTimeSheetsByDate = systemPlanningPeriod.testingTimeSheetsByDate\r\n        const testingTimeSpentCumsumAtEndPrediction = systemPlanningPeriod.testingTimeSpentCumsumAtEndPrediction\r\n        const testingEstimate = systemPlanningPeriod.testingEstimate\r\n\r\n        const timeSheetsByDate = systemPlanningPeriod.timeSheetsByDate\r\n        const timeSpentCumsumAtEndPrediction = systemPlanningPeriod.timeSpentCumsumAtEndPrediction\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(systemChangeRequest => (\r\n                    {\r\n                        id: systemChangeRequest.id,\r\n                        name: systemChangeRequest.name,\r\n                        hasValue: systemChangeRequest.hasValue,\r\n                        estimate: systemChangeRequest.estimate,\r\n                        timeLeft: systemChangeRequest.timeLeft,\r\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint\r\n                    }\r\n            ))\r\n\r\n        const systemChangeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'id') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 2}) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Система { systemName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    timeSpentCumsumAtEndPrediction={ timeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ analysisTimeSheetsByDate }\r\n                    estimate={ analysisEstimate }\r\n                    timeSpentCumsumAtEndPrediction={ analysisTimeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Разработка\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ developmentTimeSheetsByDate }\r\n                    estimate={ developmentEstimate }\r\n                    timeSpentCumsumAtEndPrediction={ developmentTimeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ testingTimeSheetsByDate }\r\n                    estimate={ testingEstimate }\r\n                    timeSpentCumsumAtEndPrediction={ testingTimeSpentCumsumAtEndPrediction }\r\n                />\r\n               <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemChangeRequestsTableContents }\r\n                        columns={ systemChangeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchSystemPlanningPeriodByPlanningPeriodIdAndSystemId, {\r\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\r\n})(SystemPlanningPeriodDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\ProjectTeamPlanningPeriodSystemDetail.js",["89","90"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId = gql`\r\n     query ProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId($projectTeamId:Int!, $planningPeriodId: Int!, $systemId: Int!) {\r\n          projectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId(projectTeamId: $projectTeamId, planningPeriodId: $planningPeriodId, systemId: $systemId) {\r\n                id\r\n                estimate\r\n                effortPerFunctionPoint\r\n                system {\r\n                    name\r\n                }\r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                timeSpentCumsumAtEndPrediction\r\n                \r\n                systemChangeRequests {\r\n                    id\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategoryId\r\n                    effortPerFunctionPoint\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass ProjectTeamPlanningPeriodSystemDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n\r\n        const projectTeamPlanningPeriodSystem = this.props.data.projectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId\r\n\r\n        const systemName = projectTeamPlanningPeriodSystem.system.name\r\n        const estimate = projectTeamPlanningPeriodSystem.estimate\r\n        const effortPerFunctionPoint = projectTeamPlanningPeriodSystem.effortPerFunctionPoint\r\n        const planningPeriodName = projectTeamPlanningPeriodSystem.planningPeriod.name\r\n        const planningPeriodStart = projectTeamPlanningPeriodSystem.planningPeriod.start\r\n        const planningPeriodEnd = projectTeamPlanningPeriodSystem.planningPeriod.end\r\n        const systemChangeRequests = projectTeamPlanningPeriodSystem.systemChangeRequests\r\n\r\n        const timeSheetsByDate = projectTeamPlanningPeriodSystem.timeSheetsByDate\r\n        const timeSpentCumsumAtEndPrediction = projectTeamPlanningPeriodSystem.timeSpentCumsumAtEndPrediction\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(systemChangeRequest => (\r\n                    {\r\n                        id: systemChangeRequest.id,\r\n                        name: systemChangeRequest.name,\r\n                        hasValue: systemChangeRequest.hasValue,\r\n                        estimate: systemChangeRequest.estimate,\r\n                        timeLeft: systemChangeRequest.timeLeft,\r\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint\r\n                    }\r\n            ))\r\n\r\n        const systemChangeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'id') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 2}) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Система { systemName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    timeSpentCumsumAtEndPrediction={ timeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n               <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemChangeRequestsTableContents }\r\n                        columns={ systemChangeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId, {\r\n    options: (props) => { return { variables: { projectTeamId: props.match.params.projectTeamId, planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\r\n})(ProjectTeamPlanningPeriodSystemDetail);","C:\\Users\\mikhaylovv\\PycharmProjects\\second_eye\\client\\src\\components\\DedicatedTeamPlanningPeriodSystemDetail.js",["91","92"],"import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\r\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\r\n\r\nconst fetchDedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId = gql`\r\n     query DedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId($dedicatedTeamId:Int!, $planningPeriodId: Int!, $systemId: Int!) {\r\n          dedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId(dedicatedTeamId: $dedicatedTeamId, planningPeriodId: $planningPeriodId, systemId: $systemId) {\r\n                id\r\n                estimate\r\n                effortPerFunctionPoint\r\n                system {\r\n                    name\r\n                }\r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                    timeSpentCumsumPrediction\r\n                }\r\n                \r\n                timeSpentCumsumAtEndPrediction\r\n                \r\n                systemChangeRequests {\r\n                    id\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategoryId\r\n                    effortPerFunctionPoint\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass DedicatedTeamPlanningPeriodSystemDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n\r\n        const dedicatedTeamPlanningPeriodSystem = this.props.data.dedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId\r\n\r\n        const systemName = dedicatedTeamPlanningPeriodSystem.system.name\r\n        const estimate = dedicatedTeamPlanningPeriodSystem.estimate\r\n        const effortPerFunctionPoint = dedicatedTeamPlanningPeriodSystem.effortPerFunctionPoint\r\n        const planningPeriodName = dedicatedTeamPlanningPeriodSystem.planningPeriod.name\r\n        const planningPeriodStart = dedicatedTeamPlanningPeriodSystem.planningPeriod.start\r\n        const planningPeriodEnd = dedicatedTeamPlanningPeriodSystem.planningPeriod.end\r\n        const systemChangeRequests = dedicatedTeamPlanningPeriodSystem.systemChangeRequests\r\n\r\n        const timeSheetsByDate = dedicatedTeamPlanningPeriodSystem.timeSheetsByDate\r\n        const timeSpentCumsumAtEndPrediction = dedicatedTeamPlanningPeriodSystem.timeSpentCumsumAtEndPrediction\r\n\r\n        const xAxisStart = new Date(planningPeriodStart).getTime()\r\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\r\n\r\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\r\n            .sort((a, b) =>  (\r\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\r\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\r\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\r\n                            b.timeLeft - a.timeLeft\r\n                        )\r\n                    )\r\n                )\r\n            ))\r\n            .map(systemChangeRequest => (\r\n                    {\r\n                        id: systemChangeRequest.id,\r\n                        name: systemChangeRequest.name,\r\n                        hasValue: systemChangeRequest.hasValue,\r\n                        estimate: systemChangeRequest.estimate,\r\n                        timeLeft: systemChangeRequest.timeLeft,\r\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\r\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint\r\n                    }\r\n            ))\r\n\r\n        const systemChangeRequestsTableColumns = [\r\n            {\r\n                field: 'name',\r\n                headerName: 'Название',\r\n                flex: 1,\r\n                renderCell: (params) => (\r\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'id') }` }>\r\n                        { params.getValue(params.id, 'id') } &nbsp;\r\n                        { params.getValue(params.id, 'name') }\r\n                    </RouterLink>\r\n                ),\r\n            },\r\n            {\r\n                field: 'hasValue',\r\n                headerName: 'Есть ценность',\r\n                width: 200,\r\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\r\n            },\r\n            {\r\n                field: 'estimate',\r\n                headerName: 'Оценка (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'timeLeft',\r\n                headerName: 'Осталось (ч)',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0}),\r\n            },\r\n            {\r\n                field: 'effortPerFunctionPoint',\r\n                headerName: 'Затраты на ф.т.',\r\n                width: 200,\r\n                align: 'right',\r\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 2}) ,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Система { systemName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                    <br />\r\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\r\n                </Typography>\r\n\r\n                <TimeSheetsByDatePeriodChart\r\n                    planningPeriodEnd={ planningPeriodEnd }\r\n                    title=\"Аналитика + Разработка + Тестирование\"\r\n                    xAxisStart={ xAxisStart }\r\n                    xAxisEnd={ xAxisEnd }\r\n                    color=\"black\"\r\n                    timeSheetsByDate={ timeSheetsByDate }\r\n                    estimate={ estimate }\r\n                    timeSpentCumsumAtEndPrediction={ timeSpentCumsumAtEndPrediction }\r\n                />\r\n\r\n               <Typography variant=\"h6\" noWrap>\r\n                    Заявки на доработку системы\r\n                </Typography>\r\n                <div>\r\n                    <DataGridPro\r\n                        rows={ systemChangeRequestsTableContents }\r\n                        columns={ systemChangeRequestsTableColumns }\r\n                        autoHeight\r\n                    />\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchDedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId, {\r\n    options: (props) => { return { variables: { dedicatedTeamId: props.match.params.dedicatedTeamId, planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\r\n})(DedicatedTeamPlanningPeriodSystemDetail);",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":41,"column":31,"nodeType":"99","messageId":"100","endLine":41,"endColumn":39},{"ruleId":"101","severity":1,"message":"102","line":5,"column":14,"nodeType":"103","messageId":"104","endLine":5,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":5,"column":14,"nodeType":"103","messageId":"104","endLine":5,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":5,"column":14,"nodeType":"103","messageId":"104","endLine":5,"endColumn":18},{"ruleId":"101","severity":1,"message":"105","line":6,"column":25,"nodeType":"103","messageId":"104","endLine":6,"endColumn":29},{"ruleId":"101","severity":1,"message":"106","line":6,"column":77,"nodeType":"103","messageId":"104","endLine":6,"endColumn":96},{"ruleId":"101","severity":1,"message":"102","line":5,"column":14,"nodeType":"103","messageId":"104","endLine":5,"endColumn":18},{"ruleId":"101","severity":1,"message":"107","line":79,"column":15,"nodeType":"103","messageId":"104","endLine":79,"endColumn":31},{"ruleId":"101","severity":1,"message":"102","line":5,"column":14,"nodeType":"103","messageId":"104","endLine":5,"endColumn":18},{"ruleId":"101","severity":1,"message":"107","line":49,"column":15,"nodeType":"103","messageId":"104","endLine":49,"endColumn":31},{"ruleId":"101","severity":1,"message":"102","line":5,"column":14,"nodeType":"103","messageId":"104","endLine":5,"endColumn":18},{"ruleId":"101","severity":1,"message":"107","line":49,"column":15,"nodeType":"103","messageId":"104","endLine":49,"endColumn":31},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"array-callback-return","Array.prototype.sort() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Cell' is defined but never used.","'ResponsiveContainer' is defined but never used.","'planningPeriodId' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]