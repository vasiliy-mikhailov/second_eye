[{"/Users/vmihaylov/PycharmProjects/second_eye/client/src/index.js":"1","/Users/vmihaylov/PycharmProjects/second_eye/client/src/App.js":"2","/Users/vmihaylov/PycharmProjects/second_eye/client/src/reportWebVitals.js":"3","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/CompanyDetail.js":"4","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodDetail.js":"5","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamQuarterDetail.js":"6","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonList.js":"7","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/EpicSystemDetail.js":"8","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ChangeRequestDetail.js":"9","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamPlanningPeriodDetail.js":"10","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/CapacityAndQueue.js":"11","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/EpicDetail.js":"12","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamPlanningPeriodSystemDetail.js":"13","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonSystemChangeRequestDetail.js":"14","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodPersonsList.js":"15","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodProjectTeamsList.js":"16","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamDetail.js":"17","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectManagerDetail.js":"18","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodPersonDetail.js":"19","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectManagerList.js":"20","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamDetail.js":"21","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamPlanningPeriodDetail.js":"22","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamPlanningPeriodSystemDetail.js":"23","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamQuarterDetail.js":"24","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemChangeRequestDetail.js":"25","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamList.js":"26","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemList.js":"27","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonListByProjectTeamIdAndMonth.js":"28","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/QuarterDetail.js":"29","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemDetail.js":"30","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonMonthDetailByPersonKeyAndMonth.js":"31","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemPlanningPeriodDetail.js":"32","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/QuarterProjectTeamList.js":"33","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonDetail.js":"34","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ValueByDatePeriodChart.js":"35","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ReengineeringByDatePeriodChart.js":"36","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/TimeSheetsByDatePeriodChart.js":"37","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/TimeSheetsByDateIssueChart.js":"38","/Users/vmihaylov/PycharmProjects/second_eye/client/src/utils.js":"39"},{"size":7716,"mtime":1666938632908,"results":"40","hashOfConfig":"41"},{"size":124,"mtime":1666938632915,"results":"42","hashOfConfig":"41"},{"size":362,"mtime":1666938632908,"results":"43","hashOfConfig":"41"},{"size":16089,"mtime":1667741456551,"results":"44","hashOfConfig":"41"},{"size":12667,"mtime":1666938632914,"results":"45","hashOfConfig":"41"},{"size":19335,"mtime":1667741726773,"results":"46","hashOfConfig":"41"},{"size":3601,"mtime":1666938632911,"results":"47","hashOfConfig":"41"},{"size":7254,"mtime":1666938632914,"results":"48","hashOfConfig":"41"},{"size":13556,"mtime":1667763584957,"results":"49","hashOfConfig":"41"},{"size":20938,"mtime":1666938632912,"results":"50","hashOfConfig":"41"},{"size":8324,"mtime":1666938632912,"results":"51","hashOfConfig":"41"},{"size":15939,"mtime":1666938632911,"results":"52","hashOfConfig":"41"},{"size":7850,"mtime":1666938632913,"results":"53","hashOfConfig":"41"},{"size":2833,"mtime":1666938632913,"results":"54","hashOfConfig":"41"},{"size":3088,"mtime":1666938632910,"results":"55","hashOfConfig":"41"},{"size":4309,"mtime":1666938632912,"results":"56","hashOfConfig":"41"},{"size":13046,"mtime":1666938632911,"results":"57","hashOfConfig":"41"},{"size":8498,"mtime":1666938632914,"results":"58","hashOfConfig":"41"},{"size":5994,"mtime":1666938632913,"results":"59","hashOfConfig":"41"},{"size":6202,"mtime":1666938632913,"results":"60","hashOfConfig":"41"},{"size":19048,"mtime":1666938632911,"results":"61","hashOfConfig":"41"},{"size":17438,"mtime":1666938632914,"results":"62","hashOfConfig":"41"},{"size":8195,"mtime":1666938632915,"results":"63","hashOfConfig":"41"},{"size":23189,"mtime":1667743634116,"results":"64","hashOfConfig":"41"},{"size":7150,"mtime":1666938632909,"results":"65","hashOfConfig":"41"},{"size":4519,"mtime":1666938632915,"results":"66","hashOfConfig":"41"},{"size":2659,"mtime":1666938632914,"results":"67","hashOfConfig":"41"},{"size":5513,"mtime":1666938632912,"results":"68","hashOfConfig":"41"},{"size":19028,"mtime":1667741586874,"results":"69","hashOfConfig":"41"},{"size":5273,"mtime":1666938632913,"results":"70","hashOfConfig":"41"},{"size":17848,"mtime":1666938632910,"results":"71","hashOfConfig":"41"},{"size":10999,"mtime":1666938632914,"results":"72","hashOfConfig":"41"},{"size":5925,"mtime":1666938632910,"results":"73","hashOfConfig":"41"},{"size":18117,"mtime":1666938632912,"results":"74","hashOfConfig":"41"},{"size":2986,"mtime":1666938632915,"results":"75","hashOfConfig":"41"},{"size":2884,"mtime":1666938632912,"results":"76","hashOfConfig":"41"},{"size":3807,"mtime":1666938632914,"results":"77","hashOfConfig":"41"},{"size":4046,"mtime":1666938632914,"results":"78","hashOfConfig":"41"},{"size":436,"mtime":1666938632915,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"a5l50v",{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"82"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"82"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"82"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"82"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"82"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"/Users/vmihaylov/PycharmProjects/second_eye/client/src/index.js",[],["185","186"],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/App.js",[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/reportWebVitals.js",[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/CompanyDetail.js",["187","188"],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodDetail.js",["189"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\n\nconst fetchPlanningPeriodById = gql`\n    query PlanningPeriodByIdQuery($id: Int!) {\n        planningPeriodById(id: $id) {\n            id \n            name\n            start\n            end\n            estimate\n            effortPerFunctionPoint\n            calculatedFinishDate\n            \n            dedicatedTeamPlanningPeriods {\n                id\n                estimate\n                timeLeft\n                dedicatedTeam {\n                    id\n                    name\n                }\n                effortPerFunctionPoint\n                calculatedFinishDate\n                newFunctionsTimeSpentPrevious28Days\n                timeSpentForReengineeringPercent\n            }\n            \n            systemPlanningPeriods {\n                id\n                estimate\n                timeLeft\n                system {\n                    id\n                    name\n                }\n                effortPerFunctionPoint\n                calculatedFinishDate\n            }\n    \n            timeSheetsByDate {\n                date\n                timeSpentCumsum\n                timeSpentCumsumPrediction\n                timeSpentWithoutValuePercentCumsum\n                timeSpentWithValuePercentCumsum\n                timeSpentForReengineeringPercentCumsum\n                timeSpentNotForReengineeringPercentCumsum\n            }\n        }\n    }\n`;\n\nclass PlanningPeriodDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const planningPeriodId = this.props.match.params.id\n        const planningPeriod = this.props.data.planningPeriodById\n        const estimate = planningPeriod.estimate\n        const effortPerFunctionPoint = planningPeriod.effortPerFunctionPoint\n        const calculatedFinishDate = planningPeriod.calculatedFinishDate\n        const planningPeriodStart = planningPeriod.start\n        const planningPeriodEnd = planningPeriod.end\n\n        const dedicatedTeamPlanningPeriods = planningPeriod.dedicatedTeamPlanningPeriods\n        const systemPlanningPeriods = planningPeriod.systemPlanningPeriods\n\n        const timeSheetsByDate = planningPeriod.timeSheetsByDate\n\n        const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\n        const xAxisStart = new Date(planningPeriodStart).getTime() - fourWeeks\n        const xAxisEnd = new Date(planningPeriodEnd).getTime() + fourWeeks\n\n        const dedicatedTeamsTableContents = dedicatedTeamPlanningPeriods.slice()\n            .sort((a, b) => ((a.dedicatedTeam.name > b.dedicatedTeam.name) ? 1 : ((a.dedicatedTeam.name < b.dedicatedTeam.name) ? -1 : 0)))\n            .map(dedicatedTeamPlanningPeriod => (\n                    {\n                        id: dedicatedTeamPlanningPeriod.id,\n                        estimate: dedicatedTeamPlanningPeriod.estimate,\n                        timeLeft: dedicatedTeamPlanningPeriod.timeLeft,\n                        dedicatedTeamId: dedicatedTeamPlanningPeriod.dedicatedTeam.id,\n                        dedicatedTeamName: dedicatedTeamPlanningPeriod.dedicatedTeam.name,\n                        effortPerFunctionPoint: dedicatedTeamPlanningPeriod.effortPerFunctionPoint,\n                        calculatedFinishDate: dedicatedTeamPlanningPeriod.calculatedFinishDate,\n                        newFunctionsTimeSpentPrevious28Days: dedicatedTeamPlanningPeriod.newFunctionsTimeSpentPrevious28Days,\n                        timeSpentForReengineeringPercent: dedicatedTeamPlanningPeriod.timeSpentForReengineeringPercent,\n                    }\n            ))\n\n        const dedicatedTeamsTableColumns = [\n            {\n                field: 'dedicatedTeamName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/dedicatedTeams/${ params.getValue(params.id, 'dedicatedTeamId') }` }>\n                        { params.getValue(params.id, 'dedicatedTeamName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'newFunctionsTimeSpentPrevious28Days',\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'timeSpentForReengineeringPercent',\n                headerName: 'Затраты на технологическое перевооружение и исправление проблем (%)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }) ,\n            },\n\n        ];\n\n        const systemsTableContents = systemPlanningPeriods.slice()\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\n            .map(systemPlanningPeriod => (\n                    {\n                        id: systemPlanningPeriod.id,\n                        estimate: systemPlanningPeriod.estimate,\n                        timeLeft: systemPlanningPeriod.timeLeft,\n                        systemId: systemPlanningPeriod.system.id,\n                        systemName: systemPlanningPeriod.system.name,\n                        effortPerFunctionPoint: systemPlanningPeriod.effortPerFunctionPoint,\n                        calculatedFinishDate: systemPlanningPeriod.calculatedFinishDate\n                    }\n            ))\n\n        const systemsTableColumns = [\n            {\n                field: 'systemName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/systems/${ params.getValue(params.id, 'systemId') }` }>\n                        { params.getValue(params.id, 'systemName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Расчетная дата завершения { calculatedFinishDate }\n                    <br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\n                </Typography>\n\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <ValueByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\n                />\n\n                <ReengineeringByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\n                />\n\n                <br />\n\n                <Typography variant=\"body1\">\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/projectTeams` }>\n                        Затраты на функциональные точки по проектным командам\n                    </RouterLink>\n                </Typography>\n                <br />\n\n                <Typography variant=\"body1\">\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/persons` }>\n                        Затраты на функциональную точку по сотрудникам\n                    </RouterLink>\n                </Typography>\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                    Выделенные команды\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ dedicatedTeamsTableContents }\n                        columns={ dedicatedTeamsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                    Системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemsTableContents }\n                        columns={ systemsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchPlanningPeriodById, {\n    options: (props) => { return { variables: { id: props.match.params.id }}}\n})(PlanningPeriodDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamQuarterDetail.js",["190","191","192"],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonList.js",["193","194","195","196","197","198"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport {graphql} from '@apollo/client/react/hoc';\nimport moment from 'moment';\nimport Typography from '@material-ui/core/Typography';\nimport {Link as RouterLink, NavLink} from \"react-router-dom\"\nimport {Box, Link} from \"@material-ui/core\";\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\n\nfunction ToolBarWithExport() {\n  return (\n    <GridToolbarContainer>\n      <GridToolbarExport />\n    </GridToolbarContainer>\n  );\n}\n\nconst fetchPersonList = gql`\n    query Persons {\n        persons {\n            id \n            name\n            mainProjectTeam {\n                id\n                name\n                dedicatedTeam {\n                    id\n                    name\n                }\n            }\n        }\n    }\n`;\n\nclass PersonList extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const persons = this.props.data.persons\n\n        const personsTableContents = persons.slice()\n            .filter((person) => (\n              person.mainProjectTeam.id != -1\n            ))\n            .sort((a, b) =>  (\n                (a.name > b.name) ? 1 : (\n                    (a.name == b.name) ? 0 : -1\n                )\n            ))\n            .map(person => (\n                    {\n                        id: person.id,\n                        name: person.name,\n                        mainProjectTeamId: person.mainProjectTeam.id,\n                        mainProjectTeamName: person.mainProjectTeam.name,\n                        mainDedicatedTeamId: person.mainProjectTeam.dedicatedTeam.id,\n                        mainDedicatedTeamName: person.mainProjectTeam.dedicatedTeam.name,\n                    }\n            ))\n\n            const personsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Имя',\n                flex: 1,\n            },\n            {\n                field: 'mainProjectTeamName',\n                headerName: 'Основная проектная команда',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'mainProjectTeamId') }` }>\n                        { params.getValue(params.id, 'mainProjectTeamName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'mainDedicatedTeamName',\n                headerName: 'Основная выделенная команда',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/dedicatedTeams/${ params.getValue(params.id, 'mainDedicatedTeamId') }` }>\n                        { params.getValue(params.id, 'mainDedicatedTeamName') }\n                    </RouterLink>\n                ),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Команда\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ personsTableContents }\n                        columns={ personsTableColumns }\n                        components={{\n                            Toolbar: ToolBarWithExport,\n                        }}\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchPersonList)(PersonList);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/EpicSystemDetail.js",["199"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\n\nconst fetchEpicSystemByEpicKeyAndSystemId = gql`\n     query EpicSystemByEpicKeyAndSystemId($epicKey: String!, $systemId: Int!) {\n          epicSystemByEpicKeyAndSystemId(epicKey: $epicKey, systemId: $systemId) {\n                id\n                estimate\n                calculatedFinishDate\n                effortPerFunctionPoint\n                system {\n                    name\n                }\n\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                systemChangeRequests {\n                    id\n                    key\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategoryId\n                    effortPerFunctionPoint\n                }\n          }\n    }\n`;\n\nclass EpicSystemDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const epicSystem = this.props.data.epicSystemByEpicKeyAndSystemId\n\n        const systemName = epicSystem.system.name\n        const estimate = epicSystem.estimate\n        const calculatedFinishDate = epicSystem.calculatedFinishDate\n        const effortPerFunctionPoint = epicSystem.effortPerFunctionPoint\n        const systemChangeRequests = epicSystem.systemChangeRequests\n\n        const timeSheetsByDate = epicSystem.timeSheetsByDate\n\n        const today = (new Date()).getTime()\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\n\n        const allEdgeDates = [today]\n\n        if (firstTimeSheetDate) {\n            allEdgeDates.push(firstTimeSheetDate)\n        }\n\n        if (lastTimeSheetDate) {\n            allEdgeDates.push(lastTimeSheetDate)\n        }\n\n        if (calculatedFinishDate) {\n            allEdgeDates.push(new Date(calculatedFinishDate).getTime())\n        }\n\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\n\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(systemChangeRequest => (\n                    {\n                        id: systemChangeRequest.id,\n                        key: systemChangeRequest.key,\n                        name: systemChangeRequest.name,\n                        hasValue: systemChangeRequest.hasValue,\n                        estimate: systemChangeRequest.estimate,\n                        timeLeft: systemChangeRequest.timeLeft,\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint\n                    }\n            ))\n\n        const systemChangeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Система { systemName }<br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка<br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                </Typography>\n\n                <TimeSheetsByDatePeriodChart\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n               <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemChangeRequestsTableContents }\n                        columns={ systemChangeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchEpicSystemByEpicKeyAndSystemId, {\n    options: (props) => { return { variables: { epicKey: props.match.params.epicKey, systemId: props.match.params.systemId }}}\n})(EpicSystemDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ChangeRequestDetail.js",["200"],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamPlanningPeriodDetail.js",["201","202"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\n\nconst fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId = gql`\n        query DedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId($planningPeriodId: Int!, $dedicatedTeamId: Int!) {\n              dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId(dedicatedTeamId: $dedicatedTeamId, planningPeriodId: $planningPeriodId) {\n                    id\n                    estimate\n                    effortPerFunctionPoint\n                    calculatedFinishDate\n                    dedicatedTeam {\n                        name\n                        cio {\n                            name\n                        }\n                        cto {\n                            name\n                        }\n                    }\n                    planningPeriod {\n                        name\n                        start\n                        end\n                    }\n                    timeSheetsByDate {\n                        date\n                        timeSpentCumsum\n                        timeSpentCumsumPrediction\n                        timeSpentWithoutValuePercentCumsum\n                        timeSpentWithValuePercentCumsum\n                        timeSpentForReengineeringPercentCumsum\n                        timeSpentNotForReengineeringPercentCumsum\n                    }\n                    \n                    projectTeamPlanningPeriods {\n                        id\n                        estimate\n                        timeLeft\n                        projectTeam {\n                            id\n                            name\n                        }\n                        effortPerFunctionPoint\n                        calculatedFinishDate\n                        timeSpentChronon\n                    }\n                    \n                    dedicatedTeamPlanningPeriodSystems {\n                        id\n                        estimate\n                        timeLeft\n                        system {\n                            id\n                            name\n                        }\n                        effortPerFunctionPoint\n                        calculatedFinishDate\n                    }\n                    \n                    changeRequests {\n                        id\n                        key\n                        estimate\n                        timeLeft\n                        hasValue\n                        name\n                        stateCategoryId\n                        effortPerFunctionPoint\n                        calculatedFinishDate\n                        timeSpentChronon\n                    }\n                    \n                    positions {\n                        position {\n                            id\n                            name\n                            url\n                        }\n                        \n                        person {\n                            id\n                            key\n                            name\n                        }\n                        timeSpent\n                        timeSpentChrononFte\n                        totalCapacityFte\n                    }\n              }\n        }\n`;\n\nclass DedicatedTeamPlanningPeriodDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const planningPeriodId = this.props.match.params.planningPeriodId\n        const dedicatedTeamId = this.props.match.params.dedicatedTeamId\n\n        const dedicatedTeamPlanningPeriod = this.props.data.dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId\n\n        const dedicatedTeamName = dedicatedTeamPlanningPeriod.dedicatedTeam.name\n        const cioName = dedicatedTeamPlanningPeriod.dedicatedTeam.cio.name\n        const ctoName = dedicatedTeamPlanningPeriod.dedicatedTeam.cto.name\n        const estimate = dedicatedTeamPlanningPeriod.estimate\n        const effortPerFunctionPoint = dedicatedTeamPlanningPeriod.effortPerFunctionPoint\n        const calculatedFinishDate = dedicatedTeamPlanningPeriod.calculatedFinishDate\n        const planningPeriodName = dedicatedTeamPlanningPeriod.planningPeriod.name\n        const planningPeriodStart = dedicatedTeamPlanningPeriod.planningPeriod.start\n        const planningPeriodEnd = dedicatedTeamPlanningPeriod.planningPeriod.end\n        const projectTeamPlanningPeriods = dedicatedTeamPlanningPeriod.projectTeamPlanningPeriods\n        const dedicatedTeamPlanningPeriodSystems = dedicatedTeamPlanningPeriod.dedicatedTeamPlanningPeriodSystems\n        const changeRequests = dedicatedTeamPlanningPeriod.changeRequests\n        const positions = dedicatedTeamPlanningPeriod.positions\n\n        const timeSheetsByDate = dedicatedTeamPlanningPeriod.timeSheetsByDate\n\n        const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\n        const xAxisStart = new Date(planningPeriodStart).getTime() - fourWeeks\n        const xAxisEnd = new Date(planningPeriodEnd).getTime() + fourWeeks\n\n        const systemsTableContents = dedicatedTeamPlanningPeriodSystems.slice()\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\n            .map(dedicatedTeamPlanningPeriodSystem => (\n                    {\n                        id: dedicatedTeamPlanningPeriodSystem.id,\n                        estimate: dedicatedTeamPlanningPeriodSystem.estimate,\n                        timeLeft: dedicatedTeamPlanningPeriodSystem.timeLeft,\n                        systemId: dedicatedTeamPlanningPeriodSystem.system.id,\n                        systemName: dedicatedTeamPlanningPeriodSystem.system.name,\n                        effortPerFunctionPoint: dedicatedTeamPlanningPeriodSystem.effortPerFunctionPoint,\n                        calculatedFinishDate: dedicatedTeamPlanningPeriodSystem.calculatedFinishDate,\n                    }\n            ))\n\n        const systemsTableColumns = [\n            {\n                field: 'systemName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/dedicatedTeams/${ dedicatedTeamId }/systems/${ params.getValue(params.id, 'systemId') }` }>\n                        { params.getValue(params.id, 'systemName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        const projectTeamsTableContents = projectTeamPlanningPeriods.slice()\n            .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\n            .map(projectTeamPlanningPeriod => (\n                    {\n                        id: projectTeamPlanningPeriod.id,\n                        estimate: projectTeamPlanningPeriod.estimate,\n                        timeLeft: projectTeamPlanningPeriod.timeLeft,\n                        projectTeamId: projectTeamPlanningPeriod.projectTeam.id,\n                        projectTeamName: projectTeamPlanningPeriod.projectTeam.name,\n                        effortPerFunctionPoint: projectTeamPlanningPeriod.effortPerFunctionPoint,\n                        calculatedFinishDate: projectTeamPlanningPeriod.calculatedFinishDate,\n                        timeSpentChronon: projectTeamPlanningPeriod.timeSpentChronon\n                    }\n            ))\n\n        const projectTeamsTableColumns = [\n            {\n                field: 'projectTeamName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\n                        { params.getValue(params.id, 'projectTeamName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'timeSpentChronon',\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n        const changeRequestsTableContents = changeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(changeRequest => (\n                    {\n                        id: changeRequest.id,\n                        key: changeRequest.key,\n                        name: changeRequest.name,\n                        hasValue: changeRequest.hasValue,\n                        estimate: changeRequest.estimate,\n                        timeLeft: changeRequest.timeLeft,\n                        stateCategoryId: changeRequest.stateCategoryId,\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\n                        calculatedFinishDate: changeRequest.calculatedFinishDate,\n                        timeSpentChronon: changeRequest.timeSpentChronon\n                    }\n            ))\n\n        const changeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'timeSpentChronon',\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n        const positionsTableContents = positions.slice()\n            .sort((a, b) =>  (\n                (a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : (\n                    (a.timeSpentChrononFte == b.timeSpentChrononFte) ? 0 : 1\n                )\n            ))\n            .map(position => (\n                    {\n                        id: position.person.id,\n                        key: position.person.key,\n                        name: position.person.name,\n                        position: position.position.name,\n                        timeSpent: position.timeSpent,\n                        timeSpentChrononFte: position.timeSpentChrononFte,\n                        totalCapacityFte: position.totalCapacityFte\n                    }\n            ))\n\n        const positionsTableColumns = [\n            {\n                field: 'position',\n                headerName: 'Позиция',\n                flex: 1,\n            },\n            {\n                field: 'name',\n                headerName: 'Имя',\n                flex: 1,\n            },\n            {\n                field: 'timeSpent',\n                headerName: 'Списано всего (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'totalCapacityFte',\n                headerName: 'Плановый FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\n            },\n            {\n                field: 'timeSpentChrononFte',\n                headerName: 'Фактический FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Выделенная команда { dedicatedTeamName }\n                    <br />\n                    Бизнес-партнер { cioName }\n                    <br />\n                    Руководитель разработки (CTO) { ctoName }\n                    <br />\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\n                    <br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                    <br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\n                </Typography>\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Фактический объем работ:Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <ValueByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\n                />\n\n                <ReengineeringByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\n                />\n\n                <Typography variant=\"h6\" noWrap>\n                    Проектные команды\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ projectTeamsTableContents }\n                        columns={ projectTeamsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                    Системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemsTableContents }\n                        columns={ systemsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку ПО\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ changeRequestsTableContents }\n                        columns={ changeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <Typography variant=\"h6\" noWrap>\n                    Команда\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ positionsTableContents }\n                        columns={ positionsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId, {\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, dedicatedTeamId: props.match.params.dedicatedTeamId }}}\n})(DedicatedTeamPlanningPeriodDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/CapacityAndQueue.js",["203","204","205"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box} from \"@material-ui/core\";\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { DataGridPro, GridToolbarContainer, GridToolbarExport, } from '@mui/x-data-grid-pro';\nimport {Link as RouterLink} from \"react-router-dom\";\n\nconst fetchCapacityAndQueue = gql`\n    query capacityAndQueue {\n        companies {\n            id\n            name         \n            queueLength\n        }\n        \n        dedicatedTeams {\n            id\n            name\n            queueLength\n        }\n        \n        projectTeams {\n            id\n            name\n            queueLength\n            \n            dedicatedTeam {\n                name\n            }\n        }\n    }\n`;\n\nfunction ToolBarWithExport() {\n  return (\n    <GridToolbarContainer>\n        <GridToolbarExport\n          csvOptions={{\n              delimiter: \";\",\n              utf8WithBom: true,\n          }}\n        />\n\n\n    </GridToolbarContainer>\n  );\n}\n\nclass CapacityAndQueue extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const companies = this.props.data.companies\n        const dedicatedTeams = this.props.data.dedicatedTeams\n        const projectTeams = this.props.data.projectTeams\n\n        const companiesQueue = companies.slice().map(\n            company => {\n                return {\n                    id: company.id,\n                    name: company.name,\n                    queueLength: Math.round(company.queueLength),\n                }\n            }\n        )\n\n        const dedicatedTeamsQueue = dedicatedTeams.slice().map(\n            dedicatedTeam => {\n                return {\n                    id: dedicatedTeam.id,\n                    name: dedicatedTeam.name,\n                    queueLength: Math.round(dedicatedTeam.queueLength),\n                }\n            }\n        )\n\n        const projectTeamsQueue = projectTeams.slice().map(\n            projectTeam => {\n                return {\n                    id: projectTeam.id,\n                    name: projectTeam.name + \" : \" + projectTeam.dedicatedTeam.name,\n                    queueLength: Math.round(projectTeam.queueLength),\n                }\n            }\n        )\n\n        const top10ProjectTeams = projectTeamsQueue.sort(\n            function(a, b) {\n                return b.queueLength - a.queueLength\n            }\n        ).slice(0, 9)\n\n        const top20To50ProjectTeams = projectTeamsQueue.sort(\n            function(a, b) {\n                return b.queueLength - a.queueLength\n            }\n        ).slice(10)\n\n        const topDedicatedTeams = dedicatedTeamsQueue.sort(\n                        function(a, b) {\n                return b.queueLength - a.queueLength\n            }\n        )\n\n        const topDedicatedTeamsColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/dedicatedTeams/${ params.getValue(params.id, 'id') }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'queueLength',\n                headerName: 'Очередь (мес)',\n                flex: 1,\n            },\n        ];\n\n        const topProjectTeams = projectTeamsQueue.sort(\n                        function(a, b) {\n                return b.queueLength - a.queueLength\n            }\n        )\n\n        const topProjectTeamsColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'id') }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'queueLength',\n                headerName: 'Очередь (мес)',\n                flex: 1,\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body1\">\n                    Выделенные команды (месяцы)\n                </Typography>\n                <BarChart\n                    width={1600}\n                    height={800}\n                    data={topDedicatedTeams}\n                    margin={{\n                        top: 5,\n                        right: 30,\n                        left: 30,\n                        bottom: 400,\n                    }}\n                    barCategoryGap=\"10%\"\n                    barGap=\"0%\"\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\n                    <YAxis domain={['auto', 'auto']} />\n                    <Tooltip />\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\n                    <Bar dataKey=\"queueLength\" name={\"Очередь (мес)\"} />\n                </BarChart>\n\n                <div>\n                    <DataGridPro\n                        rows={topDedicatedTeams}\n                        columns={topDedicatedTeamsColumns}\n                        components={{\n                            Toolbar: ToolBarWithExport,\n                        }}\n                        autoHeight\n                    />\n                </div>\n\n                <Typography variant=\"body1\">\n                    Top-10 проектных команд (месяцы)\n                </Typography>\n                <BarChart\n                    width={1600}\n                    height={800}\n                    data={top10ProjectTeams}\n                    margin={{\n                        top: 5,\n                        right: 30,\n                        left: 30,\n                        bottom: 400,\n                    }}\n                    barCategoryGap=\"10%\"\n                    barGap=\"0%\"\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\n                    <YAxis domain={['auto', 'auto']} />\n                    <Tooltip />\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\n                    <Bar dataKey=\"queueLength\" name={\"Очередь (мес)\"} />\n                </BarChart>\n\n                <Typography variant=\"body1\">\n                    Остальные проектные команды (месяцы)\n                </Typography>\n                <BarChart\n                    width={1600}\n                    height={800}\n                    data={top20To50ProjectTeams}\n                    margin={{\n                        top: 5,\n                        right: 30,\n                        left: 30,\n                        bottom: 400,\n                    }}\n                    barCategoryGap=\"10%\"\n                    barGap=\"0%\"\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" interval={0} angle={-90} textAnchor=\"end\" fontSize={10} fontFamily={\"Helvetica\"} />\n                    <YAxis domain={['auto', 'auto']} />\n                    <Tooltip />\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\n                    <Bar dataKey=\"queueLength\" name={\"Очередь (мес)\"} />\n                </BarChart>\n\n                <div>\n                    <DataGridPro\n                        rows={topProjectTeams}\n                        columns={topProjectTeamsColumns}\n                        components={{\n                            Toolbar: ToolBarWithExport,\n                        }}\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchCapacityAndQueue)(CapacityAndQueue);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/EpicDetail.js",["206"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink, NavLink} from \"react-router-dom\";\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\n\nconst fetchEpicByKey = gql`\n    query EpicByKeyQuery($key: String!) {\n        epicByKey(key: $key) {\n            id \n            key\n            name\n            \n            estimate\n            effortPerFunctionPoint\n            timeSpent\n            timeLeft\n            calculatedFinishDate\n            timeSheetsByDate {\n                date\n                timeSpentCumsum\n                timeSpentCumsumPrediction\n            }\n            \n            analysisEstimate\n            analysisTimeSpent\n            analysisTimeLeft\n            analysisTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            \n            developmentEstimate\n            developmentTimeSpent\n            developmentTimeLeft\n            developmentTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            testingEstimate\n            testingTimeSpent\n            testingTimeLeft\n            testingTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            systems {\n                id\n                estimate\n                timeLeft\n                system {\n                    id\n                    name\n                }\n                effortPerFunctionPoint\n                calculatedFinishDate\n            }\n            \n            changeRequests {\n                id\n                key\n                estimate\n                timeLeft\n                hasValue\n                name\n                stateCategoryId\n                effortPerFunctionPoint\n                calculatedFinishDate\n                newFunctionsTimeSpentPrevious28Days\n            }\n            \n            persons {\n                person {\n                    id\n                    name\n                }\n                newFunctionsTimeSpent\n                newFunctionsFullTimeEquivalentPrevious28Days\n            }\n        }\n    }\n`;\n\nclass EpicDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const epicKey = this.props.match.params.key\n        const epic = this.props.data.epicByKey\n\n        const timeSheetsByDate = epic.timeSheetsByDate\n        const systems = epic.systems\n        const changeRequests = epic.changeRequests\n        const persons = epic.persons\n\n        const estimate = epic.estimate\n        const effortPerFunctionPoint = epic.effortPerFunctionPoint\n\n        const analysisTimeSheetsByDate = epic.analysisTimeSheetsByDate\n        const analysisEstimate = epic.analysisEstimate\n\n        const developmentTimeSheetsByDate = epic.developmentTimeSheetsByDate\n        const developmentEstimate = epic.developmentEstimate\n\n        const testingTimeSheetsByDate = epic.testingTimeSheetsByDate\n        const testingEstimate = epic.testingEstimate\n\n        const calculatedFinishDate = epic.calculatedFinishDate\n\n        const today = (new Date()).getTime()\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\n\n        const allEdgeDates = [today]\n\n        if (firstTimeSheetDate) {\n            allEdgeDates.push(firstTimeSheetDate)\n        }\n\n        if (lastTimeSheetDate) {\n            allEdgeDates.push(lastTimeSheetDate)\n        }\n\n        if (calculatedFinishDate) {\n            const calculatedFinishDateAsDate = new Date(calculatedFinishDate)\n            allEdgeDates.push(calculatedFinishDateAsDate)\n        }\n\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\n\n        const systemsTableContents = systems.slice()\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\n            .map(system => (\n                    {\n                        id: system.id,\n                        estimate: system.estimate,\n                        timeLeft: system.timeLeft,\n                        systemId: system.system.id,\n                        systemName: system.system.name,\n                        effortPerFunctionPoint: system.effortPerFunctionPoint,\n                        calculatedFinishDate: system.calculatedFinishDate,\n                    }\n            ))\n\n        const systemsTableColumns = [\n            {\n                field: 'systemName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/epics/${ epicKey }/systems/${ params.getValue(params.id, 'systemId') }` }>\n                        { params.getValue(params.id, 'systemName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        const changeRequestsTableContents = changeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(changeRequest => (\n                    {\n                        id: changeRequest.id,\n                        key: changeRequest.key,\n                        name: changeRequest.name,\n                        hasValue: changeRequest.hasValue,\n                        estimate: changeRequest.estimate,\n                        timeLeft: changeRequest.timeLeft,\n                        stateCategoryId: changeRequest.stateCategoryId,\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\n                        calculatedFinishDate: changeRequest.calculatedFinishDate,\n                        newFunctionsTimeSpentPrevious28Days: changeRequest.newFunctionsTimeSpentPrevious28Days,\n                    }\n            ))\n\n        const changeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'newFunctionsTimeSpentPrevious28Days',\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n        const personsTableContents = persons.slice()\n            .sort((a, b) =>  (\n                (a.newFunctionsFullTimeEquivalentPrevious28Days > b.newFunctionsFullTimeEquivalentPrevious28Days) ? -1 : (\n                    (a.newFunctionsFullTimeEquivalentPrevious28Days == b.newFunctionsFullTimeEquivalentPrevious28Days) ? 0 : 1\n                )\n            ))\n            .map(person => (\n                    {\n                        id: person.person.id,\n                        name: person.person.name,\n                        newFunctionsTimeSpent: person.newFunctionsTimeSpent,\n                        newFunctionsFullTimeEquivalentPrevious28Days: person.newFunctionsFullTimeEquivalentPrevious28Days\n                    }\n            ))\n\n            const personsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Имя',\n                flex: 1,\n            },\n            {\n                field: 'newFunctionsTimeSpent',\n                headerName: 'Новый функционал: списано всего (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\n                headerName: 'Новый функционал: фактический FTE за 28 дней',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\n            },\n        ];\n\n        return (\n           <Box>\n                <Typography variant=\"body1\" noWrap>\n                    <NavLink to={ this.props.location.pathname }>\n                        { epic.key }\n                    </NavLink> &nbsp;\n                    { epic.name } &nbsp;\n                    <Link href={ epic.url }>\n                        [ источник ]\n                    </Link>\n                    <br />\n                    Осталось { epic.timeLeft.toFixed(1) } ч ( { (epic.timeLeft / epic.estimate * 100).toFixed(2) }% ) <br />\n                    Сделано { epic.timeSpent.toFixed(1) } ч <br />\n                    Оценка { epic.estimate.toFixed(1) } ч <br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка <br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                </Typography>\n                <br />\n\n                <TimeSheetsByDateIssueChart\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <TimeSheetsByDateIssueChart\n                    title=\"Аналитика\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"red\"\n                    timeSheetsByDate={ analysisTimeSheetsByDate }\n                    estimate={ analysisEstimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <TimeSheetsByDateIssueChart\n                    title=\"Разработка\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"green\"\n                    timeSheetsByDate={ developmentTimeSheetsByDate }\n                    estimate={ developmentEstimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <TimeSheetsByDateIssueChart\n                    title=\"Тестирование\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"blue\"\n                    timeSheetsByDate={ testingTimeSheetsByDate }\n                    estimate={ testingEstimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <Typography variant=\"h6\" noWrap>\n                    Системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemsTableContents }\n                        columns={ systemsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку ПО\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ changeRequestsTableContents }\n                        columns={ changeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <Typography variant=\"h6\" noWrap>\n                    Команда\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ personsTableContents }\n                        columns={ personsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchEpicByKey, {\n    options: (props) => { return { variables: { key: props.match.params.key }}}\n})(EpicDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamPlanningPeriodSystemDetail.js",["207","208"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\n\nconst fetchDedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId = gql`\n     query DedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId($dedicatedTeamId:Int!, $planningPeriodId: Int!, $systemId: Int!) {\n          dedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId(dedicatedTeamId: $dedicatedTeamId, planningPeriodId: $planningPeriodId, systemId: $systemId) {\n                id\n                estimate\n                calculatedFinishDate\n                effortPerFunctionPoint\n                system {\n                    name\n                }\n                \n                planningPeriod {\n                    name\n                    start\n                    end\n                }\n\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                systemChangeRequests {\n                    id\n                    key\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategoryId\n                    effortPerFunctionPoint\n                }\n          }\n    }\n`;\n\nclass DedicatedTeamPlanningPeriodSystemDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const planningPeriodId = this.props.match.params.planningPeriodId\n\n        const dedicatedTeamPlanningPeriodSystem = this.props.data.dedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId\n\n        const systemName = dedicatedTeamPlanningPeriodSystem.system.name\n        const estimate = dedicatedTeamPlanningPeriodSystem.estimate\n        const calculatedFinishDate = dedicatedTeamPlanningPeriodSystem.calculatedFinishDate\n        const effortPerFunctionPoint = dedicatedTeamPlanningPeriodSystem.effortPerFunctionPoint\n        const planningPeriodName = dedicatedTeamPlanningPeriodSystem.planningPeriod.name\n        const planningPeriodStart = dedicatedTeamPlanningPeriodSystem.planningPeriod.start\n        const planningPeriodEnd = dedicatedTeamPlanningPeriodSystem.planningPeriod.end\n        const systemChangeRequests = dedicatedTeamPlanningPeriodSystem.systemChangeRequests\n\n        const timeSheetsByDate = dedicatedTeamPlanningPeriodSystem.timeSheetsByDate\n\n        const xAxisStart = new Date(planningPeriodStart).getTime()\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\n\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(systemChangeRequest => (\n                    {\n                        id: systemChangeRequest.id,\n                        key: systemChangeRequest.key,\n                        name: systemChangeRequest.name,\n                        hasValue: systemChangeRequest.hasValue,\n                        estimate: systemChangeRequest.estimate,\n                        timeLeft: systemChangeRequest.timeLeft,\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint\n                    }\n            ))\n\n        const systemChangeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Система { systemName }<br />\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })<br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка<br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                </Typography>\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование+ Управление\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n               <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemChangeRequestsTableContents }\n                        columns={ systemChangeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchDedicatedTeamPlanningPeriodSystemByDedicatedTeamIdPlanningPeriodIdAndSystemId, {\n    options: (props) => { return { variables: { dedicatedTeamId: props.match.params.dedicatedTeamId, planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\n})(DedicatedTeamPlanningPeriodSystemDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonSystemChangeRequestDetail.js",["209","210","211"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\nimport {Link as RouterLink} from \"react-router-dom\";\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\n\nconst fetchPersonSystemChangeRequestTimeSheetsByDateByPersonKeyAndSystemChangeRequestKey = gql`\n    query PersonSystemChangeRequestTimeSheetsByDateByPersonKeyAndSystemChangeRequestKey($personKey: String!, $systemChangeRequestKey: String!) {\n        personSystemChangeRequestTimeSheetsByDateByPersonKeyAndSystemChangeRequestKey(personKey: $personKey, systemChangeRequestKey: $systemChangeRequestKey) {\n            id\n            date\n            timeSpent\n        }\n    }\n`;\n\nclass PersonSystemChangeRequestDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const timeSheetsByDate = this.props.data.personSystemChangeRequestTimeSheetsByDateByPersonKeyAndSystemChangeRequestKey\n\n        const timeSheetsTableContents = timeSheetsByDate.slice()\n            .sort((a, b) => ((a.date > b.date) ? 1 : ((a.date < b.date) ? -1 : 0)))\n            .map(timeSheetRecord => (\n                    {\n                        id: timeSheetRecord.id,\n                        date: timeSheetRecord.date,\n                        timeSpent: timeSheetRecord.timeSpent,\n                    }\n            ))\n\n        const timeSheetsTableColumns = [\n            {\n                field: 'date',\n                headerName: 'Дата',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'timeSpent',\n                headerName: 'Списано (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Тайм-шиты\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ timeSheetsTableContents }\n                        columns={ timeSheetsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchPersonSystemChangeRequestTimeSheetsByDateByPersonKeyAndSystemChangeRequestKey, {\n    options: (props) => { return { variables: { systemChangeRequestKey: props.match.params.systemChangeRequestKey, personKey: props.match.params.personKey }}}\n})(PersonSystemChangeRequestDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodPersonsList.js",["212","213","214","215","216","217","218"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport {graphql} from '@apollo/client/react/hoc';\nimport moment from 'moment';\nimport Typography from '@material-ui/core/Typography';\nimport {Link as RouterLink, NavLink} from \"react-router-dom\"\nimport {Box, Link} from \"@material-ui/core\";\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\n\nconst fetchPlanningPeriodPersonList = gql`\n    query PlanningPeriodByIdQuery($id: Int!) {\n        planningPeriodById(id: $id) {\n            persons {\n              personId\n              personKey\n              personName\n              effortPerFunctionPoint\n              newFunctionsTimeSpent\n            }\n        }\n    }\n`;\n\nclass PlanningPeriodPersonsList extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const planningPeriodId = this.props.match.params.planningPeriodId\n\n        const persons = this.props.data.planningPeriodById.persons\n\n        const personsTableContents = persons.slice()\n            .sort((a, b) =>  (\n                (a.personName > b.personName) ? 1 : (\n                    (a.personName == b.personName) ? 0 : -1\n                )\n            ))\n            .map(person => (\n                    {\n                        id: person.personId,\n                        personId: person.personId,\n                        key: person.personKey,\n                        name: person.personName,\n                        effortPerFunctionPoint: person.effortPerFunctionPoint,\n                    }\n            ))\n\n            const personsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'ФИО',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/persons/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Команда\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ personsTableContents }\n                        columns={ personsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchPlanningPeriodPersonList, {\n    options: (props) => { return { variables: { id: props.match.params.planningPeriodId }}}\n})(PlanningPeriodPersonsList);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodProjectTeamsList.js",["219","220","221","222"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\n\nconst fetchPlanningPeriodById = gql`\n    query PlanningPeriodByIdQuery($id: Int!) {\n        planningPeriodById(id: $id) {\n            name\n            projectTeamPlanningPeriods {\n                id\n                projectTeam {\n                    id\n                    name\n                    projectManager {\n                      id\n                      name\n                    }\n                    dedicatedTeam {\n                      id\n                      name\n                    }\n                }\n                effortPerFunctionPoint\n                functionPoints\n            }\n        }\n    }\n`;\n\nclass PlanningPeriodProjectTeamsList extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const planningPeriodId = this.props.match.params.planningPeriodId\n\n        const planningPeriodName = this.props.data.planningPeriodById.name\n\n        const projectTeamPlanningPeriods = this.props.data.planningPeriodById.projectTeamPlanningPeriods\n\n        const projectTeamsTableContents = projectTeamPlanningPeriods.slice()\n            .sort((a, b) => ((a.projectTeam.name > b.projectTeam.name) ? 1 : ((a.projectTeam.name < b.projectTeam.name) ? -1 : 0)))\n            .map(projectTeamPlanningPeriod => (\n                    {\n                        id: projectTeamPlanningPeriod.id,\n                        projectTeamId: projectTeamPlanningPeriod.projectTeam.id,\n                        projectTeamName: projectTeamPlanningPeriod.projectTeam.name,\n                        projectManagerName: projectTeamPlanningPeriod.projectTeam.projectManager.name,\n                        effortPerFunctionPoint: projectTeamPlanningPeriod.effortPerFunctionPoint,\n                        functionPoints: projectTeamPlanningPeriod.functionPoints,\n                    }\n            ))\n\n        const projectTeamsTableColumns = [\n            {\n                field: 'projectTeamName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/planningPeriods/${planningPeriodId}/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\n                        { params.getValue(params.id, 'projectTeamName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'projectManagerName',\n                headerName: 'Руководитель проекта',\n                flex: 1,\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'functionPoints',\n                headerName: 'Функциональных точек (шт)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Проектные команды\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ projectTeamsTableContents }\n                        columns={ projectTeamsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchPlanningPeriodById, {\n    options: (props) => { return { variables: { id: props.match.params.planningPeriodId }}}\n})(PlanningPeriodProjectTeamsList);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/DedicatedTeamDetail.js",["223","224","225"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\";\n\nconst fetchDedicatedTeamByDedicatedTeamId = gql`\n         query DedicatedTeamById($id: Int!) {\n              dedicatedTeamById(id: $id) {\n                    id\n                    estimate\n                    name\n                    cio {\n                        name\n                    }\n                    cto {\n                        name\n                    }\n                    calculatedFinishDate\n               \n                    timeSheetsByDate {\n                        date\n                        timeSpentCumsum\n                        timeSpentCumsumPrediction\n                        timeSpentWithoutValuePercentCumsum\n                        timeSpentWithValuePercentCumsum\n                        timeSpentForReengineeringPercentCumsum\n                        timeSpentNotForReengineeringPercentCumsum\n                    }\n               \n                    projectTeams {\n                        id\n                        estimate\n                        timeLeft\n                        name\n                        calculatedFinishDate\n                        timeSpentChronon\n                        queueLength\n                        positionPersonPlanFactIssueCount\n                        timeSpentForReengineeringPercent\n                    }\n                    \n                    dedicatedTeamPlanningPeriods {\n                        planningPeriod {\n                            id \n                            name\n                            start\n                            end\n                        }\n                        calculatedFinishDate\n                        estimate\n                        timeLeft\n                        effortPerFunctionPoint\n                        timeSpentChronon\n                    }\n              }\n        }\n`;\n\nclass DedicatedTeamDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const dedicatedTeamId = this.props.match.params.dedicatedTeamId\n\n        const dedicatedTeam = this.props.data.dedicatedTeamById\n\n        const dedicatedTeamName = dedicatedTeam.name\n        const cioName = dedicatedTeam.cio.name\n        const ctoName = dedicatedTeam.cto.name\n        const estimate = dedicatedTeam.estimate\n\n        const timeSheetsByDate = dedicatedTeam.timeSheetsByDate\n        const calculatedFinishDate = dedicatedTeam.calculatedFinishDate\n        \n        const dedicatedTeamPlanningPeriods = dedicatedTeam.dedicatedTeamPlanningPeriods\n\n        const today = (new Date()).getTime()\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\n\n        const allEdgeDates = [today]\n\n        if (firstTimeSheetDate) {\n            allEdgeDates.push(firstTimeSheetDate)\n        }\n\n        if (lastTimeSheetDate) {\n            allEdgeDates.push(lastTimeSheetDate)\n        }\n\n        if (calculatedFinishDate) {\n            allEdgeDates.push(new Date(calculatedFinishDate).getTime())\n        }\n\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\n\n        const projectTeams = dedicatedTeam.projectTeams\n\n        const projectTeamsTableContents = projectTeams.slice()\n            .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\n            .map(projectTeam => (\n                    {\n                        id: projectTeam.id,\n                        estimate: projectTeam.estimate,\n                        timeLeft: projectTeam.timeLeft,\n                        name: projectTeam.name,\n                        calculatedFinishDate: projectTeam.calculatedFinishDate,\n                        timeSpentChronon: projectTeam.timeSpentChronon,\n                        queueLength: projectTeam.queueLength,\n                        positionPersonPlanFactIssueCount: projectTeam.positionPersonPlanFactIssueCount,\n                        timeSpentForReengineeringPercent: projectTeam.timeSpentForReengineeringPercent,\n                    }\n            ))\n\n        const projectTeamsTableColumns = [\n            {\n                field: 'projectTeamName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'id') }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'queueLength',\n                headerName: 'Длина очереди (мес)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeSpentChronon',\n                headerName: 'Трудомощность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'positionPersonPlanFactIssueCount',\n                headerName: 'Количество проблем с планированием команды (количество членов команды разницей между планом и фактом > 0.4 FTE)',\n                width: 200,\n                align: 'right',\n            },\n            {\n                field: 'timeSpentForReengineeringPercent',\n                headerName: 'Затраты на технологическое перевооружение и исправление проблем (%)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }) ,\n            },\n        ];\n        \n        const planningPeriodsTableContents = dedicatedTeamPlanningPeriods.slice()\n            .sort((a, b) => ((a.planningPeriod.start < b.planningPeriod.start) ? 1 : ((a.planningPeriod.start > b.planningPeriod.start) ? -1 : 0)))\n            .filter(a => a.estimate > 0)\n            .map(dedicatedTeamPlanningPeriod => (\n                    {\n                        id: dedicatedTeamPlanningPeriod.planningPeriod.id,\n                        name: dedicatedTeamPlanningPeriod.planningPeriod.name,\n                        estimate: dedicatedTeamPlanningPeriod.estimate,\n                        timeLeft: dedicatedTeamPlanningPeriod.timeLeft,\n                        effortPerFunctionPoint: dedicatedTeamPlanningPeriod.effortPerFunctionPoint,\n                        calculatedFinishDate: dedicatedTeamPlanningPeriod.calculatedFinishDate,\n                        timeSpentChronon: dedicatedTeamPlanningPeriod.timeSpentChronon,\n                    }\n            ))\n\n        const planningPeriodsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/planningPeriods/${ params.getValue(params.id, 'id') }/dedicatedTeams/${ dedicatedTeamId }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'timeSpentChronon',\n                headerName: 'Трудомощность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Выделенная команда { dedicatedTeamName }\n                    <br />\n                    Бизнес-партнер { cioName }\n                    <br />\n                    Руководитель разработки (CTO) { ctoName }\n                    <br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                    <br />\n                    <br />\n                </Typography>\n\n                <TimeSheetsByDateIssueChart\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <ReengineeringByDatePeriodChart\n                    planningPeriodEnd={ xAxisEnd }\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\n                />\n\n                <Typography variant=\"h6\" noWrap>\n                    Проектные команды\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ projectTeamsTableContents }\n                        columns={ projectTeamsTableColumns }\n                        autoHeight\n                    />\n                </div>\n                <br />\n\n                {/*<Typography variant=\"h6\" noWrap>*/}\n                {/*    Периоды*/}\n                {/*</Typography>*/}\n\n                {/*<div>*/}\n                {/*    <DataGridPro*/}\n                {/*        rows={ planningPeriodsTableContents }*/}\n                {/*        columns={ planningPeriodsTableColumns }*/}\n                {/*        autoHeight*/}\n                {/*    />*/}\n                {/*</div>*/}\n\n                {/*<br />*/}\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchDedicatedTeamByDedicatedTeamId, {\n    options: (props) => { return { variables: { id: props.match.params.dedicatedTeamId }}}\n})(DedicatedTeamDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectManagerDetail.js",["226","227"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\n\nconst fetchProjectManagerById = gql`\n            query ProjectManagerById($id: Int) {\n                projectManagerById(id: $id) {\n                    id\n                    \n                    name\n                    \n                    isActive\n                    \n                    months {\n                        id\n                        month\n                        timeSpentFte\n                        \n                        analysisTimeSpentFte\n                        developmentTimeSpentFte\n                        testingTimeSpentFte\n                        managementTimeSpentFte\n                        incidentFixingTimeSpentFte\n                        nonProjectActivityTimeSpentFte\n                        \n                        workingDaysInMonthOccured\n                    }\n                    \n                    projectTeams {\n                        id\n                        name\n                        timeSpentChrononFte\n                    }\n                }\n            }\n`;\n\nfunction ToolBarWithExport() {\n  return (\n    <GridToolbarContainer>\n        <GridToolbarExport\n          csvOptions={{\n              delimiter: \";\",\n              utf8WithBom: true,\n          }}\n        />\n\n\n    </GridToolbarContainer>\n  );\n}\n\nclass ProjectManagerDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const projectManagerId = this.props.match.params.id\n        const projectManager = this.props.data.projectManagerById\n        const months = projectManager.months\n        const projectTeams = projectManager.projectTeams\n\n        const monthsTableContents = months.slice()\n            .sort((a, b) => ((a.month < b.month) ? 1 : ((a.month > b.month) ? -1 : 0)))\n            .map(month => (\n                    {\n                        id: month.id,\n                        month: month.month,\n                        timeSpentFte: month.timeSpentFte,\n                        analysisTimeSpentFte: month.analysisTimeSpentFte,\n                        developmentTimeSpentFte: month.developmentTimeSpentFte,\n                        testingTimeSpentFte: month.testingTimeSpentFte,\n                        managementTimeSpentFte: month.managementTimeSpentFte,\n                        incidentFixingTimeSpentFte: month.incidentFixingTimeSpentFte,\n                        nonProjectActivityTimeSpentFte: month.nonProjectActivityTimeSpentFte,\n                        workingDaysInMonthOccured: month.workingDaysInMonthOccured,\n                    }\n            ))\n\n        const monthsTableColumns = [\n            {\n                field: 'month',\n                headerName: 'Год-месяц',\n                width: 200,\n            },\n            {\n                field: 'timeSpentFte',\n                headerName: 'Трудозатраты (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'analysisTimeSpentFte',\n                headerName: 'Трудозатраты аналитики (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'developmentTimeSpentFte',\n                headerName: 'Трудозатраты разработки (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'testingTimeSpentFte',\n                headerName: 'Трудозатраты тестирования (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'managementTimeSpentFte',\n                headerName: 'Трудозатраты управление (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'incidentFixingTimeSpentFte',\n                headerName: 'Трудозатраты инциденты (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'nonProjectActivityTimeSpentFte',\n                headerName: 'Непроизводственная (текущая) деятельность (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'workingDaysInMonthOccured',\n                headerName: 'Рабочих дней в месяце',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        const projectTeamsTableContents = projectTeams.slice()\n            .sort((a, b) => ((a.timeSpentChrononFte < b.timeSpentChrononFte) ? 1 : ((a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : 0)))\n            .map(projectTeam => (\n                    {\n                        id: projectTeam.id,\n                        name: projectTeam.name,\n                        timeSpentChrononFte: projectTeam.timeSpentChrononFte,\n                    }\n            ))\n\n        const projectTeamsTableColumns = [\n            {\n                field: 'name',\n                flex: 1,\n                headerName: 'Название',\n               renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'id') }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'timeSpentChrononFte',\n                headerName: 'Трудомощность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Трудозатраты по месяцам\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ monthsTableContents }\n                        columns={ monthsTableColumns }\n                        components={{\n                            Toolbar: ToolBarWithExport,\n                        }}\n                        autoHeight\n                    />\n                </div>\n                <br />\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                    Команды\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ projectTeamsTableContents }\n                        columns={ projectTeamsTableColumns }\n                        components={{\n                            Toolbar: ToolBarWithExport,\n                        }}\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchProjectManagerById, {\n    options: (props) => { return { variables: { id: props.match.params.id }}}\n})(ProjectManagerDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PlanningPeriodPersonDetail.js",["228","229","230","231","232","233","234","235"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport {graphql} from '@apollo/client/react/hoc';\nimport moment from 'moment';\nimport Typography from '@material-ui/core/Typography';\nimport {Link as RouterLink, NavLink} from \"react-router-dom\"\nimport {Box, Link} from \"@material-ui/core\";\nimport TimeSheetsByDateIssueChart from './TimeSheetsByDateIssueChart'\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\n\nconst fetchPlanningPeriodPersonByPlanningPeriodIdAndPersonKeyQuery = gql`\n    query PlanningPeriodPersonByPlanningPeriodIdAndPersonKeyQuery($planningPeriodId: Int!, $personKey: String!) {\n        planningPeriodPersonByPlanningPeriodIdAndPersonKey(planningPeriodId: $planningPeriodId, personKey: $personKey) {\n          systemChangeRequests {\n            systemChangeRequestId\n            systemChangeRequestKey\n            systemChangeRequestName\n            newFunctionsTimeSpent\n            effortPerFunctionPoint\n            newFunctionsPercentageOfPersonTotalTimeInPlanningPeriod\n            effortPerFunctionPointWeightedByPersonTotalTimeInPlanningPeriod\n          }\n        }\n    }\n`;\n\nclass PlanningPeriodPersonDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const planningPeriodId = this.props.match.params.planningPeriodId\n        const personKey = this.props.match.params.personKey\n\n        const systemChangeRequests = this.props.data.planningPeriodPersonByPlanningPeriodIdAndPersonKey.systemChangeRequests\n\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\n            .sort((a, b) =>  (\n                (a.systemChangeRequestId > b.systemChangeRequestId) ? 1 : (\n                    (a.systemChangeRequestId == b.systemChangeRequestId) ? 0 : -1\n                )\n            ))\n            .map(systemChangeRequest => (\n                    {\n                        id: systemChangeRequest.systemChangeRequestId,\n                        key: systemChangeRequest.systemChangeRequestKey,\n                        name: systemChangeRequest.systemChangeRequestName,\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint,\n                        newFunctionsPercentageOfPersonTotalTimeInPlanningPeriod: systemChangeRequest.newFunctionsPercentageOfPersonTotalTimeInPlanningPeriod,\n                        effortPerFunctionPointWeightedByPersonTotalTimeInPlanningPeriod: systemChangeRequest.effortPerFunctionPointWeightedByPersonTotalTimeInPlanningPeriod,\n                        newFunctionsTimeSpent: systemChangeRequest.newFunctionsTimeSpent,\n                    }\n            ))\n\n            const systemChangeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Заявка на доработку системы',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'newFunctionsPercentageOfPersonTotalTimeInPlanningPeriod',\n                headerName: 'Доля времени, потраченного на доработку системы',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'effortPerFunctionPointWeightedByPersonTotalTimeInPlanningPeriod',\n                headerName: 'Затраты на ф.т. * доля времени, потраченного на доработку системы',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'newFunctionsTimeSpent',\n                headerName: 'Списано на аналитику, разработку и тестирование (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n                renderCell: (params) => (\n                    <RouterLink to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }/persons/${ personKey }` }>\n                        { params.getValue(params.id, 'newFunctionsTimeSpent').toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) }\n                    </RouterLink>\n                ),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemChangeRequestsTableContents }\n                        columns={ systemChangeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchPlanningPeriodPersonByPlanningPeriodIdAndPersonKeyQuery, {\n    options: (props) => { return { variables: {\n        planningPeriodId: props.match.params.planningPeriodId,\n        personKey: props.match.params.personKey,\n    }}}\n})(PlanningPeriodPersonDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectManagerList.js",["236"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport,} from '@mui/x-data-grid-pro';\n\nconst fetchProjectManagers = gql`\n    query ProjectManagers {\n        projectManagers {\n            id\n            \n            name\n            \n            isActive\n            \n            analysisTimeSpentChrononFte\n            developmentTimeSpentChrononFte\n            testingTimeSpentChrononFte\n            managementTimeSpentChrononFte\n            incidentFixingTimeSpentChrononFte\n            nonProjectActivityTimeSpentChrononFte\n            \n            timeSpentChrononFte\n        }\n    }\n`;\n\nfunction ToolBarWithExport() {\n  return (\n    <GridToolbarContainer>\n        <GridToolbarExport\n          csvOptions={{\n              delimiter: \";\",\n              utf8WithBom: true,\n          }}\n        />\n\n\n    </GridToolbarContainer>\n  );\n}\n\nclass ProjectManagerList extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const projectManagers = this.props.data.projectManagers\n\n        const projectManagersTableContents = projectManagers.slice()\n            .sort((a, b) => ((a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : ((a.timeSpentChrononFte < b.timeSpentChrononFte) ? 1 : 0)))\n            .map(projectManager => (\n                    {\n                        id: projectManager.id,\n                        name: projectManager.name,\n                        isActive: projectManager.isActive,\n                        timeSpentChrononFte: projectManager.timeSpentChrononFte,\n                        analysisTimeSpentChrononFte: projectManager.analysisTimeSpentChrononFte,\n                        developmentTimeSpentChrononFte: projectManager.developmentTimeSpentChrononFte,\n                        testingTimeSpentChrononFte: projectManager.testingTimeSpentChrononFte,\n                        managementTimeSpentChrononFte: projectManager.managementTimeSpentChrononFte,\n                        incidentFixingTimeSpentChrononFte: projectManager.incidentFixingTimeSpentChrononFte,\n                        nonProjectActivityTimeSpentChrononFte: projectManager.nonProjectActivityTimeSpentChrononFte,\n                    }\n            ))\n\n        const projectManagersTableColumns = [\n            {\n                field: 'name',\n                headerName: 'ФИО',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectManagers/${ params.getValue(params.id, 'id') }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'isActive',\n                headerName: 'Работает',\n                flex: 1,\n            },\n            {\n                field: 'timeSpentChrononFte',\n                headerName: 'FTE команд за последний период',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n            {\n                field: 'analysisTimeSpentChrononFte',\n                headerName: 'Аналитика, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n            {\n                field: 'developmentTimeSpentChrononFte',\n                headerName: 'Разработка, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n            {\n                field: 'testingTimeSpentChrononFte',\n                headerName: 'Тестирование, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n            {\n                field: 'managementTimeSpentChrononFte',\n                headerName: 'Управление, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n            {\n                field: 'incidentFixingTimeSpentChrononFte',\n                headerName: 'Устранение инцидентов, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n            {\n                field: 'nonProjectActivityTimeSpentChrononFte',\n                headerName: 'Непроизводственная (текущая) деятельность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Менеджеры проектов\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ projectManagersTableContents }\n                        columns={ projectManagersTableColumns }\n                        autoHeight\n                        components={{\n                            Toolbar: ToolBarWithExport,\n                        }}\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchProjectManagers)(ProjectManagerList);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamDetail.js",["237","238","239","240"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\";\n\nconst fetchProjectTeamByDedicatedTeamId = gql`\n    query ProjectTeamById($id: Int!) {\n        projectTeamById(id: $id) {\n            id\n            estimate\n            name\n            url\n            \n            calculatedFinishDate\n            \n            dedicatedTeam {\n                id\n                name\n            }\n            \n            projectManager {\n                id\n                name\n            }\n            \n            timeSheetsByDate {\n                date\n                timeSpentCumsum\n                timeSpentCumsumPrediction\n                timeSpentWithoutValuePercentCumsum\n                timeSpentWithValuePercentCumsum\n                timeSpentForReengineeringPercentCumsum\n                timeSpentNotForReengineeringPercentCumsum\n            }\n            \n            timeSheetsByMonth {\n                id\n                month\n                timeSpentFte\n                analysisTimeSpentFte\n                developmentTimeSpentFte\n                testingTimeSpentFte\n                managementTimeSpentFte\n                incidentFixingTimeSpentFte\n                workingDaysInMonthOccured\n            }\n            \n            projectTeamPlanningPeriods {\n                planningPeriod {\n                    id \n                    name\n                    start\n                    end\n                }\n                calculatedFinishDate\n                estimate\n                timeLeft\n                effortPerFunctionPoint\n                timeSpentChronon\n            }\n            \n            chrononPositions {\n                id\n                position {\n                    id\n                    url\n                    name\n                }\n                person {\n                    id\n                    key\n                    name\n                }\n                timeSpent\n                timeSpentChrononFte\n                totalCapacityFte\n                \n                planFactFteDifference\n                \n                state {\n                    name\n                }\n            }\n            \n            positionPersonPlanFactIssueCount\n        }\n    }\n`;\n\nfunction ToolBarWithExport() {\n  return (\n    <GridToolbarContainer>\n        <GridToolbarExport\n          csvOptions={{\n              delimiter: \";\",\n              utf8WithBom: true,\n          }}\n        />\n\n\n    </GridToolbarContainer>\n  );\n}\n\nclass ProjectTeamDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const projectTeamId = this.props.match.params.projectTeamId\n        const projectTeam = this.props.data.projectTeamById\n\n        const projectTeamName = projectTeam.name\n        const projectTeamUrl = projectTeam.url\n        const estimate = projectTeam.estimate\n\n        const dedicatedTeam = projectTeam.dedicatedTeam\n        const dedicatedTeamId = dedicatedTeam.id\n        const dedicatedTeamName = dedicatedTeam.name\n\n        const projectManager = projectTeam.projectManager\n        const projectManagerName = projectManager.name\n\n        const timeSheetsByDate = projectTeam.timeSheetsByDate\n        const timeSheetsByMonth = projectTeam.timeSheetsByMonth\n        const calculatedFinishDate = projectTeam.calculatedFinishDate\n\n        const projectTeamPlanningPeriods = projectTeam.projectTeamPlanningPeriods\n        const positions = projectTeam.chrononPositions\n\n        const positionPersonPlanFactIssueCount = projectTeam.positionPersonPlanFactIssueCount\n\n        const today = (new Date()).getTime()\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\n\n        const allEdgeDates = [today]\n\n        if (firstTimeSheetDate) {\n            allEdgeDates.push(firstTimeSheetDate)\n        }\n\n        if (lastTimeSheetDate) {\n            allEdgeDates.push(lastTimeSheetDate)\n        }\n\n        if (calculatedFinishDate) {\n            allEdgeDates.push(new Date(calculatedFinishDate).getTime())\n        }\n\n        const xAxisStart = Math.min(...allEdgeDates) - 1000 * 60 * 60 * 24 * 28\n        const xAxisEnd = Math.max(...allEdgeDates) + 1000 * 60 * 60 * 24 * 28\n\n        const planningPeriodsTableContents = projectTeamPlanningPeriods.slice()\n            .sort((a, b) => ((a.planningPeriod.start < b.planningPeriod.start) ? 1 : ((a.planningPeriod.start > b.planningPeriod.start) ? -1 : 0)))\n            .filter(a => a.estimate > 0)\n            .map(projectTeamPlanningPeriod => (\n                    {\n                        id: projectTeamPlanningPeriod.planningPeriod.id,\n                        name: projectTeamPlanningPeriod.planningPeriod.name,\n                        estimate: projectTeamPlanningPeriod.estimate,\n                        timeLeft: projectTeamPlanningPeriod.timeLeft,\n                        effortPerFunctionPoint: projectTeamPlanningPeriod.effortPerFunctionPoint,\n                        calculatedFinishDate: projectTeamPlanningPeriod.calculatedFinishDate,\n                        timeSpentChronon: projectTeamPlanningPeriod.timeSpentChronon,\n                    }\n            ))\n\n        const planningPeriodsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/planningPeriods/${ params.getValue(params.id, 'id') }/projectTeams/${ projectTeamId }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'timeSpentChronon',\n                headerName: 'Трудомощность, ч',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n        const positionsTableContents = positions.slice()\n            .filter(position => position.timeSpentChrononFte > 0 || position.position.id !=  \"-1\"\n            )\n            .sort((a, b) =>  (\n                (a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : (\n                    (a.timeSpentChrononFte == b.timeSpentChrononFte) ? 0 : 1\n                )\n            ))\n            .map(position => (\n                    {\n                        id: position.id,\n                        url: position.position.url,\n                        position: position.position.name,\n                        personId: position.person.id,\n                        personKey: position.person.key,\n                        personName: position.person.name,\n                        timeSpent: position.timeSpent,\n                        timeSpentChrononFte: position.timeSpentChrononFte,\n                        totalCapacityFte: position.totalCapacityFte,\n                        planFactFteDifference: position.planFactFteDifference,\n                        stateName: position.state.name\n                    }\n            ))\n\n        const positionsTableColumns = [\n            {\n                field: 'position',\n                headerName: 'Позиция',\n                flex: 1,\n                renderCell: (params) => {\n                    const url = params.getValue(params.id, 'url')\n\n                    return url ?\n                        <Link href={ url } target=\"_blank\">\n                            { params.getValue(params.id, 'position') }\n                        </Link>\n                    : params.getValue(params.id, 'position')\n                },\n            },\n            {\n                field: 'stateName',\n                headerName: 'Статус',\n                flex: 1,\n            },\n            {\n                field: 'personName',\n                headerName: 'ФИО',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/persons/${ params.getValue(params.id, 'personKey') }` }>\n                        { params.getValue(params.id, 'personName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'timeSpent',\n                headerName: 'Списано всего, ч',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'totalCapacityFte',\n                headerName: 'Плановая трудомощность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n            {\n                field: 'timeSpentChrononFte',\n                headerName: 'Фактическая трудомощность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n            {\n                field: 'planFactFteDifference',\n                headerName: 'Разница между планом и фактом, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n\n        ];\n\n        const timeSheetsByMonthTableContents = timeSheetsByMonth.slice()\n            .sort((a, b) => ((a.month < b.month) ? 1 : ((a.month > b.month) ? -1 : 0)))\n            .map(timeSheetByMonth => (\n                    {\n                        id: timeSheetByMonth.id,\n                        month: timeSheetByMonth.month,\n                        timeSpentFte: timeSheetByMonth.timeSpentFte,\n                        analysisTimeSpentFte: timeSheetByMonth.analysisTimeSpentFte,\n                        developmentTimeSpentFte: timeSheetByMonth.developmentTimeSpentFte,\n                        testingTimeSpentFte: timeSheetByMonth.testingTimeSpentFte,\n                        managementTimeSpentFte: timeSheetByMonth.managementTimeSpentFte,\n                        incidentFixingTimeSpentFte: timeSheetByMonth.incidentFixingTimeSpentFte,\n                        workingDaysInMonthOccured: timeSheetByMonth.workingDaysInMonthOccured,\n                    }\n            ))\n\n        const timeSheetsByMonthTableColumns = [\n            {\n                field: 'month',\n                headerName: 'Год-месяц',\n                width: 200,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ projectTeamId }/month/${ params.getValue(params.id, 'month') }/persons/` }>\n                        { params.getValue(params.id, 'month') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'timeSpentFte',\n                headerName: 'Трудозатраты (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'analysisTimeSpentFte',\n                headerName: 'Трудозатраты аналитики (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'developmentTimeSpentFte',\n                headerName: 'Трудозатраты разработки (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'testingTimeSpentFte',\n                headerName: 'Трудозатраты тестирования (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'managementTimeSpentFte',\n                headerName: 'Трудозатраты управление (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'incidentFixingTimeSpentFte',\n                headerName: 'Трудозатраты инциденты (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'workingDaysInMonthOccured',\n                headerName: 'Рабочих дней в месяце',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Проектная команда { projectTeamName } &nbsp;\n                    <Link href={ projectTeamUrl } target=\"_blank\">\n                        [ источник ]\n                    </Link>\n                    <br />\n                    Менеджер проекта { projectManagerName }\n                    <br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                    <br />\n                    Количество проблем с планированием команды (количество членов команды разницей между планом и фактом > 0.4 FTE) { positionPersonPlanFactIssueCount }\n                    <br />\n                    Выделенная команда &nbsp;\n                    <RouterLink to={ `/dedicatedTeams/${ dedicatedTeamId }` }>\n                        { dedicatedTeamName }\n                    </RouterLink>\n                    <br />\n                    <br />\n                </Typography>\n\n                <TimeSheetsByDateIssueChart\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <ReengineeringByDatePeriodChart\n                    planningPeriodEnd={ xAxisEnd }\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\n                />\n\n                <br />\n\n                {/*<Typography variant=\"h6\" noWrap>*/}\n                {/*    Периоды*/}\n                {/*</Typography>*/}\n\n                {/*<div>*/}\n                {/*    <DataGridPro*/}\n                {/*        rows={ planningPeriodsTableContents }*/}\n                {/*        columns={ planningPeriodsTableColumns }*/}\n                {/*        autoHeight*/}\n                {/*    />*/}\n                {/*</div>*/}\n\n                {/*<br />*/}\n\n                <Typography variant=\"h6\" noWrap>\n                    Команда\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ positionsTableContents }\n                        columns={ positionsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                    Трудозатраты по месяцам\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ timeSheetsByMonthTableContents }\n                        columns={ timeSheetsByMonthTableColumns }\n                        components={{\n                            Toolbar: ToolBarWithExport,\n                        }}\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchProjectTeamByDedicatedTeamId, {\n    options: (props) => { return { variables: { id: props.match.params.projectTeamId }}}\n})(ProjectTeamDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamPlanningPeriodDetail.js",["241"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\"\nimport ValueByDatePeriodChart from \"./ValueByDatePeriodChart\"\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\n\nconst fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId = gql`\n    query ProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId($planningPeriodId: Int!, $projectTeamId: Int!) {\n          projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId(projectTeamId: $projectTeamId, planningPeriodId: $planningPeriodId) {\n                id\n                estimate\n                effortPerFunctionPoint\n                calculatedFinishDate\n                \n                projectTeam {\n                    name\n                }\n                planningPeriod {\n                    name\n                    start\n                    end\n                }\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                    timeSpentWithoutValuePercentCumsum\n                    timeSpentWithValuePercentCumsum\n                    timeSpentForReengineeringPercentCumsum\n                    timeSpentNotForReengineeringPercentCumsum\n                }\n                \n                projectTeamPlanningPeriodSystems {\n                  id\n                  estimate\n                  timeLeft\n                  system {\n                    id\n                    name\n                  }\n                  effortPerFunctionPoint\n                  calculatedFinishDate\n                }\n                \n                changeRequests {\n                    id\n                    key\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategoryId\n                    effortPerFunctionPoint\n                    calculatedFinishDate\n                    newFunctionsTimeSpentPrevious28Days\n                }\n                \n                positions {\n                    id\n                    position {\n                        id\n                        url\n                        name\n                    }\n                    person {\n                        id\n                        key\n                        name\n                    }\n                    newFunctionsTimeSpent\n                    newFunctionsFullTimeEquivalentPrevious28Days\n                    newFunctionsFullTimeEquivalentCapacity\n                }\n          }\n    }\n`;\n\nclass ProjectTeamPlanningPeriodDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const planningPeriodId = this.props.match.params.planningPeriodId\n        const projectTeamId = this.props.match.params.projectTeamId\n        const projectTeamPlanningPeriod = this.props.data.projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId\n        const projectTeamName = projectTeamPlanningPeriod.projectTeam.name\n        const estimate = projectTeamPlanningPeriod.estimate\n        const effortPerFunctionPoint = projectTeamPlanningPeriod.effortPerFunctionPoint\n        const calculatedFinishDate = projectTeamPlanningPeriod.calculatedFinishDate\n        const planningPeriodName = projectTeamPlanningPeriod.planningPeriod.name\n        const planningPeriodStart = projectTeamPlanningPeriod.planningPeriod.start\n        const planningPeriodEnd = projectTeamPlanningPeriod.planningPeriod.end\n        const projectTeamPlanningPeriodSystems = projectTeamPlanningPeriod.projectTeamPlanningPeriodSystems\n        const changeRequests = projectTeamPlanningPeriod.changeRequests\n        const positions = projectTeamPlanningPeriod.positions\n\n        const timeSheetsByDate = projectTeamPlanningPeriod.timeSheetsByDate\n\n        const fourWeeks = 1000 * 60 * 60 * 24 * 7 * 4\n        const xAxisStart = new Date(planningPeriodStart).getTime() - fourWeeks\n        const xAxisEnd = new Date(planningPeriodEnd).getTime() + fourWeeks\n\n        const systemsTableContents = projectTeamPlanningPeriodSystems.slice()\n            .sort((a, b) => ((a.system.name > b.system.name) ? 1 : ((a.system.name < b.system.name) ? -1 : 0)))\n            .map(projectTeamPlanningPeriodSystem => (\n                    {\n                        id: projectTeamPlanningPeriodSystem.id,\n                        estimate: projectTeamPlanningPeriodSystem.estimate,\n                        timeLeft: projectTeamPlanningPeriodSystem.timeLeft,\n                        systemId: projectTeamPlanningPeriodSystem.system.id,\n                        systemName: projectTeamPlanningPeriodSystem.system.name,\n                        effortPerFunctionPoint: projectTeamPlanningPeriodSystem.effortPerFunctionPoint,\n                        calculatedFinishDate: projectTeamPlanningPeriodSystem.calculatedFinishDate\n                    }\n            ))\n\n        const systemsTableColumns = [\n            {\n                field: 'systemName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/planningPeriods/${ planningPeriodId }/projectTeams/${ projectTeamId }/systems/${ params.getValue(params.id, 'systemId') }` }>\n                        { params.getValue(params.id, 'systemName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n        const changeRequestsTableContents = changeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(changeRequest => (\n                    {\n                        id: changeRequest.id,\n                        key: changeRequest.key,\n                        name: changeRequest.name,\n                        hasValue: changeRequest.hasValue,\n                        estimate: changeRequest.estimate,\n                        timeLeft: changeRequest.timeLeft,\n                        stateCategoryId: changeRequest.stateCategoryId,\n                        effortPerFunctionPoint: changeRequest.effortPerFunctionPoint,\n                        calculatedFinishDate: changeRequest.calculatedFinishDate,\n                        newFunctionsTimeSpentPrevious28Days: changeRequest.newFunctionsTimeSpentPrevious28Days\n                    }\n            ))\n\n        const changeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'calculatedFinishDate',\n                headerName: 'Расчетная дата завершения',\n                width: 200,\n                align: 'center',\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'newFunctionsTimeSpentPrevious28Days',\n                headerName: 'Фактические трудозатраты за 28 дней (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n        ];\n\n        const positionsTableContents = positions.slice()\n            .sort((a, b) =>  (\n                (a.newFunctionsFullTimeEquivalentPrevious28Days > b.newFunctionsFullTimeEquivalentPrevious28Days) ? -1 : (\n                    (a.newFunctionsFullTimeEquivalentPrevious28Days == b.newFunctionsFullTimeEquivalentPrevious28Days) ? 0 : 1\n                )\n            ))\n            .map(position => (\n                    {\n                        id: position.id,\n                        url: position.position.url,\n                        position: position.position.name,\n                        personId: position.person.id,\n                        personKey: position.person.key,\n                        personName: position.person.name,\n                        newFunctionsTimeSpent: position.newFunctionsTimeSpent,\n                        newFunctionsFullTimeEquivalentPrevious28Days: position.newFunctionsFullTimeEquivalentPrevious28Days,\n                        newFunctionsFullTimeEquivalentCapacity: position.newFunctionsFullTimeEquivalentCapacity\n                    }\n            ))\n\n        const positionsTableColumns = [\n            {\n                field: 'position',\n                headerName: 'Позиция',\n                flex: 1,\n                renderCell: (params) => {\n                    const url = params.getValue(params.id, 'url')\n\n                    return url ?\n                        <Link href={ url } target=\"_blank\">\n                            { params.getValue(params.id, 'position') }\n                        </Link>\n                    : params.getValue(params.id, 'position')\n                },\n            },\n            {\n                field: 'personName',\n                headerName: 'ФИО',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/persons/${ params.getValue(params.id, 'personKey') }` }>\n                        { params.getValue(params.id, 'personName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'newFunctionsTimeSpent',\n                headerName: 'Новый функционал: списано всего (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'newFunctionsFullTimeEquivalentCapacity',\n                headerName: 'Новый функционал: плановый FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\n            },\n            {\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\n                headerName: 'Новый функционал: фактический FTE за 28 дней',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Проектная команда { projectTeamName }\n                    <br />\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\n                    <br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                    <br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка\n                </Typography>\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление + Инциденты\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n                <ValueByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Доля списаний на задачи без бизнес-ценности\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSpentPercentWithValueAndWithoutValueByDate={ timeSheetsByDate }\n                />\n\n                <ReengineeringByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Доля списаний на задачи технологического перевооружения и исправления проблем\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSpentPercentForReengineeringAndNotForReengineeringByDate={ timeSheetsByDate }\n                />\n\n                <Typography variant=\"h6\" noWrap>\n                    Системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemsTableContents }\n                        columns={ systemsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n               <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку ПО\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ changeRequestsTableContents }\n                        columns={ changeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <Typography variant=\"h6\" noWrap>\n                    Команда\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ positionsTableContents }\n                        columns={ positionsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId, {\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, projectTeamId: props.match.params.projectTeamId }}}\n})(ProjectTeamPlanningPeriodDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamPlanningPeriodSystemDetail.js",["242","243"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\n\nconst fetchProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId = gql`\n     query ProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId($projectTeamId:Int!, $planningPeriodId: Int!, $systemId: Int!) {\n          projectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId(projectTeamId: $projectTeamId, planningPeriodId: $planningPeriodId, systemId: $systemId) {\n                id\n                estimate\n                calculatedFinishDate\n                \n                effortPerFunctionPoint\n                system {\n                    name\n                }\n                planningPeriod {\n                    name\n                    start\n                    end\n                }\n\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                systemChangeRequests {\n                    id\n                    key\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategoryId\n                    effortPerFunctionPoint\n                    \n                    mainDeveloper {\n                        id\n                        name\n                    }\n                }\n          }\n    }\n`;\n\nclass ProjectTeamPlanningPeriodSystemDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const planningPeriodId = this.props.match.params.planningPeriodId\n\n        const projectTeamPlanningPeriodSystem = this.props.data.projectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId\n\n        const systemName = projectTeamPlanningPeriodSystem.system.name\n        const estimate = projectTeamPlanningPeriodSystem.estimate\n        const calculatedFinishDate = projectTeamPlanningPeriodSystem.calculatedFinishDate\n        const effortPerFunctionPoint = projectTeamPlanningPeriodSystem.effortPerFunctionPoint\n        const planningPeriodName = projectTeamPlanningPeriodSystem.planningPeriod.name\n        const planningPeriodStart = projectTeamPlanningPeriodSystem.planningPeriod.start\n        const planningPeriodEnd = projectTeamPlanningPeriodSystem.planningPeriod.end\n        const systemChangeRequests = projectTeamPlanningPeriodSystem.systemChangeRequests\n\n        const timeSheetsByDate = projectTeamPlanningPeriodSystem.timeSheetsByDate\n\n        const xAxisStart = new Date(planningPeriodStart).getTime()\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\n\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(systemChangeRequest => (\n                    {\n                        id: systemChangeRequest.id,\n                        key: systemChangeRequest.key,\n                        name: systemChangeRequest.name,\n                        hasValue: systemChangeRequest.hasValue,\n                        estimate: systemChangeRequest.estimate,\n                        timeLeft: systemChangeRequest.timeLeft,\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint,\n                        mainDeveloperName: systemChangeRequest.mainDeveloper.name,\n                    }\n            ))\n\n        const systemChangeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'mainDeveloperName',\n                headerName: 'Основной разработчик',\n                width: 200,\n                align: 'left',\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Система { systemName }<br />\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })<br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка<br/>\n                    Расчетная дата завершения { calculatedFinishDate }\n                </Typography>\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate={ calculatedFinishDate }\n                />\n\n               <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemChangeRequestsTableContents }\n                        columns={ systemChangeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchProjectTeamPlanningPeriodSystemByProjectTeamIdPlanningPeriodIdAndSystemId, {\n    options: (props) => { return { variables: { projectTeamId: props.match.params.projectTeamId, planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\n})(ProjectTeamPlanningPeriodSystemDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamQuarterDetail.js",["244","245","246","247"],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemChangeRequestDetail.js",[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ProjectTeamList.js",["248"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport,} from '@mui/x-data-grid-pro';\n\nconst fetchProjectTeams = gql`\n    query ProjectTeams {\n        projectTeams {\n            id\n            estimate\n            timeLeft\n            name\n            calculatedFinishDate\n            timeSpentChrononFte\n            queueLength\n            positionPersonPlanFactIssueCount\n            \n            projectManager {\n                id\n                name\n            }\n            \n            dedicatedTeam {\n                id\n                name\n                \n                cio {\n                    id\n                    name\n                }\n                cto {\n                    id\n                    name\n                }                   \n            }\n        }\n    }\n`;\n\nfunction ToolBarWithExport() {\n  return (\n    <GridToolbarContainer>\n        <GridToolbarExport\n          csvOptions={{\n              delimiter: \";\",\n              utf8WithBom: true,\n          }}\n        />\n\n\n    </GridToolbarContainer>\n  );\n}\n\nclass ProjectTeamList extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const projectTeams = this.props.data.projectTeams\n\n        const projectTeamsTableContents = projectTeams.slice()\n            .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\n            .map(projectTeam => (\n                    {\n                        id: projectTeam.id,\n                        name: projectTeam.name,\n                        projectManagerName: projectTeam.projectManager.name,\n                        cioName: projectTeam.dedicatedTeam.cio.name,\n                        ctoName: projectTeam.dedicatedTeam.cto.name,\n                        positionPersonPlanFactIssueCount: projectTeam.positionPersonPlanFactIssueCount,\n                        timeSpentChrononFte: projectTeam.timeSpentChrononFte,\n                    }\n            ))\n\n        const projectTeamsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'id') }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'projectManagerName',\n                headerName: 'Руководитель проекта',\n                flex: 1,\n            },\n            {\n                field: 'cioName',\n                headerName: 'Бизнес-партнер',\n                flex: 1,\n            },\n            {\n                field: 'ctoName',\n                headerName: 'Руководитель разработки (CTO)',\n                flex: 1,\n            },\n            {\n                field: 'timeSpentChrononFte',\n                headerName: 'FTE команды',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n            {\n                field: 'positionPersonPlanFactIssueCount',\n                headerName: 'Количество проблем с планированием команды (количество членов команды разницей между планом и фактом > 0.4 FTE)',\n                width: 200,\n                align: 'right',\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Проектные команды\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ projectTeamsTableContents }\n                        columns={ projectTeamsTableColumns }\n                        components={{\n                            Toolbar: ToolBarWithExport,\n                        }}\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchProjectTeams)(ProjectTeamList);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemList.js",["249"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\n\nconst fetchSystems = gql`\n    query Systems {\n        systems {\n            id\n            estimate\n            timeLeft\n            name\n            newFunctionsFullTimeEquivalentPrevious28Days\n            newFunctionsTimeSpentPrevious28Days\n        }\n    }\n`;\n\nclass SystemList extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const systems = this.props.data.systems\n\n        const systemsTableContents = systems.slice()\n            .sort((a, b) => ((a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0)))\n            .filter(system => (\n                   system.newFunctionsFullTimeEquivalentPrevious28Days > 0\n                )\n            )\n            .map(system => (\n                    {\n                        id: system.id,\n                        name: system.name,\n                        newFunctionsFullTimeEquivalentPrevious28Days: system.newFunctionsFullTimeEquivalentPrevious28Days,\n                    }\n            ))\n\n        const systemsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/systems/${ params.getValue(params.id, 'id') }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\n                headerName: 'Новый функционал: фактический FTE за 28 дней',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Системы\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ systemsTableContents }\n                        columns={ systemsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchSystems)(SystemList);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonListByProjectTeamIdAndMonth.js",["250","251","252","253"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport {graphql} from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {DataGridPro, GridToolbarContainer, GridToolbarExport} from \"@mui/x-data-grid-pro\";\nimport {Link as RouterLink} from \"react-router-dom\";\n\nconst fetchPersonListByProjectTeamIdAndMonth = gql`\n    query PersonsByProjectTeamIdAndMonth($projectTeamId: Int, $month: Date) {\n        personsByProjectTeamIdAndMonth(projectTeamId: $projectTeamId, month: $month) {\n            analysisTimeSpentMonthFte\n            developmentTimeSpentMonthFte\n            testingTimeSpentMonthFte\n            managementTimeSpentMonthFte\n            incidentFixingTimeSpentMonthFte\n            timeSpentMonthFte\n            person {\n                id\n                key\n                name\n            }\n        }\n    }\n`;\n\nclass PersonListByProjectTeamIdAndMonth extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const month = this.props.match.params.month\n        const personsByProjectTeamIdAndMonth = this.props.data.personsByProjectTeamIdAndMonth\n\n        const personsTableContents = personsByProjectTeamIdAndMonth.slice()\n            .sort((a, b) =>  (\n                (a.person.name > b.person.name) ? 1 : (\n                    (a.person.name == b.person.name) ? 0 : -1\n                )\n            ))\n            .map(person => (\n                    {\n                        id: person.person.id,\n                        personKey: person.person.key,\n                        personName: person.person.name,\n                        analysisTimeSpentMonthFte: person.analysisTimeSpentMonthFte,\n                        developmentTimeSpentMonthFte: person.developmentTimeSpentMonthFte,\n                        testingTimeSpentMonthFte: person.testingTimeSpentMonthFte,\n                        managementTimeSpentMonthFte: person.managementTimeSpentMonthFte,\n                        incidentFixingTimeSpentMonthFte: person.incidentFixingTimeSpentMonthFte,\n                        timeSpentMonthFte: person.timeSpentMonthFte,\n                    }\n            ))\n         const personsTableColumns = [\n             {\n                field: 'personName',\n                headerName: 'ФИО',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/persons/${ params.getValue(params.id, 'personKey') }/month/${ month }` }>\n                        { params.getValue(params.id, 'personName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'timeSpentMonthFte',\n                headerName: 'Трудозатраты (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'analysisTimeSpentMonthFte',\n                headerName: 'Трудозатраты аналитики (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'developmentTimeSpentMonthFte',\n                headerName: 'Трудозатраты разработки (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'testingTimeSpentMonthFte',\n                headerName: 'Трудозатраты тестирования (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'managementTimeSpentMonthFte',\n                headerName: 'Трудозатраты управление (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n            {\n                field: 'incidentFixingTimeSpentMonthFte',\n                headerName: 'Трудозатраты инциденты (FTE)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            },\n        ];\n\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Команда\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ personsTableContents }\n                        columns={ personsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchPersonListByProjectTeamIdAndMonth, {\n    options: (props) => { return { variables: { projectTeamId: props.match.params.projectTeamId, month: props.match.params.month }}}\n})(PersonListByProjectTeamIdAndMonth);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/QuarterDetail.js",["254","255","256"],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemDetail.js",["257","258","259","260","261","262"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\nimport ReengineeringByDatePeriodChart from \"./ReengineeringByDatePeriodChart\";\n\nconst fetchSystemById = gql`\n    query SystemById($id: Int!) {\n        systemById(id: $id) {\n            id\n            estimate\n            timeLeft\n            name\n            newFunctionsFullTimeEquivalentPrevious28Days\n            newFunctionsTimeSpentPrevious28Days\n            \n            persons {\n                id\n                \n                person {\n                    id\n                    key\n                    name\n                    isActive\n                    newFunctionsFullTimeEquivalentPrevious28Days\n                }\n                \n                newFunctionsTimeSpent\n                \n                newFunctionsFullTimeEquivalentPrevious28Days\n            }\n        }\n    }\n`;\n\nclass SystemDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const systemId = this.props.match.params.systemId\n        const system = this.props.data.systemById\n\n        const systemName = system.name\n        const estimate = system.estimate\n\n        const persons = system.persons\n\n        const personsTableContents = persons.slice()\n            .sort((a, b) =>  (\n                (a.newFunctionsFullTimeEquivalentPrevious28Days > b.newFunctionsFullTimeEquivalentPrevious28Days) ? -1 : (\n                    (a.newFunctionsFullTimeEquivalentPrevious28Days == b.newFunctionsFullTimeEquivalentPrevious28Days) ? 0 : 1\n                )\n            ))\n            .map(person => (\n                    {\n                        id: person.id,\n                        personId: person.person.id,\n                        key: person.person.key,\n                        name: person.person.name,\n                        newFunctionsTimeSpent: person.newFunctionsTimeSpent,\n                        newFunctionsFullTimeEquivalentPrevious28DaysTotal: person.person.newFunctionsFullTimeEquivalentPrevious28Days,\n                        newFunctionsFullTimeEquivalentPrevious28Days: person.newFunctionsFullTimeEquivalentPrevious28Days,\n                        isActive: person.person.isActive,\n                    }\n            ))\n\n        const personsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'ФИО',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/persons/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'isActive',\n                headerName: 'Активный',\n                flex: 1,\n                renderCell: (params) => (\n                    params.getValue(params.id, 'isActive') ? \"Да\" : \"Нет\"\n                ),\n            },\n            {\n                field: 'newFunctionsTimeSpent',\n                headerName: 'Новый функционал: списано всего (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'newFunctionsFullTimeEquivalentPrevious28Days',\n                headerName: 'Новый функционал: фактический FTE за 28 дней на эту систему',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n            {\n                field: 'newFunctionsFullTimeEquivalentPrevious28DaysTotal',\n                headerName: 'Новый функционал: фактический FTE за 28 дней на все системы',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Система { systemName } &nbsp;\n                    <br />\n                    <br />\n                </Typography>\n\n                <Typography variant=\"h6\" noWrap>\n                    Команда\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ personsTableContents }\n                        columns={ personsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchSystemById, {\n    options: (props) => { return { variables: { id: props.match.params.systemId }}}\n})(SystemDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonMonthDetailByPersonKeyAndMonth.js",["263","264","265"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\n\nconst fetchPersonMonthByPersonKeyAndMonth = gql`\n    query PersonMonthByPersonKeyAndMonth($personKey: String!, $month: Date!) {\n        personMonthByPersonKeyAndMonth(personKey: $personKey, month: $month) {\n            person {\n                id\n                name\n            }\n            \n            analysisTimeSpentMonthFte\n            developmentTimeSpentMonthFte\n            testingTimeSpentMonthFte\n            managementTimeSpentMonthFte\n            incidentFixingTimeSpentMonthFte\n            nonProjectActivityTimeSpentMonthFte\n            timeSpentMonthFte\n            \n            incidents {\n                id\n                incident {\n                    id\n                    key\n                    url\n                    name\n                    \n                            \n                    projectTeam {\n                        id\n                        name\n                    }\n                }\n                timeSpentMonthFte          \n            }\n            \n            systemChangeRequests {\n                id\n                systemChangeRequest {\n                    id\n                    key\n                    url\n                    name\n                    \n                    changeRequest {\n                        id\n                        name\n                        \n                        projectTeam {\n                            id\n                            name\n                        }\n                    }\n                }\n                managementTimeSpentMonthFte          \n            }\n            \n            nonProjectActivities {\n                id\n                nonProjectActivity {\n                    id\n                    key\n                    url\n                    name\n            \n                }\n                timeSpentMonthFte          \n            }\n            \n            tasks {\n                id\n                task {\n                    id\n                    key\n                    url\n                    name\n                    \n                    systemChangeRequest {\n                        id\n                        key\n                        name\n                        \n                        changeRequest {\n                            id\n                            key\n                            name\n                            \n                            projectTeam {\n                                id\n                                name\n                            }\n                        }\n                    }\n                }\n                timeSpentMonthFte          \n            }\n        }\n    }\n`;\n\nclass PersonMonthDetailByPersonKeyAndMonth extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const personKey = this.props.match.params.personKey\n        const month = this.props.match.params.month\n        const personMonth = this.props.data.personMonthByPersonKeyAndMonth\n\n        const personName = personMonth.person.name\n\n        const analysisTimeSpentMonthFte = personMonth.analysisTimeSpentMonthFte\n        const developmentTimeSpentMonthFte = personMonth.developmentTimeSpentMonthFte\n        const testingTimeSpentMonthFte = personMonth.testingTimeSpentMonthFte\n        const managementTimeSpentMonthFte = personMonth.managementTimeSpentMonthFte\n        const incidentFixingTimeSpentMonthFte = personMonth.incidentFixingTimeSpentMonthFte\n        const nonProjectActivityTimeSpentMonthFte = personMonth.nonProjectActivityTimeSpentMonthFte\n        const timeSpentMonthFte = personMonth.timeSpentMonthFte\n\n        const tasks = personMonth.tasks\n        const incidents = personMonth.incidents\n        const nonProjectActivities = personMonth.nonProjectActivities\n        const systemChangeRequests = personMonth.systemChangeRequests\n\n        const incidentsTableContents = incidents.slice()\n            .filter(a => a.timeSpentMonthFte > 0)\n            .sort((a, b) => ((a.timeSpentMonthFte < b.timeSpentMonthFte) ? 1 : ((a.timeSpentMonthFte > b.timeSpentMonthFte) ? -1 : 0)))\n            .map(incidentTaskTimeSpent => (\n                    {\n                        id: incidentTaskTimeSpent.id,\n                        incidentId: incidentTaskTimeSpent.incident.id,\n                        incidentKey: incidentTaskTimeSpent.incident.key,\n                        incidentUrl: incidentTaskTimeSpent.incident.url,\n                        incidentName: incidentTaskTimeSpent.incident.name,\n                        projectTeamId: incidentTaskTimeSpent.incident.projectTeam.id,\n                        projectTeamName: incidentTaskTimeSpent.incident.projectTeam.name,\n                        timeSpentMonthFte: incidentTaskTimeSpent.timeSpentMonthFte,\n                    }\n            ))\n\n        const incidentsTableColumns = [\n            {\n                field: 'projectTeamName',\n                headerName: 'Команда проекта',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\n                        { params.getValue(params.id, 'projectTeamName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'incidentName',\n                headerName: 'Инцидент',\n                flex: 1,\n                renderCell: (params) => (\n                    <Link href={ params.getValue(params.id, 'incidentUrl') } target=\"_blank\">\n                        { params.getValue(params.id, 'incidentName') }\n                    </Link>\n                ),\n            },\n            {\n                field: 'timeSpentMonthFte',\n                headerName: 'Трудомощность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\n            },\n        ];\n\n      const systemChangeRequestsTableContents = systemChangeRequests.slice()\n            .filter(a => a.managementTimeSpentMonthFte > 0)\n            .sort((a, b) => ((a.managementTimeSpentMonthFte < b.managementTimeSpentMonthFte) ? 1 : ((a.managementTimeSpentMonthFte > b.managementTimeSpentMonthFte) ? -1 : 0)))\n            .map(systemChangeRequestsTaskTimeSpent => (\n                    {\n                        id: systemChangeRequestsTaskTimeSpent.id,\n                        incidentId: systemChangeRequestsTaskTimeSpent.systemChangeRequest.id,\n                        incidentKey: systemChangeRequestsTaskTimeSpent.systemChangeRequest.key,\n                        incidentUrl: systemChangeRequestsTaskTimeSpent.systemChangeRequest.url,\n                        incidentName: systemChangeRequestsTaskTimeSpent.systemChangeRequest.name,\n                        projectTeamId: systemChangeRequestsTaskTimeSpent.systemChangeRequest.changeRequest.projectTeam.id,\n                        projectTeamName: systemChangeRequestsTaskTimeSpent.systemChangeRequest.changeRequest.projectTeam.name,\n                        managementTimeSpentMonthFte: systemChangeRequestsTaskTimeSpent.managementTimeSpentMonthFte,\n                    }\n            ))\n\n        const systemChangeRequestsTableColumns = [\n            {\n                field: 'projectTeamName',\n                headerName: 'Команда проекта',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\n                        { params.getValue(params.id, 'projectTeamName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'systemChangeRequestName',\n                headerName: 'Заявка на доработку ПО',\n                flex: 1,\n                renderCell: (params) => (\n                    <Link href={ params.getValue(params.id, 'incidentUrl') } target=\"_blank\">\n                        { params.getValue(params.id, 'incidentName') }\n                    </Link>\n                ),\n            },\n            {\n                field: 'managementTimeSpentMonthFte',\n                headerName: 'Трудомощность - управление, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\n            },\n        ];\n\n\n        const nonProjectActivitiesTableContents = nonProjectActivities.slice()\n            .filter(a => a.timeSpentMonthFte > 0)\n            .sort((a, b) => ((a.timeSpentMonthFte < b.timeSpentMonthFte) ? 1 : ((a.timeSpentMonthFte > b.timeSpentMonthFte) ? -1 : 0)))\n            .map(nonProjectActivityTaskTimeSpent => (\n                    {\n                        id: nonProjectActivityTaskTimeSpent.id,\n                        nonProjectActivityId: nonProjectActivityTaskTimeSpent.nonProjectActivity.id,\n                        nonProjectActivityKey: nonProjectActivityTaskTimeSpent.nonProjectActivity.key,\n                        nonProjectActivityUrl: nonProjectActivityTaskTimeSpent.nonProjectActivity.url,\n                        nonProjectActivityName: nonProjectActivityTaskTimeSpent.nonProjectActivity.name,\n                        timeSpentMonthFte: nonProjectActivityTaskTimeSpent.timeSpentMonthFte,\n                    }\n            ))\n\n        const nonProjectActivitiesTableColumns = [\n            {\n                field: 'nonProjectActivityName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <Link href={ params.getValue(params.id, 'nonProjectActivityUrl') } target=\"_blank\">\n                        { params.getValue(params.id, 'nonProjectActivityName') }\n                    </Link>\n                ),\n            },\n            {\n                field: 'timeSpentMonthFte',\n                headerName: 'Трудомощность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\n            },\n        ];\n\n        const tasksTableContents = tasks.slice()\n            .filter(a => a.timeSpentMonthFte > 0)\n            .sort((a, b) => ((a.timeSpentMonthFte < b.timeSpentMonthFte) ? 1 : ((a.timeSpentMonthFte > b.timeSpentMonthFte) ? -1 : 0)))\n            .map(personTaskTimeSpent => (\n                    {\n                        id: personTaskTimeSpent.id,\n                        taskId: personTaskTimeSpent.task.id,\n                        taskKey: personTaskTimeSpent.task.key,\n                        taskUrl: personTaskTimeSpent.task.url,\n                        taskName: personTaskTimeSpent.task.name,\n                        systemChangeRequestId: personTaskTimeSpent.task.systemChangeRequest.id,\n                        systemChangeRequestKey: personTaskTimeSpent.task.systemChangeRequest.key,\n                        systemChangeRequestName: personTaskTimeSpent.task.systemChangeRequest.name,\n                        changeRequestId: personTaskTimeSpent.task.systemChangeRequest.changeRequest.id,\n                        changeRequestKey: personTaskTimeSpent.task.systemChangeRequest.changeRequest.key,\n                        changeRequestName: personTaskTimeSpent.task.systemChangeRequest.changeRequest.name,\n                        projectTeamId: personTaskTimeSpent.task.systemChangeRequest.changeRequest.projectTeam.id,\n                        projectTeamName: personTaskTimeSpent.task.systemChangeRequest.changeRequest.projectTeam.name,\n                        timeSpentMonthFte: personTaskTimeSpent.timeSpentMonthFte,\n                    }\n            ))\n\n        const tasksTableColumns = [\n            {\n                field: 'projectTeamName',\n                headerName: 'Команда проекта',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\n                        { params.getValue(params.id, 'projectTeamName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'changeRequestName',\n                headerName: 'Заявка на доработку ПО',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/changeRequests/${ params.getValue(params.id, 'changeRequestKey') }` }>\n                        { params.getValue(params.id, 'changeRequestName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'systemChangeRequestName',\n                headerName: 'Заявка на доработку системы',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/systemChangeRequests/${ params.getValue(params.id, 'systemChangeRequestKey') }` }>\n                        { params.getValue(params.id, 'systemChangeRequestName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'taskName',\n                headerName: 'Задача',\n                flex: 1,\n                renderCell: (params) => (\n                    <Link href={ params.getValue(params.id, 'taskUrl') } target=\"_blank\">\n                        { params.getValue(params.id, 'taskName') }\n                    </Link>\n                ),\n            },\n            {\n                field: 'timeSpentMonthFte',\n                headerName: 'Трудомощность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Сотрудник { personName } <br />\n                    FTE: { timeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - аналитика: { analysisTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - разработка: { developmentTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - тестирование: { testingTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - управление: { managementTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - инциденты: { incidentFixingTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - непроизводственная деятельность: { nonProjectActivityTimeSpentMonthFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                </Typography>\n\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                   Списания на задачи\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ tasksTableContents }\n                        columns={ tasksTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                   Списание на управление в заявках на доработку систем\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemChangeRequestsTableContents }\n                        columns={ systemChangeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                   Списания на инциденты\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ incidentsTableContents }\n                        columns={ incidentsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                   Списания на непроизводственную (текущую) деятельность\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ nonProjectActivitiesTableContents }\n                        columns={ nonProjectActivitiesTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <br />\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchPersonMonthByPersonKeyAndMonth, {\n    options: (props) => { return { variables: { personKey: props.match.params.personKey, month: props.match.params.month }}}\n})(PersonMonthDetailByPersonKeyAndMonth);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/SystemPlanningPeriodDetail.js",["266","267"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport TimeSheetsByDatePeriodChart from \"./TimeSheetsByDatePeriodChart\"\nimport { DataGridPro } from \"@mui/x-data-grid-pro\";\n\nconst fetchSystemPlanningPeriodByPlanningPeriodIdAndSystemId = gql`\n    query SystemPlanningPeriodByPlanningPeriodIdAndSystemId($planningPeriodId: Int!, $systemId: Int!) {\n          systemPlanningPeriodByPlanningPeriodIdAndSystemId(systemId: $systemId, planningPeriodId: $planningPeriodId) {\n                id\n                estimate\n                effortPerFunctionPoint\n                calculatedFinishDate\n                \n                \n                system {\n                    name\n                }\n                planningPeriod {\n                    name\n                    start\n                    end\n                }\n                \n                analysisTimeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                analysisCalculatedFinishDate\n                \n                analysisEstimate\n                \n                developmentTimeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                developmentCalculatedFinishDate\n                \n                developmentEstimate\n                \n                testingTimeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                testingCalculatedFinishDate\n                \n                testingEstimate\n\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                    timeSpentCumsumPrediction\n                }\n                \n                systemChangeRequests {\n                    id\n                    key\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategoryId\n                    effortPerFunctionPoint\n                    mainDeveloper {\n                        id\n                        name\n                    }\n                }\n          }\n    }\n`;\n\nclass SystemPlanningPeriodDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const planningPeriodId = this.props.match.params.planningPeriodId\n\n        const systemPlanningPeriod = this.props.data.systemPlanningPeriodByPlanningPeriodIdAndSystemId\n\n        const systemName = systemPlanningPeriod.system.name\n        const estimate = systemPlanningPeriod.estimate\n        const calculatedFinishDate = systemPlanningPeriod.calculatedFinishDate\n        const effortPerFunctionPoint = systemPlanningPeriod.effortPerFunctionPoint\n        const planningPeriodName = systemPlanningPeriod.planningPeriod.name\n        const planningPeriodStart = systemPlanningPeriod.planningPeriod.start\n        const planningPeriodEnd = systemPlanningPeriod.planningPeriod.end\n        const systemChangeRequests = systemPlanningPeriod.systemChangeRequests\n\n        const analysisTimeSheetsByDate = systemPlanningPeriod.analysisTimeSheetsByDate\n        const analysisEstimate = systemPlanningPeriod.analysisEstimate\n        const analysisCalculatedFinishDate = systemPlanningPeriod.analysisCalculatedFinishDate\n\n        const developmentTimeSheetsByDate = systemPlanningPeriod.developmentTimeSheetsByDate\n        const developmentEstimate = systemPlanningPeriod.developmentEstimate\n        const developmentCalculatedFinishDate = systemPlanningPeriod.developmentCalculatedFinishDate\n\n        const testingTimeSheetsByDate = systemPlanningPeriod.testingTimeSheetsByDate\n        const testingEstimate = systemPlanningPeriod.testingEstimate\n        const testingCalculatedFinishDate = systemPlanningPeriod.testingCalculatedFinishDate\n\n        const timeSheetsByDate = systemPlanningPeriod.timeSheetsByDate\n\n        const xAxisStart = new Date(planningPeriodStart).getTime()\n        const xAxisEnd = new Date(planningPeriodEnd).getTime()\n\n        const systemChangeRequestsTableContents = systemChangeRequests.slice()\n            .sort((a, b) =>  (\n                (a.stateCategoryId === 3 && b.stateCategoryId !== 3) ? 1 : (\n                    (a.stateCategoryId === 3 && b.stateCategoryId === 3) ? 0 : (\n                        (a.stateCategoryId !== 3 && b.stateCategoryId === 3) ? -1 : (\n                            b.timeLeft - a.timeLeft\n                        )\n                    )\n                )\n            ))\n            .map(systemChangeRequest => (\n                    {\n                        id: systemChangeRequest.id,\n                        key: systemChangeRequest.key,\n                        name: systemChangeRequest.name,\n                        hasValue: systemChangeRequest.hasValue,\n                        estimate: systemChangeRequest.estimate,\n                        timeLeft: systemChangeRequest.timeLeft,\n                        stateCategoryId: systemChangeRequest.stateCategoryId,\n                        effortPerFunctionPoint: systemChangeRequest.effortPerFunctionPoint,\n                        mainDeveloperName: systemChangeRequest.mainDeveloper.name,\n                    }\n            ))\n\n        const systemChangeRequestsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink style={{ textDecoration: params.getValue(params.id, 'stateCategoryId') === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${ params.getValue(params.id, 'key') }` }>\n                        { params.getValue(params.id, 'key') } &nbsp;\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'hasValue',\n                headerName: 'Есть ценность',\n                width: 200,\n                valueFormatter: ({ value }) => value ? \"Да\" : \"Нет\",\n            },\n            {\n                field: 'estimate',\n                headerName: 'Оценка (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'timeLeft',\n                headerName: 'Осталось (ч)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 0 }),\n            },\n            {\n                field: 'effortPerFunctionPoint',\n                headerName: 'Затраты на ф.т.',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) ,\n            },\n            {\n                field: 'mainDeveloperName',\n                headerName: 'Основной разработчик',\n                width: 200,\n                align: 'left',\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Система { systemName }<br />\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })<br />\n                    Затраты на функциональную точку (аналитика + разработка + менеджмент) { effortPerFunctionPoint.toFixed(2) } часов / функциональная точка<br />\n                    Расчетная дата завершения { calculatedFinishDate }\n                </Typography>\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Фактический объем работ: Аналитика + Разработка + Тестирование + Управление\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ timeSheetsByDate }\n                    estimate={ estimate }\n                    calculatedFinishDate ={ calculatedFinishDate }\n                />\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Аналитика\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ analysisTimeSheetsByDate }\n                    estimate={ analysisEstimate }\n                    calculatedFinishDate={ analysisCalculatedFinishDate }\n                />\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Разработка\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ developmentTimeSheetsByDate }\n                    estimate={ developmentEstimate }\n                    calculatedFinishDate={ developmentCalculatedFinishDate }\n                />\n\n                <TimeSheetsByDatePeriodChart\n                    planningPeriodEnd={ planningPeriodEnd }\n                    title=\"Тестирование\"\n                    xAxisStart={ xAxisStart }\n                    xAxisEnd={ xAxisEnd }\n                    color=\"black\"\n                    timeSheetsByDate={ testingTimeSheetsByDate }\n                    estimate={ testingEstimate }\n                    calculatedFinishDate={ testingCalculatedFinishDate }\n                />\n\n               <Typography variant=\"h6\" noWrap>\n                    Заявки на доработку системы\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemChangeRequestsTableContents }\n                        columns={ systemChangeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchSystemPlanningPeriodByPlanningPeriodIdAndSystemId, {\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, systemId: props.match.params.systemId }}}\n})(SystemPlanningPeriodDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/QuarterProjectTeamList.js",["268"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport { DataGridPro,} from '@mui/x-data-grid-pro';\n\nconst fetchQuarterProjectTeamsByQuarterKey = gql`\n    query QuarterProjectTeamsByQuarterKey($quarterKey: String!) {\n        quarterProjectTeamsByQuarterKey(quarterKey: $quarterKey) {\n            id\n            estimate\n            timeLeft\n            \n            calculatedFinishDate\n            newFunctionsFullTimeEquivalentPrevious28Days\n            newFunctionsTimeSpentPrevious28Days\n            newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare\n            changeRequestCalculatedDateAfterQuarterEndIssueCount\n            changeRequestCount\n            changeRequestCalculatedDateBeforeQuarterEndShare\n        \n            projectTeam {\n                id\n                name\n                newFunctionsFullTimeEquivalentPrevious28Days\n                projectManager {\n                    id\n                    name\n                }\n\n                dedicatedTeam {\n                    id\n                    name\n                    \n                    cio {\n                        id\n                        key\n                        name\n                    }\n                    cto {\n                        id\n                        key\n                        name\n                    }                   \n                }\n            }\n        }\n    }\n`;\n\nclass QuarterProjectTeamList extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n\n        const quarterKey = this.props.match.params.quarterKey\n        const quarterProjectTeams = this.props.data.quarterProjectTeamsByQuarterKey\n\n        const quarterProjectTeamsTableContents = quarterProjectTeams.slice()\n            .sort((a, b) => ((a.projectTeam.name > b.projectTeam.name) ? 1 : ((a.projectTeam.name < b.projectTeam.name) ? -1 : 0)))\n            .map(projectTeamQuarter => (\n                    {\n                        id: projectTeamQuarter.id,\n                        projectTeamId: projectTeamQuarter.projectTeam.id,\n                        name: projectTeamQuarter.projectTeam.name,\n                        projectManagerName: projectTeamQuarter.projectTeam.projectManager.name,\n                        cioName: projectTeamQuarter.projectTeam.dedicatedTeam.cio.name,\n                        ctoName: projectTeamQuarter.projectTeam.dedicatedTeam.cto.name,\n                        changeRequestCalculatedDateAfterQuarterEndIssueCount: projectTeamQuarter.changeRequestCalculatedDateAfterQuarterEndIssueCount,\n                        projectTeamQuarterNewFunctionsFullTimeEquivalentPrevious28Days: projectTeamQuarter.newFunctionsFullTimeEquivalentPrevious28Days,\n                        projectTeamNewFunctionsFullTimeEquivalentPrevious28Days: projectTeamQuarter.projectTeam.newFunctionsFullTimeEquivalentPrevious28Days,\n                        changeRequestCalculatedDateBeforeQuarterEndShare: projectTeamQuarter.changeRequestCalculatedDateBeforeQuarterEndShare,\n                        newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare: projectTeamQuarter.newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare\n                    }\n            ))\n\n        const quarterProjectTeamsTableColumns = [\n            {\n                field: 'name',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/quarters/${ quarterKey }/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\n                        { params.getValue(params.id, 'name') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'projectManagerName',\n                headerName: 'Руководитель проекта',\n                flex: 1,\n            },\n            {\n                field: 'cioName',\n                headerName: 'Бизнес-партнер',\n                flex: 1,\n            },\n            {\n                field: 'ctoName',\n                headerName: 'Руководитель разработки (CTO)',\n                flex: 1,\n            },\n            {\n                field: 'changeRequestCalculatedDateBeforeQuarterEndShare',\n                headerName: 'Прогноз исполнения плана по заявкам на доработку ПО (%)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { maximumFractionDigits: 0}),\n            },\n            {\n                field: 'newFunctionsTimeSpentInCurrentQuarterForQuarterChangeRequestsShare',\n                headerName: 'Процент трудозатрат на задачи квартала (%)',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => (value * 100).toLocaleString(undefined, { maximumFractionDigits: 0}),\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"h6\" noWrap>\n                    Проектные команды\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ quarterProjectTeamsTableContents }\n                        columns={ quarterProjectTeamsTableColumns }\n                        autoHeight\n                    />\n                </div>\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchQuarterProjectTeamsByQuarterKey, {\n    options: (props) => { return { variables: { quarterKey: props.match.params.quarterKey }}}\n})(QuarterProjectTeamList);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/PersonDetail.js",["269","270"],"import React, {Component} from \"react\";\nimport {gql} from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Link} from \"@material-ui/core\";\nimport TimeSheetsByDateIssueChart from \"./TimeSheetsByDateIssueChart\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport {DataGridPro} from \"@mui/x-data-grid-pro\";\n\nconst fetchPersonByKey = gql`\n    query PersonByKey($key: String!) {\n          personByKey(key: $key) {\n               id\n               name\n                \n               analysisTimeSpentChrononFte\n               developmentTimeSpentChrononFte\n               testingTimeSpentChrononFte\n               managementTimeSpentChrononFte\n               incidentFixingTimeSpentChrononFte\n               nonProjectActivityTimeSpentChrononFte\n               timeSpentChrononFte\n               \n               incidents {\n                    id\n                    incident {\n                        id\n                        key\n                        url\n                        name\n                        \n                                \n                        projectTeam {\n                            id\n                            name\n                        }\n                    }\n                    timeSpentChrononFte          \n               }\n               \n               systemChangeRequests {\n                    id\n                    systemChangeRequest {\n                        id\n                        key\n                        url\n                        name\n                        \n                        changeRequest {\n                            id\n                            name\n                            \n                            projectTeam {\n                                id\n                                name\n                            }\n                        }\n                    }\n                    managementTimeSpentChrononFte          \n               }\n        \n               nonProjectActivities {\n                    id\n                    nonProjectActivity {\n                        id\n                        key\n                        url\n                        name\n\n                    }\n                    timeSpentChrononFte          \n               }\n     \n               tasks {\n                    id\n                    task {\n                        id\n                        key\n                        url\n                        name\n                        \n                        systemChangeRequest {\n                            id\n                            key\n                            name\n                            \n                            changeRequest {\n                                id\n                                key\n                                name\n                                \n                                projectTeam {\n                                    id\n                                    name\n                                }\n                            }\n                        }\n                    }\n                    timeSpentChrononFte          \n               }\n               chrononStartDate\n               chrononEndDate\n          }\n    }\n`;\n\nclass PersonDetail extends Component {\n    render() {\n        if (this.props.data.loading) { return <div>Loading ...</div> }\n        const personKey = this.props.match.params.key\n        const person = this.props.data.personByKey\n\n        const personName = person.name\n\n        const analysisTimeSpentChrononFte = person.analysisTimeSpentChrononFte\n        const developmentTimeSpentChrononFte = person.developmentTimeSpentChrononFte\n        const testingTimeSpentChrononFte = person.testingTimeSpentChrononFte\n        const managementTimeSpentChrononFte = person.managementTimeSpentChrononFte\n        const incidentFixingTimeSpentChrononFte = person.incidentFixingTimeSpentChrononFte\n        const nonProjectActivityTimeSpentChrononFte = person.nonProjectActivityTimeSpentChrononFte\n        const timeSpentChrononFte = person.timeSpentChrononFte\n\n        const chrononStartDate = person.chrononStartDate\n        const chrononEndDate = person.chrononEndDate\n\n        const tasks = person.tasks\n        const incidents = person.incidents\n        const nonProjectActivities = person.nonProjectActivities\n        const systemChangeRequests = person.systemChangeRequests\n\n        const incidentsTableContents = incidents.slice()\n            .filter(a => a.timeSpentChrononFte > 0)\n            .sort((a, b) => ((a.timeSpentChrononFte < b.timeSpentChrononFte) ? 1 : ((a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : 0)))\n            .map(incidentTaskTimeSpent => (\n                    {\n                        id: incidentTaskTimeSpent.id,\n                        incidentId: incidentTaskTimeSpent.incident.id,\n                        incidentKey: incidentTaskTimeSpent.incident.key,\n                        incidentUrl: incidentTaskTimeSpent.incident.url,\n                        incidentName: incidentTaskTimeSpent.incident.name,\n                        projectTeamId: incidentTaskTimeSpent.incident.projectTeam.id,\n                        projectTeamName: incidentTaskTimeSpent.incident.projectTeam.name,\n                        timeSpentChrononFte: incidentTaskTimeSpent.timeSpentChrononFte,\n                    }\n            ))\n\n        const incidentsTableColumns = [\n            {\n                field: 'projectTeamName',\n                headerName: 'Команда проекта',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\n                        { params.getValue(params.id, 'projectTeamName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'incidentName',\n                headerName: 'Инцидент',\n                flex: 1,\n                renderCell: (params) => (\n                    <Link href={ params.getValue(params.id, 'incidentUrl') } target=\"_blank\">\n                        { params.getValue(params.id, 'incidentName') }\n                    </Link>\n                ),\n            },\n            {\n                field: 'timeSpentChrononFte',\n                headerName: 'Трудомощность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\n            },\n        ];\n\n      const systemChangeRequestsTableContents = systemChangeRequests.slice()\n            .filter(a => a.managementTimeSpentChrononFte > 0)\n            .sort((a, b) => ((a.managementTimeSpentChrononFte < b.managementTimeSpentChrononFte) ? 1 : ((a.managementTimeSpentChrononFte > b.managementTimeSpentChrononFte) ? -1 : 0)))\n            .map(systemChangeRequestsTaskTimeSpent => (\n                    {\n                        id: systemChangeRequestsTaskTimeSpent.id,\n                        incidentId: systemChangeRequestsTaskTimeSpent.systemChangeRequest.id,\n                        incidentKey: systemChangeRequestsTaskTimeSpent.systemChangeRequest.key,\n                        incidentUrl: systemChangeRequestsTaskTimeSpent.systemChangeRequest.url,\n                        incidentName: systemChangeRequestsTaskTimeSpent.systemChangeRequest.name,\n                        projectTeamId: systemChangeRequestsTaskTimeSpent.systemChangeRequest.changeRequest.projectTeam.id,\n                        projectTeamName: systemChangeRequestsTaskTimeSpent.systemChangeRequest.changeRequest.projectTeam.name,\n                        managementTimeSpentChrononFte: systemChangeRequestsTaskTimeSpent.managementTimeSpentChrononFte,\n                    }\n            ))\n\n        const systemChangeRequestsTableColumns = [\n            {\n                field: 'projectTeamName',\n                headerName: 'Команда проекта',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\n                        { params.getValue(params.id, 'projectTeamName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'systemChangeRequestName',\n                headerName: 'Заявка на доработку ПО',\n                flex: 1,\n                renderCell: (params) => (\n                    <Link href={ params.getValue(params.id, 'incidentUrl') } target=\"_blank\">\n                        { params.getValue(params.id, 'incidentName') }\n                    </Link>\n                ),\n            },\n            {\n                field: 'managementTimeSpentChrononFte',\n                headerName: 'Трудомощность - управление, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\n            },\n        ];\n\n\n        const nonProjectActivitiesTableContents = nonProjectActivities.slice()\n            .filter(a => a.timeSpentChrononFte > 0)\n            .sort((a, b) => ((a.timeSpentChrononFte < b.timeSpentChrononFte) ? 1 : ((a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : 0)))\n            .map(nonProjectActivityTaskTimeSpent => (\n                    {\n                        id: nonProjectActivityTaskTimeSpent.id,\n                        nonProjectActivityId: nonProjectActivityTaskTimeSpent.nonProjectActivity.id,\n                        nonProjectActivityKey: nonProjectActivityTaskTimeSpent.nonProjectActivity.key,\n                        nonProjectActivityUrl: nonProjectActivityTaskTimeSpent.nonProjectActivity.url,\n                        nonProjectActivityName: nonProjectActivityTaskTimeSpent.nonProjectActivity.name,\n                        timeSpentChrononFte: nonProjectActivityTaskTimeSpent.timeSpentChrononFte,\n                    }\n            ))\n\n        const nonProjectActivitiesTableColumns = [\n            {\n                field: 'nonProjectActivityName',\n                headerName: 'Название',\n                flex: 1,\n                renderCell: (params) => (\n                    <Link href={ params.getValue(params.id, 'nonProjectActivityUrl') } target=\"_blank\">\n                        { params.getValue(params.id, 'nonProjectActivityName') }\n                    </Link>\n                ),\n            },\n            {\n                field: 'timeSpentChrononFte',\n                headerName: 'Трудомощность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\n            },\n        ];\n\n        const tasksTableContents = tasks.slice()\n            .filter(a => a.timeSpentChrononFte > 0)\n            .sort((a, b) => ((a.timeSpentChrononFte < b.timeSpentChrononFte) ? 1 : ((a.timeSpentChrononFte > b.timeSpentChrononFte) ? -1 : 0)))\n            .map(personTaskTimeSpent => (\n                    {\n                        id: personTaskTimeSpent.id,\n                        taskId: personTaskTimeSpent.task.id,\n                        taskKey: personTaskTimeSpent.task.key,\n                        taskUrl: personTaskTimeSpent.task.url,\n                        taskName: personTaskTimeSpent.task.name,\n                        systemChangeRequestId: personTaskTimeSpent.task.systemChangeRequest.id,\n                        systemChangeRequestKey: personTaskTimeSpent.task.systemChangeRequest.key,\n                        systemChangeRequestName: personTaskTimeSpent.task.systemChangeRequest.name,\n                        changeRequestId: personTaskTimeSpent.task.systemChangeRequest.changeRequest.id,\n                        changeRequestKey: personTaskTimeSpent.task.systemChangeRequest.changeRequest.key,\n                        changeRequestName: personTaskTimeSpent.task.systemChangeRequest.changeRequest.name,\n                        projectTeamId: personTaskTimeSpent.task.systemChangeRequest.changeRequest.projectTeam.id,\n                        projectTeamName: personTaskTimeSpent.task.systemChangeRequest.changeRequest.projectTeam.name,\n                        timeSpentChrononFte: personTaskTimeSpent.timeSpentChrononFte,\n                    }\n            ))\n\n        const tasksTableColumns = [\n            {\n                field: 'projectTeamName',\n                headerName: 'Команда проекта',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/projectTeams/${ params.getValue(params.id, 'projectTeamId') }` }>\n                        { params.getValue(params.id, 'projectTeamName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'changeRequestName',\n                headerName: 'Заявка на доработку ПО',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/changeRequests/${ params.getValue(params.id, 'changeRequestKey') }` }>\n                        { params.getValue(params.id, 'changeRequestName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'systemChangeRequestName',\n                headerName: 'Заявка на доработку системы',\n                flex: 1,\n                renderCell: (params) => (\n                    <RouterLink to={ `/systemChangeRequests/${ params.getValue(params.id, 'systemChangeRequestKey') }` }>\n                        { params.getValue(params.id, 'systemChangeRequestName') }\n                    </RouterLink>\n                ),\n            },\n            {\n                field: 'taskName',\n                headerName: 'Задача',\n                flex: 1,\n                renderCell: (params) => (\n                    <Link href={ params.getValue(params.id, 'taskUrl') } target=\"_blank\">\n                        { params.getValue(params.id, 'taskName') }\n                    </Link>\n                ),\n            },\n            {\n                field: 'timeSpentChrononFte',\n                headerName: 'Трудомощность, FTE',\n                width: 200,\n                align: 'right',\n                valueFormatter: ({ value }) => value.toLocaleString(undefined, { maximumFractionDigits: 3}) ,\n            },\n        ];\n\n        return (\n            <Box>\n                <Typography variant=\"body\" noWrap>\n                    Сотрудник { personName } данные за период с {chrononStartDate} по {chrononEndDate} <br />\n                    FTE: { timeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - аналитика: { analysisTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - разработка: { developmentTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - тестирование: { testingTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - управление: { managementTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - инциденты: { incidentFixingTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                    - непроизводственная деятельность: { nonProjectActivityTimeSpentChrononFte.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2}) } <br />\n                </Typography>\n\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                   Списания на задачи\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ tasksTableContents }\n                        columns={ tasksTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                   Списание на управление в заявках на доработку систем\n                </Typography>\n                <div>\n                    <DataGridPro\n                        rows={ systemChangeRequestsTableContents }\n                        columns={ systemChangeRequestsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                   Списания на инциденты\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ incidentsTableContents }\n                        columns={ incidentsTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <br />\n\n                <Typography variant=\"h6\" noWrap>\n                   Списания на непроизводственную (текущую) деятельность\n                </Typography>\n\n                <div>\n                    <DataGridPro\n                        rows={ nonProjectActivitiesTableContents }\n                        columns={ nonProjectActivitiesTableColumns }\n                        autoHeight\n                    />\n                </div>\n\n                <br />\n                <br />\n            </Box>\n        );\n    }\n}\n\nexport default graphql(fetchPersonByKey, {\n    options: (props) => { return { variables: { key: props.match.params.key }}}\n})(PersonDetail);","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ValueByDatePeriodChart.js",[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/ReengineeringByDatePeriodChart.js",["271"],"import React, {Component} from \"react\";\nimport { Legend, Tooltip, ReferenceLine, LineChart, Line, XAxis, YAxis } from \"recharts\";\nimport moment from 'moment';\nimport { getEveryMonthTicksBetweenTwoDates } from '../utils'\n\nclass ReengineeringByDatePeriodChart extends Component {\n    render() {\n        const planningPeriodEnd = this.props.planningPeriodEnd\n        const today = (new Date()).getTime()\n        const title = this.props.title\n        const xAxisStart = this.props.xAxisStart\n        const xAxisEnd = this.props.xAxisEnd\n        const color = this.props.color\n        const timeSpentPercentForReengineeringAndNotForReengineeringByDate = this.props.timeSpentPercentForReengineeringAndNotForReengineeringByDate\n\n        return (\n                <LineChart\n                    width={ 1440 }\n                    height={ 300 }\n                    data={ timeSpentPercentForReengineeringAndNotForReengineeringByDate.map(item => {\n                                return { date: new Date(item.date).getTime(), timeSpentForReengineeringPercentCumsum: item.timeSpentForReengineeringPercentCumsum }\n                        }).filter(item => {\n                            return item.date >= xAxisStart\n                        })\n                    }\n                    margin={{\n                        left: 20,\n                        top: 50\n                    }}\n                >\n                    <XAxis\n                        dataKey=\"date\"\n                        type=\"number\"\n                        domain={ [dataMin => xAxisStart, dataMax => xAxisEnd] }\n                        tickFormatter={ (date) => moment(date).format('YYYY-MM-DD') }\n                        ticks={ getEveryMonthTicksBetweenTwoDates(xAxisStart, xAxisEnd) }\n                    />\n                    <YAxis\n                        type=\"number\"\n                        dataKey=\"timeSpentCumsum\"\n                        tickFormatter={ tick => {\n                            return Math.round(tick * 100) + \" %\";\n                        }}\n                    />\n                    <Tooltip\n                        labelFormatter={ (date) => moment(date).format('YYYY-MM-DD') }\n                    />\n                    <Legend />\n\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label={{ position: \"left\", value: \"Сегодня\" }} ifOverflow=\"extendDomain\"/>\n\n                    <ReferenceLine y={ 1 } stroke={ color } strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" label={{ position: 'top',  value: \"100%\" }} />\n\n                    <Line\n                        name={ title }\n                        dataKey=\"timeSpentForReengineeringPercentCumsum\"\n                        stroke={ color }\n                        dot={ false }\n                    />\n                </LineChart>\n        );\n    }\n}\n\nexport default ReengineeringByDatePeriodChart;","/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/TimeSheetsByDatePeriodChart.js",[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/components/TimeSheetsByDateIssueChart.js",[],"/Users/vmihaylov/PycharmProjects/second_eye/client/src/utils.js",[],{"ruleId":"272","replacedBy":"273"},{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","severity":1,"message":"277","line":115,"column":15,"nodeType":"278","messageId":"279","endLine":115,"endColumn":43},{"ruleId":"276","severity":1,"message":"280","line":130,"column":15,"nodeType":"278","messageId":"279","endLine":130,"endColumn":42},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"282","line":95,"column":15,"nodeType":"278","messageId":"279","endLine":95,"endColumn":30},{"ruleId":"276","severity":1,"message":"283","line":112,"column":15,"nodeType":"278","messageId":"279","endLine":112,"endColumn":24},{"ruleId":"276","severity":1,"message":"284","line":4,"column":8,"nodeType":"278","messageId":"279","endLine":4,"endColumn":14},{"ruleId":"276","severity":1,"message":"285","line":6,"column":29,"nodeType":"278","messageId":"279","endLine":6,"endColumn":36},{"ruleId":"276","severity":1,"message":"281","line":7,"column":14,"nodeType":"278","messageId":"279","endLine":7,"endColumn":18},{"ruleId":"276","severity":1,"message":"286","line":8,"column":8,"nodeType":"278","messageId":"279","endLine":8,"endColumn":34},{"ruleId":"287","severity":1,"message":"288","line":44,"column":41,"nodeType":"289","messageId":"290","endLine":44,"endColumn":43},{"ruleId":"287","severity":1,"message":"291","line":48,"column":29,"nodeType":"289","messageId":"290","endLine":48,"endColumn":31},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"287","severity":1,"message":"291","line":227,"column":44,"nodeType":"289","messageId":"290","endLine":227,"endColumn":46},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"287","severity":1,"message":"291","line":327,"column":44,"nodeType":"289","messageId":"290","endLine":327,"endColumn":46},{"ruleId":"276","severity":1,"message":"292","line":6,"column":25,"nodeType":"278","messageId":"279","endLine":6,"endColumn":29},{"ruleId":"276","severity":1,"message":"293","line":6,"column":77,"nodeType":"278","messageId":"279","endLine":6,"endColumn":96},{"ruleId":"276","severity":1,"message":"294","line":59,"column":15,"nodeType":"278","messageId":"279","endLine":59,"endColumn":29},{"ruleId":"287","severity":1,"message":"291","line":274,"column":69,"nodeType":"289","messageId":"290","endLine":274,"endColumn":71},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"295","line":50,"column":15,"nodeType":"278","messageId":"279","endLine":50,"endColumn":31},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"286","line":6,"column":8,"nodeType":"278","messageId":"279","endLine":6,"endColumn":34},{"ruleId":"276","severity":1,"message":"296","line":7,"column":17,"nodeType":"278","messageId":"279","endLine":7,"endColumn":27},{"ruleId":"276","severity":1,"message":"284","line":4,"column":8,"nodeType":"278","messageId":"279","endLine":4,"endColumn":14},{"ruleId":"276","severity":1,"message":"285","line":6,"column":29,"nodeType":"278","messageId":"279","endLine":6,"endColumn":36},{"ruleId":"276","severity":1,"message":"281","line":7,"column":14,"nodeType":"278","messageId":"279","endLine":7,"endColumn":18},{"ruleId":"276","severity":1,"message":"286","line":8,"column":8,"nodeType":"278","messageId":"279","endLine":8,"endColumn":34},{"ruleId":"276","severity":1,"message":"297","line":9,"column":22,"nodeType":"278","messageId":"279","endLine":9,"endColumn":42},{"ruleId":"276","severity":1,"message":"298","line":9,"column":44,"nodeType":"278","messageId":"279","endLine":9,"endColumn":61},{"ruleId":"287","severity":1,"message":"291","line":36,"column":35,"nodeType":"289","messageId":"290","endLine":36,"endColumn":37},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"299","line":7,"column":8,"nodeType":"278","messageId":"279","endLine":7,"endColumn":35},{"ruleId":"276","severity":1,"message":"300","line":8,"column":8,"nodeType":"278","messageId":"279","endLine":8,"endColumn":30},{"ruleId":"276","severity":1,"message":"301","line":42,"column":15,"nodeType":"278","messageId":"279","endLine":42,"endColumn":33},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"277","line":180,"column":15,"nodeType":"278","messageId":"279","endLine":180,"endColumn":43},{"ruleId":"276","severity":1,"message":"280","line":195,"column":15,"nodeType":"278","messageId":"279","endLine":195,"endColumn":42},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"302","line":60,"column":15,"nodeType":"278","messageId":"279","endLine":60,"endColumn":31},{"ruleId":"276","severity":1,"message":"284","line":4,"column":8,"nodeType":"278","messageId":"279","endLine":4,"endColumn":14},{"ruleId":"276","severity":1,"message":"285","line":6,"column":29,"nodeType":"278","messageId":"279","endLine":6,"endColumn":36},{"ruleId":"276","severity":1,"message":"281","line":7,"column":14,"nodeType":"278","messageId":"279","endLine":7,"endColumn":18},{"ruleId":"276","severity":1,"message":"286","line":8,"column":8,"nodeType":"278","messageId":"279","endLine":8,"endColumn":34},{"ruleId":"276","severity":1,"message":"297","line":9,"column":22,"nodeType":"278","messageId":"279","endLine":9,"endColumn":42},{"ruleId":"276","severity":1,"message":"298","line":9,"column":44,"nodeType":"278","messageId":"279","endLine":9,"endColumn":61},{"ruleId":"276","severity":1,"message":"295","line":31,"column":15,"nodeType":"278","messageId":"279","endLine":31,"endColumn":31},{"ruleId":"287","severity":1,"message":"291","line":39,"column":46,"nodeType":"289","messageId":"290","endLine":39,"endColumn":48},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"277","line":157,"column":15,"nodeType":"278","messageId":"279","endLine":157,"endColumn":43},{"ruleId":"276","severity":1,"message":"280","line":172,"column":15,"nodeType":"278","messageId":"279","endLine":172,"endColumn":42},{"ruleId":"287","severity":1,"message":"288","line":220,"column":90,"nodeType":"289","messageId":"290","endLine":220,"endColumn":92},{"ruleId":"287","severity":1,"message":"291","line":224,"column":44,"nodeType":"289","messageId":"290","endLine":224,"endColumn":46},{"ruleId":"287","severity":1,"message":"291","line":243,"column":69,"nodeType":"289","messageId":"290","endLine":243,"endColumn":71},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"295","line":55,"column":15,"nodeType":"278","messageId":"279","endLine":55,"endColumn":31},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"303","line":101,"column":15,"nodeType":"278","messageId":"279","endLine":101,"endColumn":25},{"ruleId":"276","severity":1,"message":"304","line":102,"column":15,"nodeType":"278","messageId":"279","endLine":102,"endColumn":28},{"ruleId":"276","severity":1,"message":"283","line":117,"column":15,"nodeType":"278","messageId":"279","endLine":117,"endColumn":24},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"297","line":6,"column":22,"nodeType":"278","messageId":"279","endLine":6,"endColumn":42},{"ruleId":"276","severity":1,"message":"298","line":6,"column":44,"nodeType":"278","messageId":"279","endLine":6,"endColumn":61},{"ruleId":"287","severity":1,"message":"291","line":37,"column":36,"nodeType":"289","messageId":"290","endLine":37,"endColumn":38},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"305","line":93,"column":15,"nodeType":"278","messageId":"279","endLine":93,"endColumn":34},{"ruleId":"276","severity":1,"message":"306","line":97,"column":15,"nodeType":"278","messageId":"279","endLine":97,"endColumn":29},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"286","line":6,"column":8,"nodeType":"278","messageId":"279","endLine":6,"endColumn":34},{"ruleId":"276","severity":1,"message":"307","line":9,"column":8,"nodeType":"278","messageId":"279","endLine":9,"endColumn":38},{"ruleId":"276","severity":1,"message":"308","line":43,"column":15,"nodeType":"278","messageId":"279","endLine":43,"endColumn":23},{"ruleId":"276","severity":1,"message":"309","line":47,"column":15,"nodeType":"278","messageId":"279","endLine":47,"endColumn":23},{"ruleId":"287","severity":1,"message":"291","line":54,"column":69,"nodeType":"289","messageId":"290","endLine":54,"endColumn":71},{"ruleId":"276","severity":1,"message":"286","line":6,"column":8,"nodeType":"278","messageId":"279","endLine":6,"endColumn":34},{"ruleId":"276","severity":1,"message":"310","line":110,"column":15,"nodeType":"278","messageId":"279","endLine":110,"endColumn":24},{"ruleId":"276","severity":1,"message":"311","line":111,"column":15,"nodeType":"278","messageId":"279","endLine":111,"endColumn":20},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"295","line":85,"column":15,"nodeType":"278","messageId":"279","endLine":85,"endColumn":31},{"ruleId":"276","severity":1,"message":"281","line":5,"column":14,"nodeType":"278","messageId":"279","endLine":5,"endColumn":18},{"ruleId":"276","severity":1,"message":"286","line":6,"column":8,"nodeType":"278","messageId":"279","endLine":6,"endColumn":34},{"ruleId":"276","severity":1,"message":"310","line":110,"column":15,"nodeType":"278","messageId":"279","endLine":110,"endColumn":24},{"ruleId":"276","severity":1,"message":"312","line":8,"column":15,"nodeType":"278","messageId":"279","endLine":8,"endColumn":32},"no-native-reassign",["313"],"no-negated-in-lhs",["314"],"no-unused-vars","'planningPeriodsTableContents' is assigned a value but never used.","Identifier","unusedVar","'planningPeriodsTableColumns' is assigned a value but never used.","'Link' is defined but never used.","'dedicatedTeamId' is assigned a value but never used.","'positions' is assigned a value but never used.","'moment' is defined but never used.","'NavLink' is defined but never used.","'TimeSheetsByDateIssueChart' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'Cell' is defined but never used.","'ResponsiveContainer' is defined but never used.","'companiesQueue' is assigned a value but never used.","'planningPeriodId' is assigned a value but never used.","'RouterLink' is defined but never used.","'GridToolbarContainer' is defined but never used.","'GridToolbarExport' is defined but never used.","'TimeSheetsByDatePeriodChart' is defined but never used.","'ValueByDatePeriodChart' is defined but never used.","'planningPeriodName' is assigned a value but never used.","'projectManagerId' is assigned a value but never used.","'quarterKey' is assigned a value but never used.","'projectTeamId' is assigned a value but never used.","'planningPeriodStart' is assigned a value but never used.","'systemQuarters' is assigned a value but never used.","'ReengineeringByDatePeriodChart' is defined but never used.","'systemId' is assigned a value but never used.","'estimate' is assigned a value but never used.","'personKey' is assigned a value but never used.","'month' is assigned a value but never used.","'planningPeriodEnd' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]