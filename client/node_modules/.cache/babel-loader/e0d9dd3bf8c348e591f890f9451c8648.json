{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikhaylovv\\\\PycharmProjects\\\\second_eye\\\\client\\\\src\\\\components\\\\DedicatedTeamPlanningPeriodDetail.js\";\nimport React, { Component } from \"react\";\nimport { gql } from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport { Box, Link } from \"@material-ui/core\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { CartesianGrid, Legend, ReferenceLine, Scatter, ScatterChart, XAxis, YAxis, ZAxis } from \"recharts\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId = gql`\n    query DedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId($planningPeriodId: String!, $dedicatedTeamId: String!) {\n          dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId(dedicatedTeamId: $dedicatedTeamId, planningPeriodId: $planningPeriodId) {\n                id\n                estimate\n                dedicatedTeam {\n                    name\n                }\n                planningPeriod {\n                    name\n                    start\n                    end\n                }\n                timeSpentPercentWithValueAndWithoutValueByDate {\n                    date\n                    timeSpentWithoutValuePercentCumsum\n                    timeSpentWithValuePercentCumsum\n                }\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                }\n                changeRequests {\n                    id\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategory {\n                        id\n                    }\n                }\n          }\n    }\n`;\n\nclass DedicatedTeamPlanningPeriodDetail extends Component {\n  render() {\n    if (this.props.data.loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 47\n      }, this);\n    }\n\n    const dedicatedTeamPlanningPeriod = this.props.data.dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId;\n    const dedicatedTeamName = dedicatedTeamPlanningPeriod.dedicatedTeam.name;\n    const estimate = dedicatedTeamPlanningPeriod.estimate;\n    const planningPeriodName = dedicatedTeamPlanningPeriod.planningPeriod.name;\n    const planningPeriodStart = dedicatedTeamPlanningPeriod.planningPeriod.start;\n    const planningPeriodEnd = dedicatedTeamPlanningPeriod.planningPeriod.end;\n    const changeRequests = dedicatedTeamPlanningPeriod.changeRequests;\n    const timeSheetsByDate = dedicatedTeamPlanningPeriod.timeSheetsByDate;\n    const timeSpentPercentWithValueAndWithoutValueByDate = dedicatedTeamPlanningPeriod.timeSpentPercentWithValueAndWithoutValueByDate;\n    const today = new Date().getTime();\n    const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null;\n    const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null;\n    const allEdgeDates = [today, planningPeriodStart, planningPeriodEnd];\n\n    if (firstTimeSheetDate) {\n      allEdgeDates.push(firstTimeSheetDate);\n    }\n\n    if (lastTimeSheetDate) {\n      allEdgeDates.push(lastTimeSheetDate);\n    }\n\n    const xAxisStart = Math.min(...allEdgeDates);\n    const xAxisEnd = Math.max(...allEdgeDates);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body\",\n        noWrap: true,\n        children: [\"\\u0412\\u044B\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u0430\\u044F \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0430 \", dedicatedTeamName, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), \"\\u041F\\u0435\\u0440\\u0438\\u043E\\u0434 \\u043F\\u043B\\u0430\\u043D\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \", planningPeriodName, \" (\", planningPeriodStart, \"-\", planningPeriodEnd, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body\",\n        noWrap: true,\n        children: \"\\u0417\\u0430\\u044F\\u0432\\u043A\\u0438 \\u043D\\u0430 \\u0434\\u043E\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentCumsum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodStart).getTime(),\n          stroke: \"green\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041D\\u0430\\u0447\\u0430\\u043B\\u043E \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodEnd).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: estimate,\n          stroke: \"black\",\n          strokeDasharray: \"5 5\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0421\\u043F\\u0438\\u0441\\u0430\\u043D\\u043E \\u0432\\u0441\\u0435\\u0433\\u043E\",\n          data: timeSheetsByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentCumsum: item.timeSpentCumsum\n            };\n          }),\n          line: true,\n          fill: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentWithoutValuePercentCumsum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodStart).getTime(),\n          stroke: \"green\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041D\\u0430\\u0447\\u0430\\u043B\\u043E \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodEnd).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0414\\u043E\\u043B\\u044F \\u0441\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0439 \\u043D\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0431\\u0435\\u0437 \\u0446\\u0435\\u043D\\u043D\\u043E\\u0441\\u0442\\u0438\",\n          data: timeSpentPercentWithValueAndWithoutValueByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentWithoutValuePercentCumsum: item.timeSpentWithoutValuePercentCumsum\n            };\n          }),\n          line: true,\n          fill: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: changeRequests.slice().sort(function (a, b) {\n          if (a.stateCategory.id === 3 && b.stateCategory.id !== 3) {\n            return 1;\n          }\n\n          if (a.stateCategory.id === 3 && b.stateCategory.id === 3) {\n            return 0;\n          }\n\n          if (a.stateCategory.id !== 3 && b.stateCategory.id === 3) {\n            return -1;\n          }\n\n          return b.timeLeft - a.timeLeft;\n        }).map(changeRequest => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [changeRequest.stateCategory.id !== 3 ? `Осталось ${changeRequest.timeLeft} ч ` : '', changeRequest.estimate === 0 && changeRequest.stateCategory.id !== 3 ? `Оценка ${changeRequest.estimate} ч ` : '', changeRequest.hasValue ? '' : 'Нет ценности ', /*#__PURE__*/_jsxDEV(RouterLink, {\n            style: {\n              textDecoration: changeRequest.stateCategory.id === 3 ? 'line-through' : 'none'\n            },\n            to: `/changeRequests/${changeRequest.id}`,\n            children: changeRequest.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 33\n          }, this)]\n        }, changeRequest.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default graphql(fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId, {\n  options: props => {\n    return {\n      variables: {\n        planningPeriodId: props.match.params.planningPeriodId,\n        dedicatedTeamId: props.match.params.dedicatedTeamId\n      }\n    };\n  }\n})(DedicatedTeamPlanningPeriodDetail);","map":{"version":3,"sources":["C:/Users/mikhaylovv/PycharmProjects/second_eye/client/src/components/DedicatedTeamPlanningPeriodDetail.js"],"names":["React","Component","gql","graphql","Typography","Box","Link","RouterLink","CartesianGrid","Legend","ReferenceLine","Scatter","ScatterChart","XAxis","YAxis","ZAxis","moment","fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId","DedicatedTeamPlanningPeriodDetail","render","props","data","loading","dedicatedTeamPlanningPeriod","dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId","dedicatedTeamName","dedicatedTeam","name","estimate","planningPeriodName","planningPeriod","planningPeriodStart","start","planningPeriodEnd","end","changeRequests","timeSheetsByDate","timeSpentPercentWithValueAndWithoutValueByDate","today","Date","getTime","firstTimeSheetDate","length","date","lastTimeSheetDate","allEdgeDates","push","xAxisStart","Math","min","xAxisEnd","max","left","format","map","item","timeSpentCumsum","timeSpentWithoutValuePercentCumsum","slice","sort","a","b","stateCategory","id","timeLeft","changeRequest","hasValue","textDecoration","options","variables","planningPeriodId","match","params","dedicatedTeamId"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {CartesianGrid, Legend, ReferenceLine, Scatter, ScatterChart, XAxis, YAxis, ZAxis} from \"recharts\";\r\nimport moment from \"moment\";\r\n\r\nconst fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId = gql`\r\n    query DedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId($planningPeriodId: String!, $dedicatedTeamId: String!) {\r\n          dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId(dedicatedTeamId: $dedicatedTeamId, planningPeriodId: $planningPeriodId) {\r\n                id\r\n                estimate\r\n                dedicatedTeam {\r\n                    name\r\n                }\r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n                timeSpentPercentWithValueAndWithoutValueByDate {\r\n                    date\r\n                    timeSpentWithoutValuePercentCumsum\r\n                    timeSpentWithValuePercentCumsum\r\n                }\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                }\r\n                changeRequests {\r\n                    id\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategory {\r\n                        id\r\n                    }\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass DedicatedTeamPlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const dedicatedTeamPlanningPeriod = this.props.data.dedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId\r\n        const dedicatedTeamName = dedicatedTeamPlanningPeriod.dedicatedTeam.name\r\n        const estimate = dedicatedTeamPlanningPeriod.estimate\r\n        const planningPeriodName = dedicatedTeamPlanningPeriod.planningPeriod.name\r\n        const planningPeriodStart = dedicatedTeamPlanningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = dedicatedTeamPlanningPeriod.planningPeriod.end\r\n        const changeRequests = dedicatedTeamPlanningPeriod.changeRequests\r\n\r\n        const timeSheetsByDate = dedicatedTeamPlanningPeriod.timeSheetsByDate\r\n        const timeSpentPercentWithValueAndWithoutValueByDate = dedicatedTeamPlanningPeriod.timeSpentPercentWithValueAndWithoutValueByDate\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today, planningPeriodStart, planningPeriodEnd]\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates)\r\n        const xAxisEnd = Math.max(...allEdgeDates)\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Выделенная команда { dedicatedTeamName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                </Typography>\r\n\r\n                <br />\r\n                <Typography variant=\"body\" noWrap>\r\n                    Заявки на доработку\r\n                </Typography>\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis type=\"number\" dataKey=\"timeSpentCumsum\" />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodStart).getTime() } stroke=\"green\" strokeDasharray=\"5 5\" label=\"Начало периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodEnd).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Окончание периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={ estimate } stroke=\"black\" strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано всего\"\r\n                        data= {\r\n                            timeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"black\"\r\n                    />\r\n                </ScatterChart>\r\n                                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis type=\"number\" dataKey=\"timeSpentWithoutValuePercentCumsum\" />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodStart).getTime() } stroke=\"green\" strokeDasharray=\"5 5\" label=\"Начало периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodEnd).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Окончание периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n                                    \r\n                    <Scatter\r\n                        name=\"Доля списаний на задачи без ценности\"\r\n                        data= {\r\n                            timeSpentPercentWithValueAndWithoutValueByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentWithoutValuePercentCumsum: item.timeSpentWithoutValuePercentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"black\"\r\n                    />\r\n                </ScatterChart>\r\n               <ul>\r\n                    { changeRequests\r\n                        .slice()\r\n.                       sort(function(a, b) {\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id !== 3) {\r\n                                return 1;\r\n                            }\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id === 3) {\r\n                                return 0;\r\n                            }\r\n                            if (a.stateCategory.id !== 3 && b.stateCategory.id === 3) {\r\n                                return -1;\r\n                            }\r\n\r\n                            return b.timeLeft - a.timeLeft\r\n                        })\r\n                        .map(changeRequest => (\r\n                            <li key={ changeRequest.id }>\r\n                                { changeRequest.stateCategory.id !== 3 ? `Осталось ${ changeRequest.timeLeft } ч ` : '' }\r\n                                { changeRequest.estimate === 0 && changeRequest.stateCategory.id !== 3 ? `Оценка ${ changeRequest.estimate } ч ` : '' }\r\n                                { changeRequest.hasValue ? '' : 'Нет ценности ' }\r\n\r\n                                <RouterLink style={{ textDecoration: changeRequest.stateCategory.id === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${changeRequest.id}` }>\r\n                                { changeRequest.name }\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                </ul>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchDedicatedTeamPlanningPeriodByPlanningPeriodIdAndDedicatedTeamId, {\r\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, dedicatedTeamId: props.match.params.dedicatedTeamId }}}\r\n})(DedicatedTeamPlanningPeriodDetail);"]},"metadata":{},"sourceType":"module"}