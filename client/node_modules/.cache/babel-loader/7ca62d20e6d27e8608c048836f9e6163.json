{"ast":null,"code":"import * as PropTypes from 'prop-types';\nimport { useMutation } from \"../hooks/index.js\";\nexport function Mutation(props) {\n  var _a = useMutation(props.mutation, props),\n      runMutation = _a[0],\n      result = _a[1];\n\n  return props.children ? props.children(runMutation, result) : null;\n}\nMutation.propTypes = {\n  mutation: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  refetchQueries: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])), PropTypes.func]),\n  awaitRefetchQueries: PropTypes.bool,\n  update: PropTypes.func,\n  children: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  fetchPolicy: PropTypes.string\n};","map":{"version":3,"sources":["../../../src/react/components/Mutation.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAIA,SAAS,WAAT,QAA4B,mBAA5B;AAEA,OAAM,SAAU,QAAV,CACJ,KADI,EAC8C;AAE5C,MAAA,EAAA,GAAwB,WAAW,CAAC,KAAK,CAAC,QAAP,EAAiB,KAAjB,CAAnC;AAAA,MAAC,WAAW,GAAA,EAAA,CAAA,CAAA,CAAZ;AAAA,MAAc,MAAM,GAAA,EAAA,CAAA,CAAA,CAApB;;AACN,SAAO,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,MAA5B,CAAjB,GAAuD,IAA9D;AACD;AAMD,QAAQ,CAAC,SAAT,GAAqB;AACnB,EAAA,QAAQ,EAAE,SAAS,CAAC,MAAV,CAAiB,UADR;AAEnB,EAAA,SAAS,EAAE,SAAS,CAAC,MAFF;AAGnB,EAAA,kBAAkB,EAAE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,IAA7B,CAApB,CAHD;AAInB,EAAA,cAAc,EAAE,SAAS,CAAC,SAAV,CAAoB,CAClC,SAAS,CAAC,OAAV,CACE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,MAA7B,CAApB,CADF,CADkC,EAIlC,SAAS,CAAC,IAJwB,CAApB,CAJG;AAUnB,EAAA,mBAAmB,EAAE,SAAS,CAAC,IAVZ;AAWnB,EAAA,MAAM,EAAE,SAAS,CAAC,IAXC;AAYnB,EAAA,QAAQ,EAAE,SAAS,CAAC,IAAV,CAAe,UAZN;AAanB,EAAA,WAAW,EAAE,SAAS,CAAC,IAbJ;AAcnB,EAAA,OAAO,EAAE,SAAS,CAAC,IAdA;AAenB,EAAA,WAAW,EAAE,SAAS,CAAC;AAfJ,CAArB","sourcesContent":["import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { MutationComponentOptions } from './types';\nimport { useMutation } from '../hooks';\n\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n) {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport interface Mutation<TData, TVariables> {\n  propTypes: PropTypes.InferProps<MutationComponentOptions<TData, TVariables>>;\n}\n\nMutation.propTypes = {\n  mutation: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  refetchQueries: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    ),\n    PropTypes.func\n  ]),\n  awaitRefetchQueries: PropTypes.bool,\n  update: PropTypes.func,\n  children: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  fetchPolicy: PropTypes.string,\n} as Mutation<any, any>[\"propTypes\"];\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}