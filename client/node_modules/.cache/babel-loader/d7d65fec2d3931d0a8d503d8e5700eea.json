{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikhaylovv\\\\PycharmProjects\\\\second_eye\\\\client\\\\src\\\\components\\\\PlanningPeriodDetail.js\";\nimport React, { Component } from \"react\";\nimport { gql } from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport { Box, Link } from \"@material-ui/core\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchPlanningPeriodById = gql`\n    query PlanningPeriodByIdQuery($id: String!) {\n        planningPeriodById(id: $id) {\n            id \n            name\n            start\n            end\n            estimate\n            \n            dedicatedTeams {\n                id\n                name\n            }\n            \n            timeSpentPercentWithValueAndWithoutValueByDate {\n                date\n                timeSpentWithoutValuePercentCumsum\n                timeSpentWithValuePercentCumsum\n            }\n    \n            timeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            changeRequests {\n                id\n                estimate\n                timeLeft\n                hasValue\n                name\n            }\n        }\n    }\n`;\n\nclass PlanningPeriodDetail extends Component {\n  render() {\n    if (this.props.data.loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 47\n      }, this);\n    }\n\n    const planningPeriodId = this.props.match.params.id;\n    const planningPeriod = this.props.data.planningPeriodById;\n    const estimate = planningPeriod.estimate;\n    const planningPeriodName = planningPeriod.planningPeriod.name;\n    const planningPeriodStart = planningPeriod.planningPeriod.start;\n    const planningPeriodEnd = planningPeriod.planningPeriod.end;\n    const dedicatedTeams = planningPeriod.dedicatedTeams;\n    const changeRequests = planningPeriod.changeRequests;\n    const timeSheetsByDate = planningPeriod.timeSheetsByDate;\n    const timeSpentPercentWithValueAndWithoutValueByDate = planningPeriod.timeSpentPercentWithValueAndWithoutValueByDate;\n    const today = new Date().getTime();\n    const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null;\n    const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null;\n    const allEdgeDates = [today, planningPeriodStart, planningPeriodEnd];\n\n    if (firstTimeSheetDate) {\n      allEdgeDates.push(firstTimeSheetDate);\n    }\n\n    if (lastTimeSheetDate) {\n      allEdgeDates.push(lastTimeSheetDate);\n    }\n\n    const xAxisStart = Math.min(...allEdgeDates);\n    const xAxisEnd = Math.max(...allEdgeDates);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        noWrap: true,\n        children: \"\\u0412\\u044B\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u044B\\u0435 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dedicatedTeams.slice().sort(function (a, b) {\n          if (a.name > b.name) {\n            return 1;\n          }\n\n          if (a.name === b.name) {\n            return 0;\n          }\n\n          if (a.name < b.name) {\n            return -1;\n          }\n        }).map(dedicatedTeam => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(RouterLink, {\n            to: `/planningPeriods/${planningPeriodId}/dedicatedTeams/${dedicatedTeam.id}`,\n            children: dedicatedTeam.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this)\n        }, dedicatedTeam.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default graphql(fetchPlanningPeriodById, {\n  options: props => {\n    return {\n      variables: {\n        id: props.match.params.id\n      }\n    };\n  }\n})(PlanningPeriodDetail);","map":{"version":3,"sources":["C:/Users/mikhaylovv/PycharmProjects/second_eye/client/src/components/PlanningPeriodDetail.js"],"names":["React","Component","gql","graphql","Typography","Box","Link","RouterLink","fetchPlanningPeriodById","PlanningPeriodDetail","render","props","data","loading","planningPeriodId","match","params","id","planningPeriod","planningPeriodById","estimate","planningPeriodName","name","planningPeriodStart","start","planningPeriodEnd","end","dedicatedTeams","changeRequests","timeSheetsByDate","timeSpentPercentWithValueAndWithoutValueByDate","today","Date","getTime","firstTimeSheetDate","length","date","lastTimeSheetDate","allEdgeDates","push","xAxisStart","Math","min","xAxisEnd","max","slice","sort","a","b","map","dedicatedTeam","options","variables"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\nconst fetchPlanningPeriodById = gql`\r\n    query PlanningPeriodByIdQuery($id: String!) {\r\n        planningPeriodById(id: $id) {\r\n            id \r\n            name\r\n            start\r\n            end\r\n            estimate\r\n            \r\n            dedicatedTeams {\r\n                id\r\n                name\r\n            }\r\n            \r\n            timeSpentPercentWithValueAndWithoutValueByDate {\r\n                date\r\n                timeSpentWithoutValuePercentCumsum\r\n                timeSpentWithValuePercentCumsum\r\n            }\r\n    \r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            changeRequests {\r\n                id\r\n                estimate\r\n                timeLeft\r\n                hasValue\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass PlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriodId = this.props.match.params.id\r\n        const planningPeriod = this.props.data.planningPeriodById\r\n        const estimate = planningPeriod.estimate\r\n        const planningPeriodName = planningPeriod.planningPeriod.name\r\n        const planningPeriodStart = planningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = planningPeriod.planningPeriod.end\r\n\r\n        const dedicatedTeams = planningPeriod.dedicatedTeams\r\n        const changeRequests = planningPeriod.changeRequests\r\n\r\n        const timeSheetsByDate = planningPeriod.timeSheetsByDate\r\n        const timeSpentPercentWithValueAndWithoutValueByDate = planningPeriod.timeSpentPercentWithValueAndWithoutValueByDate\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today, planningPeriodStart, planningPeriodEnd]\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates)\r\n        const xAxisEnd = Math.max(...allEdgeDates)\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h3\" noWrap>\r\n                    Выделенные команды\r\n                </Typography>\r\n\r\n               <ul>\r\n                    { dedicatedTeams\r\n                        .slice()\r\n                        .sort(function(a, b) {\r\n                            if (a.name > b.name) {\r\n                                return 1;\r\n                            }\r\n                            if (a.name === b.name) {\r\n                                return 0;\r\n                            }\r\n                            if (a.name < b.name) {\r\n                                return -1;\r\n                            }\r\n                        })\r\n                        .map(dedicatedTeam => (\r\n                            <li key={ dedicatedTeam.id }>\r\n                                <RouterLink to={ `/planningPeriods/${planningPeriodId}/dedicatedTeams/${dedicatedTeam.id}` }>\r\n                                { dedicatedTeam.name }\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                </ul>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPlanningPeriodById, {\r\n    options: (props) => { return { variables: { id: props.match.params.id }}}\r\n})(PlanningPeriodDetail);"]},"metadata":{},"sourceType":"module"}