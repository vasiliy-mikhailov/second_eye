{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { parser } from \"../parser/index.js\";\nimport { Query } from \"../components/index.js\";\nimport { getDisplayName, GraphQLBase, calculateVariablesFromProps, defaultMapPropsToOptions, defaultMapPropsToSkip } from \"./hoc-utils.js\";\nexport function withQuery(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n\n  var operation = parser(document);\n  var _a = operationOptions.options,\n      options = _a === void 0 ? defaultMapPropsToOptions : _a,\n      _b = operationOptions.skip,\n      skip = _b === void 0 ? defaultMapPropsToSkip : _b,\n      _c = operationOptions.alias,\n      alias = _c === void 0 ? 'Apollo' : _c;\n  var mapPropsToOptions = options;\n\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = function mapPropsToOptions() {\n      return options;\n    };\n  }\n\n  var mapPropsToSkip = skip;\n\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = function mapPropsToSkip() {\n      return skip;\n    };\n  }\n\n  var lastResultProps;\n  return function (WrappedComponent) {\n    var graphQLDisplayName = alias + \"(\" + getDisplayName(WrappedComponent) + \")\";\n\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n\n      function GraphQL() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      GraphQL.prototype.render = function () {\n        var _this = this;\n\n        var props = this.props;\n        var shouldSkip = mapPropsToSkip(props);\n        var opts = shouldSkip ? Object.create(null) : __assign({}, mapPropsToOptions(props));\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return React.createElement(Query, __assign({}, opts, {\n          displayName: graphQLDisplayName,\n          skip: shouldSkip,\n          query: document\n        }), function (_a) {\n          var _b, _c;\n\n          var _ = _a.client,\n              data = _a.data,\n              r = __rest(_a, [\"client\", \"data\"]);\n\n          if (operationOptions.withRef) {\n            _this.withRef = true;\n            props = Object.assign({}, props, {\n              ref: _this.setWrappedInstance\n            });\n          }\n\n          if (shouldSkip) {\n            return React.createElement(WrappedComponent, __assign({}, props, {}));\n          }\n\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'data';\n          var childProps = (_b = {}, _b[name] = result, _b);\n\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = result, _c.ownProps = props, _c);\n            lastResultProps = operationOptions.props(newResult, lastResultProps);\n            childProps = lastResultProps;\n          }\n\n          return React.createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}","map":{"version":3,"sources":["../../../src/react/hoc/query-hoc.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { parser } from '../parser';\nimport { BaseQueryOptions } from '../types/types';\nimport { Query } from '../components';\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip\n} from './hoc-utils';\nimport { OperationOption, OptionProps, DataProps } from './types';\n\nexport function withQuery<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo'\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseQueryOptions;\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = () => options as BaseQueryOptions;\n  }\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = () => skip as any;\n  }\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip\n          ? Object.create(null)\n          : { ...mapPropsToOptions(props) };\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return (\n          <Query\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            query={document}\n          >\n            {({ client: _, data, ...r }: any) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance\n                });\n              }\n\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...(props as TProps)}\n                    {...({} as TChildProps)}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: result,\n                  ownProps: props as TProps\n                };\n                lastResultProps = operationOptions.props(\n                  newResult,\n                  lastResultProps\n                );\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...(props as TProps)}\n                  {...(childProps as TChildProps)}\n                />\n              );\n            }}\n          </Query>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}