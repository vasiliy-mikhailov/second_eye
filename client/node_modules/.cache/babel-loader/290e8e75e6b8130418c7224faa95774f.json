{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikhaylovv\\\\PycharmProjects\\\\second_eye\\\\client\\\\src\\\\components\\\\ChangeRequestDetail.js\";\nimport React, { Component } from \"react\";\nimport { ScatterChart, CartesianGrid, Legend, XAxis, YAxis, ReferenceLine, ZAxis, Scatter } from \"recharts\";\nimport { gql } from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport moment from 'moment';\nimport Typography from '@material-ui/core/Typography';\nimport { Link as RouterLink, NavLink } from \"react-router-dom\";\nimport { Box, Link } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchChangeRequest = gql`\n    query ChangeRequestByIdQuery($id: String!) {\n        changeRequestById(id: $id) {\n            id \n            url\n            name\n            state {\n                name\n            }\n            \n            analysisEstimate\n            analysisTimeSpent\n            analysisTimeLeft\n            analysisTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            developmentEstimate\n            developmentTimeSpent\n            developmentTimeLeft\n            developmentTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            testingEstimate\n            testingTimeSpent\n            testingTimeLeft\n            testingTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            estimate\n            timeSpent\n            timeLeft\n            timeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            plannedInstallDate\n            \n            systemChangeRequests {\n                id\n                name\n                \n                estimate\n                timeLeft\n                state {\n                    name\n                }\n                stateCategory {\n                    id\n                }\n            }\n        }\n    }\n`;\n\nclass ChangeRequestDetail extends Component {\n  render() {\n    if (this.props.data.loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 47\n      }, this);\n    }\n\n    const plannedInstallDate = this.props.data.changeRequestById.plannedInstallDate ? new Date(this.props.data.changeRequestById.plannedInstallDate).getTime() : null;\n    const timeSheetsByDate = this.props.data.changeRequestById.timeSheetsByDate;\n    const today = new Date().getTime();\n    const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null;\n    const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null;\n    const allEdgeDates = [today];\n\n    if (plannedInstallDate) {\n      allEdgeDates.push(plannedInstallDate);\n    }\n\n    if (firstTimeSheetDate) {\n      allEdgeDates.push(firstTimeSheetDate);\n    }\n\n    if (lastTimeSheetDate) {\n      allEdgeDates.push(lastTimeSheetDate);\n    }\n\n    const xAxisStart = Math.min(...allEdgeDates);\n    const xAxisEnd = Math.max(...allEdgeDates);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        noWrap: true,\n        children: [/*#__PURE__*/_jsxDEV(NavLink, {\n          to: this.props.location.pathname,\n          children: this.props.data.changeRequestById.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), \" \\xA0\", this.props.data.changeRequestById.name, \" \\xA0\", this.props.data.changeRequestById.state.name, \" \\xA0\", /*#__PURE__*/_jsxDEV(Link, {\n          href: this.props.data.changeRequestById.url,\n          children: \"[ \\u0438\\u0441\\u0442\\u043E\\u0447\\u043D\\u0438\\u043A ]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), \"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \", this.props.data.changeRequestById.timeLeft, \" \\u0447 ( \", (this.props.data.changeRequestById.timeLeft / this.props.data.changeRequestById.estimate * 100).toFixed(2), \"% ) \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 195\n        }, this), \"\\u0421\\u0434\\u0435\\u043B\\u0430\\u043D\\u043E \", this.props.data.changeRequestById.timeSpent, \" \\u0447 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 79\n        }, this), \"\\u041E\\u0446\\u0435\\u043D\\u043A\\u0430 \", this.props.data.changeRequestById.estimate, \" \\u0447 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 77\n        }, this), \"\\u041F\\u043B\\u0430\\u043D\\u043E\\u0432\\u0430\\u044F \\u0434\\u0430\\u0442\\u0430 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0438 \", plannedInstallDate ? moment(plannedInstallDate).format(\"YYYY-MM-DD\") : \"не указана\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 132\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentCumsum\",\n          tickFormatter: tick => {\n            return tick.toLocaleString();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), this.props.data.changeRequestById.plannedInstallDate ? /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(this.props.data.changeRequestById.plannedInstallDate).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041F\\u043B\\u0430\\u043D\\u043E\\u0432\\u0430\\u044F \\u0434\\u0430\\u0442\\u0430 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0438\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: this.props.data.changeRequestById.estimate,\n          stroke: \"black\",\n          strokeDasharray: \"5 5\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0421\\u043F\\u0438\\u0441\\u0430\\u043D\\u043E \\u0432\\u0441\\u0435\\u0433\\u043E\",\n          data: this.props.data.changeRequestById.timeSheetsByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentCumsum: item.timeSpentCumsum\n            };\n          }),\n          line: true,\n          fill: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentCumsum\",\n          tickFormatter: tick => {\n            return tick.toLocaleString();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), this.props.data.changeRequestById.plannedInstallDate ? /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(this.props.data.changeRequestById.plannedInstallDate).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041F\\u043B\\u0430\\u043D\\u043E\\u0432\\u0430\\u044F \\u0434\\u0430\\u0442\\u0430 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0438\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 29\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: this.props.data.changeRequestById.analysisEstimate,\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0421\\u043F\\u0438\\u0441\\u0430\\u043D\\u043E \\u0430\\u043D\\u0430\\u043B\\u0438\\u0442\\u0438\\u043A\\u0430\",\n          data: this.props.data.changeRequestById.analysisTimeSheetsByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentCumsum: item.timeSpentCumsum\n            };\n          }),\n          line: true,\n          fill: \"red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentCumsum\",\n          tickFormatter: tick => {\n            return tick.toLocaleString();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this), this.props.data.changeRequestById.plannedInstallDate ? /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(this.props.data.changeRequestById.plannedInstallDate).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041F\\u043B\\u0430\\u043D\\u043E\\u0432\\u0430\\u044F \\u0434\\u0430\\u0442\\u0430 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0438\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 29\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: this.props.data.changeRequestById.developmentEstimate,\n          stroke: \"green\",\n          strokeDasharray: \"5 5\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0421\\u043F\\u0438\\u0441\\u0430\\u043D\\u043E \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430\",\n          data: this.props.data.changeRequestById.developmentTimeSheetsByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentCumsum: item.timeSpentCumsum\n            };\n          }),\n          line: true,\n          fill: \"green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentCumsum\",\n          tickFormatter: tick => {\n            return tick.toLocaleString();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this), this.props.data.changeRequestById.plannedInstallDate ? /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(this.props.data.changeRequestById.plannedInstallDate).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041F\\u043B\\u0430\\u043D\\u043E\\u0432\\u0430\\u044F \\u0434\\u0430\\u0442\\u0430 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0438\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 29\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: this.props.data.changeRequestById.testingEstimate,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0421\\u043F\\u0438\\u0441\\u0430\\u043D\\u043E \\u0442\\u0435\\u0441\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435\",\n          data: this.props.data.changeRequestById.testingTimeSheetsByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentCumsum: item.timeSpentCumsum\n            };\n          }),\n          line: true,\n          fill: \"blue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.props.data.changeRequestById.systemChangeRequests.slice().sort(function (a, b) {\n          if (a.stateCategory.id === 3 && b.stateCategory.id !== 3) {\n            return 1;\n          }\n\n          if (a.stateCategory.id === 3 && b.stateCategory.id === 3) {\n            return 0;\n          }\n\n          if (a.stateCategory.id !== 3 && b.stateCategory.id === 3) {\n            return -1;\n          }\n\n          return b.timeLeft - a.timeLeft;\n        }).map(systemChangeRequest => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [systemChangeRequest.stateCategory.id !== 3 ? `Осталось ${systemChangeRequest.timeLeft} ч ` : '', systemChangeRequest.estimate === 0 && systemChangeRequest.stateCategory.id !== 3 ? `Оценка ${systemChangeRequest.estimate} ч ` : '', /*#__PURE__*/_jsxDEV(RouterLink, {\n            style: {\n              textDecoration: systemChangeRequest.stateCategory.id === 3 ? 'line-through' : 'none'\n            },\n            to: `/systemChangeRequests/${systemChangeRequest.id}`,\n            children: systemChangeRequest.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 33\n          }, this)]\n        }, systemChangeRequest.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default graphql(fetchChangeRequest, {\n  options: props => {\n    return {\n      variables: {\n        id: props.match.params.id\n      }\n    };\n  }\n})(ChangeRequestDetail);","map":{"version":3,"sources":["C:/Users/mikhaylovv/PycharmProjects/second_eye/client/src/components/ChangeRequestDetail.js"],"names":["React","Component","ScatterChart","CartesianGrid","Legend","XAxis","YAxis","ReferenceLine","ZAxis","Scatter","gql","graphql","moment","Typography","Link","RouterLink","NavLink","Box","fetchChangeRequest","ChangeRequestDetail","render","props","data","loading","plannedInstallDate","changeRequestById","Date","getTime","timeSheetsByDate","today","firstTimeSheetDate","length","date","lastTimeSheetDate","allEdgeDates","push","xAxisStart","Math","min","xAxisEnd","max","location","pathname","id","name","state","url","timeLeft","estimate","toFixed","timeSpent","format","left","tick","toLocaleString","map","item","timeSpentCumsum","analysisEstimate","analysisTimeSheetsByDate","developmentEstimate","developmentTimeSheetsByDate","testingEstimate","testingTimeSheetsByDate","systemChangeRequests","slice","sort","a","b","stateCategory","systemChangeRequest","textDecoration","options","variables","match","params"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {\r\n    ScatterChart,\r\n    CartesianGrid,\r\n    Legend,\r\n    XAxis,\r\n    YAxis,\r\n    ReferenceLine,\r\n    ZAxis, Scatter\r\n} from \"recharts\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport moment from 'moment';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Link as RouterLink, NavLink } from \"react-router-dom\"\r\nimport { Box, Link } from \"@material-ui/core\";\r\n\r\n\r\nconst fetchChangeRequest = gql`\r\n    query ChangeRequestByIdQuery($id: String!) {\r\n        changeRequestById(id: $id) {\r\n            id \r\n            url\r\n            name\r\n            state {\r\n                name\r\n            }\r\n            \r\n            analysisEstimate\r\n            analysisTimeSpent\r\n            analysisTimeLeft\r\n            analysisTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            developmentEstimate\r\n            developmentTimeSpent\r\n            developmentTimeLeft\r\n            developmentTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            testingEstimate\r\n            testingTimeSpent\r\n            testingTimeLeft\r\n            testingTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            estimate\r\n            timeSpent\r\n            timeLeft\r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            plannedInstallDate\r\n            \r\n            systemChangeRequests {\r\n                id\r\n                name\r\n                \r\n                estimate\r\n                timeLeft\r\n                state {\r\n                    name\r\n                }\r\n                stateCategory {\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass ChangeRequestDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const plannedInstallDate = this.props.data.changeRequestById.plannedInstallDate ? new Date(this.props.data.changeRequestById.plannedInstallDate).getTime() : null\r\n        const timeSheetsByDate = this.props.data.changeRequestById.timeSheetsByDate\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today]\r\n        if (plannedInstallDate) {\r\n            allEdgeDates.push(plannedInstallDate)\r\n        }\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates)\r\n        const xAxisEnd = Math.max(...allEdgeDates)\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body1\" noWrap>\r\n                    <NavLink to={ this.props.location.pathname }>\r\n                        { this.props.data.changeRequestById.id }\r\n                    </NavLink> &nbsp;\r\n                    { this.props.data.changeRequestById.name } &nbsp;\r\n                    { this.props.data.changeRequestById.state.name } &nbsp;\r\n                    <Link href={ this.props.data.changeRequestById.url }>\r\n                        [ источник ]\r\n                    </Link>\r\n                    <br />\r\n                    Осталось { this.props.data.changeRequestById.timeLeft } ч ( { (this.props.data.changeRequestById.timeLeft / this.props.data.changeRequestById.estimate * 100).toFixed(2) }% ) <br />\r\n                    Сделано { this.props.data.changeRequestById.timeSpent } ч <br />\r\n                    Оценка { this.props.data.changeRequestById.estimate } ч <br />\r\n                    Плановая дата установки { plannedInstallDate ? moment(plannedInstallDate).format(\"YYYY-MM-DD\") : \"не указана\"} <br />\r\n                </Typography>\r\n                <br />\r\n\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis\r\n                        type=\"number\"\r\n                        dataKey=\"timeSpentCumsum\"\r\n                        tickFormatter={ tick => {\r\n                            return tick.toLocaleString();\r\n                        }}\r\n                    />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n                    {\r\n                        (this.props.data.changeRequestById.plannedInstallDate) ?\r\n                            <ReferenceLine x={ new Date(this.props.data.changeRequestById.plannedInstallDate).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Плановая дата установки\" ifOverflow=\"extendDomain\"/> :\r\n                            \"\"\r\n                    }\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={ this.props.data.changeRequestById.estimate } stroke=\"black\" strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано всего\"\r\n                        data= {\r\n                            this.props.data.changeRequestById.timeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"black\"\r\n                    />\r\n                </ScatterChart>\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis\r\n                        type=\"number\"\r\n                        dataKey=\"timeSpentCumsum\"\r\n                        tickFormatter={ tick => {\r\n                            return tick.toLocaleString();\r\n                        }}\r\n                    />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n                    {\r\n                        (this.props.data.changeRequestById.plannedInstallDate) ?\r\n                            <ReferenceLine x={ new Date(this.props.data.changeRequestById.plannedInstallDate).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Плановая дата установки\" ifOverflow=\"extendDomain\"/> :\r\n                            \"\"\r\n                    }\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={this.props.data.changeRequestById.analysisEstimate} stroke=\"red\" strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано аналитика\"\r\n                        data= {\r\n                            this.props.data.changeRequestById.analysisTimeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"red\"\r\n                    />\r\n                </ScatterChart>\r\n                 <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis\r\n                        type=\"number\"\r\n                        dataKey=\"timeSpentCumsum\"\r\n                        tickFormatter={ tick => {\r\n                            return tick.toLocaleString();\r\n                        }}\r\n                    />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n                    {\r\n                        (this.props.data.changeRequestById.plannedInstallDate) ?\r\n                            <ReferenceLine x={ new Date(this.props.data.changeRequestById.plannedInstallDate).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Плановая дата установки\" ifOverflow=\"extendDomain\"/> :\r\n                            \"\"\r\n                    }\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={this.props.data.changeRequestById.developmentEstimate} stroke=\"green\" strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано разработка\"\r\n                        data= {\r\n                            this.props.data.changeRequestById.developmentTimeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"green\"\r\n                    />\r\n                </ScatterChart>\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis\r\n                        type=\"number\"\r\n                        dataKey=\"timeSpentCumsum\"\r\n                        tickFormatter={ tick => {\r\n                            return tick.toLocaleString();\r\n                        }}\r\n                    />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n                    {\r\n                        (this.props.data.changeRequestById.plannedInstallDate) ?\r\n                            <ReferenceLine x={ new Date(this.props.data.changeRequestById.plannedInstallDate).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Плановая дата установки\" ifOverflow=\"extendDomain\"/> :\r\n                            \"\"\r\n                    }\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={this.props.data.changeRequestById.testingEstimate} stroke=\"blue\" strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано тестирование\"\r\n                        data= {\r\n                            this.props.data.changeRequestById.testingTimeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"blue\"\r\n                    />\r\n                </ScatterChart>\r\n\r\n                <ul>\r\n                    { this.props.data.changeRequestById.systemChangeRequests\r\n                        .slice()\r\n                        .sort(function(a, b) {\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id !== 3) {\r\n                                return 1;\r\n                            }\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id === 3) {\r\n                                return 0;\r\n                            }\r\n                            if (a.stateCategory.id !== 3 && b.stateCategory.id === 3) {\r\n                                return -1;\r\n                            }\r\n\r\n                            return b.timeLeft - a.timeLeft\r\n                        })\r\n                        .map(systemChangeRequest => (\r\n                            <li key={systemChangeRequest.id}>\r\n                                { systemChangeRequest.stateCategory.id !== 3 ? `Осталось ${systemChangeRequest.timeLeft} ч ` : '' }\r\n                                { systemChangeRequest.estimate === 0 && systemChangeRequest.stateCategory.id !== 3 ? `Оценка ${systemChangeRequest.estimate} ч ` : '' }\r\n\r\n                                <RouterLink style={{ textDecoration: systemChangeRequest.stateCategory.id === 3 ? 'line-through' : 'none' }} to={ `/systemChangeRequests/${systemChangeRequest.id}` }>\r\n                                    {systemChangeRequest.name}\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                </ul>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchChangeRequest, {\r\n    options: (props) => { return { variables: { id: props.match.params.id }}}\r\n})(ChangeRequestDetail);"]},"metadata":{},"sourceType":"module"}