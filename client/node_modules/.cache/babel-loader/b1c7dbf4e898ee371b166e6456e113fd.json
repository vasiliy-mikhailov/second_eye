{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { SyncPromise } from '@sentry/utils';\nimport { BaseTransport } from './base';\n/** `XHR` based transport */\n\nvar XHRTransport = function (_super) {\n  __extends(XHRTransport, _super);\n\n  function XHRTransport() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  XHRTransport.prototype.sendEvent = function (event) {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  XHRTransport.prototype.sendSession = function (session) {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  };\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n\n\n  XHRTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {\n    var _this = this;\n\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: \"Transport for \" + sentryRequest.type + \" requests locked till \" + this._disabledUntil(sentryRequest.type) + \" due to too many requests.\",\n        status: 429\n      });\n    }\n\n    return this._buffer.add(function () {\n      return new SyncPromise(function (resolve, reject) {\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n          if (request.readyState === 4) {\n            var headers = {\n              'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': request.getResponseHeader('Retry-After')\n            };\n\n            _this._handleResponse({\n              requestType: sentryRequest.type,\n              response: request,\n              headers: headers,\n              resolve: resolve,\n              reject: reject\n            });\n          }\n        };\n\n        request.open('POST', sentryRequest.url);\n\n        for (var header in _this.options.headers) {\n          if (_this.options.headers.hasOwnProperty(header)) {\n            request.setRequestHeader(header, _this.options.headers[header]);\n          }\n        }\n\n        request.send(sentryRequest.body);\n      });\n    });\n  };\n\n  return XHRTransport;\n}(BaseTransport);\n\nexport { XHRTransport };","map":{"version":3,"sources":["../../src/transports/xhr.ts"],"names":[],"mappings":";AAAA,SAAS,oBAAT,EAA+B,sBAA/B,QAA6D,cAA7D;AAEA,SAAS,WAAT,QAA4B,eAA5B;AAEA,SAAS,aAAT,QAA8B,QAA9B;AAEA;;AACA,IAAA,YAAA,GAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAAlC,WAAA,YAAA,GAAA;;AAwDC;AAvDC;;AAEG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,KAAjB,EAA6B;AAC3B,WAAO,KAAK,YAAL,CAAkB,oBAAoB,CAAC,KAAD,EAAQ,KAAK,IAAb,CAAtC,EAA0D,KAA1D,CAAP;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,OAAnB,EAAmC;AACjC,WAAO,KAAK,YAAL,CAAkB,sBAAsB,CAAC,OAAD,EAAU,KAAK,IAAf,CAAxC,EAA8D,OAA9D,CAAP;AACD,GAFM;AAIP;;;AAGG;;;AACK,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,aAArB,EAAmD,eAAnD,EAAmF;AAAnF,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,KAAK,cAAL,CAAoB,aAAa,CAAC,IAAlC,CAAJ,EAA6C;AAC3C,aAAO,OAAO,CAAC,MAAR,CAAe;AACpB,QAAA,KAAK,EAAE,eADa;AAEpB,QAAA,IAAI,EAAE,aAAa,CAAC,IAFA;AAGpB,QAAA,MAAM,EAAE,mBAAiB,aAAa,CAAC,IAA/B,GAAmC,wBAAnC,GAA4D,KAAK,cAAL,CAClE,aAAa,CAAC,IADoD,CAA5D,GAEP,4BALmB;AAMpB,QAAA,MAAM,EAAE;AANY,OAAf,CAAP;AAQD;;AAED,WAAO,KAAK,OAAL,CAAa,GAAb,CACL,YAAA;AACE,aAAA,IAAI,WAAJ,CAA0B,UAAC,OAAD,EAAU,MAAV,EAAgB;AACxC,YAAM,OAAO,GAAG,IAAI,cAAJ,EAAhB;;AAEA,QAAA,OAAO,CAAC,kBAAR,GAA6B,YAAA;AAC3B,cAAI,OAAO,CAAC,UAAR,KAAuB,CAA3B,EAA8B;AAC5B,gBAAM,OAAO,GAAG;AACd,sCAAwB,OAAO,CAAC,iBAAR,CAA0B,sBAA1B,CADV;AAEd,6BAAe,OAAO,CAAC,iBAAR,CAA0B,aAA1B;AAFD,aAAhB;;AAIA,YAAA,KAAI,CAAC,eAAL,CAAqB;AAAE,cAAA,WAAW,EAAE,aAAa,CAAC,IAA7B;AAAmC,cAAA,QAAQ,EAAE,OAA7C;AAAsD,cAAA,OAAO,EAAA,OAA7D;AAA+D,cAAA,OAAO,EAAA,OAAtE;AAAwE,cAAA,MAAM,EAAA;AAA9E,aAArB;AACD;AACF,SARD;;AAUA,QAAA,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,aAAa,CAAC,GAAnC;;AACA,aAAK,IAAM,MAAX,IAAqB,KAAI,CAAC,OAAL,CAAa,OAAlC,EAA2C;AACzC,cAAI,KAAI,CAAC,OAAL,CAAa,OAAb,CAAqB,cAArB,CAAoC,MAApC,CAAJ,EAAiD;AAC/C,YAAA,OAAO,CAAC,gBAAR,CAAyB,MAAzB,EAAiC,KAAI,CAAC,OAAL,CAAa,OAAb,CAAqB,MAArB,CAAjC;AACD;AACF;;AACD,QAAA,OAAO,CAAC,IAAR,CAAa,aAAa,CAAC,IAA3B;AACD,OApBD,CAAA;AAoBE,KAtBC,CAAP;AAwBD,GApCO;;AAqCV,SAAA,YAAA;AAAC,CAxDD,CAAkC,aAAlC,CAAA","sourcesContent":["import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Response, SentryRequest, Session } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer.add(\n      () =>\n        new SyncPromise<Response>((resolve, reject) => {\n          const request = new XMLHttpRequest();\n\n          request.onreadystatechange = (): void => {\n            if (request.readyState === 4) {\n              const headers = {\n                'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n                'retry-after': request.getResponseHeader('Retry-After'),\n              };\n              this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject });\n            }\n          };\n\n          request.open('POST', sentryRequest.url);\n          for (const header in this.options.headers) {\n            if (this.options.headers.hasOwnProperty(header)) {\n              request.setRequestHeader(header, this.options.headers[header]);\n            }\n          }\n          request.send(sentryRequest.body);\n        }),\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}