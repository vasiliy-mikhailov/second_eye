{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as PropTypes from 'prop-types';\nimport { useQuery } from \"../hooks/index.js\";\nexport function Query(props) {\n  var children = props.children,\n      query = props.query,\n      options = __rest(props, [\"children\", \"query\"]);\n\n  var result = useQuery(query, options);\n  return result ? children(result) : null;\n}\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool\n};","map":{"version":3,"sources":["../../../src/react/components/Query.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAIA,SAAS,QAAT,QAAyB,mBAAzB;AAEA,OAAM,SAAU,KAAV,CACJ,KADI,EAC2C;AAEvC,MAAA,QAAQ,GAAwB,KAAK,CAA7B,QAAR;AAAA,MAAU,KAAK,GAAiB,KAAK,CAAtB,KAAf;AAAA,MAAoB,OAAO,GAAA,MAAA,CAAK,KAAL,EAA7B,CAAA,UAAA,EAAA,OAAA,CAA6B,CAA3B;;AACR,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAD,EAAQ,OAAR,CAAvB;AACA,SAAO,MAAM,GAAG,QAAQ,CAAC,MAAD,CAAX,GAAsB,IAAnC;AACD;AAMD,KAAK,CAAC,SAAN,GAAkB;AAChB,EAAA,MAAM,EAAE,SAAS,CAAC,MADF;AAEhB,EAAA,QAAQ,EAAE,SAAS,CAAC,IAAV,CAAe,UAFT;AAGhB,EAAA,WAAW,EAAE,SAAS,CAAC,MAHP;AAIhB,EAAA,2BAA2B,EAAE,SAAS,CAAC,IAJvB;AAKhB,EAAA,WAAW,EAAE,SAAS,CAAC,IALP;AAMhB,EAAA,OAAO,EAAE,SAAS,CAAC,IANH;AAOhB,EAAA,YAAY,EAAE,SAAS,CAAC,MAPR;AAQhB,EAAA,KAAK,EAAE,SAAS,CAAC,MAAV,CAAiB,UARR;AAShB,EAAA,SAAS,EAAE,SAAS,CAAC,MATL;AAUhB,EAAA,GAAG,EAAE,SAAS,CAAC,IAVC;AAWhB,EAAA,cAAc,EAAE,SAAS,CAAC,IAXV;AAYhB,EAAA,iBAAiB,EAAE,SAAS,CAAC;AAZb,CAAlB","sourcesContent":["import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { QueryComponentOptions } from './types';\nimport { useQuery } from '../hooks';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return result ? children(result) : null;\n}\n\nexport interface Query<TData, TVariables> {\n  propTypes: PropTypes.InferProps<QueryComponentOptions<TData, TVariables>>;\n}\n\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool\n} as Query<any, any>[\"propTypes\"];\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}