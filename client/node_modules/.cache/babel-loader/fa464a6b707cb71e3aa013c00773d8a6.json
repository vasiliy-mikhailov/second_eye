{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikhaylovv\\\\PycharmProjects\\\\second_eye\\\\client\\\\src\\\\components\\\\PlanningPeriodDetail.js\";\nimport React, { Component } from \"react\";\nimport { gql } from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport { Box, Link } from \"@material-ui/core\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { CartesianGrid, Legend, ReferenceLine, Scatter, ScatterChart, XAxis, YAxis, ZAxis } from \"recharts\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchPlanningPeriodById = gql`\n    query PlanningPeriodByIdQuery($id: String!) {\n        planningPeriodById(id: $id) {\n            id \n            name\n            start\n            end\n            estimate\n            \n            dedicatedTeams {\n                id\n                name\n            }\n            \n            timeSpentPercentWithValueAndWithoutValueByDate {\n                date\n                timeSpentWithoutValuePercentCumsum\n                timeSpentWithValuePercentCumsum\n            }\n    \n            timeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            changeRequests {\n                id\n                estimate\n                timeLeft\n                hasValue\n                name\n            }\n        }\n    }\n`;\n\nclass PlanningPeriodDetail extends Component {\n  render() {\n    if (this.props.data.loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 47\n      }, this);\n    }\n\n    const planningPeriodId = this.props.match.params.id;\n    const planningPeriod = this.props.data.planningPeriodById;\n    const estimate = planningPeriod.estimate;\n    const planningPeriodName = planningPeriod.name;\n    const planningPeriodStart = planningPeriod.start;\n    const planningPeriodEnd = planningPeriod.end;\n    const dedicatedTeams = planningPeriod.dedicatedTeams;\n    const changeRequests = planningPeriod.changeRequests;\n    const timeSheetsByDate = planningPeriod.timeSheetsByDate;\n    const timeSpentPercentWithValueAndWithoutValueByDate = planningPeriod.timeSpentPercentWithValueAndWithoutValueByDate;\n    const today = new Date().getTime();\n    const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null;\n    const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null;\n    const allEdgeDates = [today, planningPeriodStart, planningPeriodEnd];\n\n    if (firstTimeSheetDate) {\n      allEdgeDates.push(firstTimeSheetDate);\n    }\n\n    if (lastTimeSheetDate) {\n      allEdgeDates.push(lastTimeSheetDate);\n    }\n\n    const xAxisStart = Math.max(Math.min(...allEdgeDates), new Date().getTime());\n    const xAxisEnd = Math.max(...allEdgeDates);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentCumsum\",\n          tickFormatter: tick => {\n            return tick.toLocaleString();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodStart).getTime(),\n          stroke: \"green\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041D\\u0430\\u0447\\u0430\\u043B\\u043E \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodEnd).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: estimate,\n          stroke: \"black\",\n          strokeDasharray: \"5 5\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0421\\u043F\\u0438\\u0441\\u0430\\u043D\\u043E \\u0432\\u0441\\u0435\\u0433\\u043E\",\n          data: timeSheetsByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentCumsum: item.timeSpentCumsum\n            };\n          }),\n          line: true,\n          fill: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentWithoutValuePercentCumsum\",\n          tickFormatter: tick => {\n            return `${tick * 100}%`;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodStart).getTime(),\n          stroke: \"green\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041D\\u0430\\u0447\\u0430\\u043B\\u043E \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodEnd).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: 1,\n          stroke: \"black\",\n          strokeDasharray: \"5 5\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0414\\u043E\\u043B\\u044F \\u0441\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0439 \\u043D\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0431\\u0435\\u0437 \\u0446\\u0435\\u043D\\u043D\\u043E\\u0441\\u0442\\u0438\",\n          data: timeSpentPercentWithValueAndWithoutValueByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentWithoutValuePercentCumsum: item.timeSpentWithoutValuePercentCumsum\n            };\n          }),\n          line: true,\n          fill: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        noWrap: true,\n        children: \"\\u0412\\u044B\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u044B\\u0435 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dedicatedTeams.slice().sort(function (a, b) {\n          if (a.name > b.name) {\n            return 1;\n          }\n\n          if (a.name === b.name) {\n            return 0;\n          }\n\n          if (a.name < b.name) {\n            return -1;\n          }\n        }).map(dedicatedTeam => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(RouterLink, {\n            to: `/planningPeriods/${planningPeriodId}/dedicatedTeams/${dedicatedTeam.id}`,\n            children: dedicatedTeam.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 33\n          }, this)\n        }, dedicatedTeam.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default graphql(fetchPlanningPeriodById, {\n  options: props => {\n    return {\n      variables: {\n        id: props.match.params.id\n      }\n    };\n  }\n})(PlanningPeriodDetail);","map":{"version":3,"sources":["C:/Users/mikhaylovv/PycharmProjects/second_eye/client/src/components/PlanningPeriodDetail.js"],"names":["React","Component","gql","graphql","Typography","Box","Link","RouterLink","CartesianGrid","Legend","ReferenceLine","Scatter","ScatterChart","XAxis","YAxis","ZAxis","moment","fetchPlanningPeriodById","PlanningPeriodDetail","render","props","data","loading","planningPeriodId","match","params","id","planningPeriod","planningPeriodById","estimate","planningPeriodName","name","planningPeriodStart","start","planningPeriodEnd","end","dedicatedTeams","changeRequests","timeSheetsByDate","timeSpentPercentWithValueAndWithoutValueByDate","today","Date","getTime","firstTimeSheetDate","length","date","lastTimeSheetDate","allEdgeDates","push","xAxisStart","Math","max","min","xAxisEnd","left","format","tick","toLocaleString","map","item","timeSpentCumsum","timeSpentWithoutValuePercentCumsum","slice","sort","a","b","dedicatedTeam","options","variables"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {CartesianGrid, Legend, ReferenceLine, Scatter, ScatterChart, XAxis, YAxis, ZAxis} from \"recharts\";\r\nimport moment from \"moment\";\r\n\r\nconst fetchPlanningPeriodById = gql`\r\n    query PlanningPeriodByIdQuery($id: String!) {\r\n        planningPeriodById(id: $id) {\r\n            id \r\n            name\r\n            start\r\n            end\r\n            estimate\r\n            \r\n            dedicatedTeams {\r\n                id\r\n                name\r\n            }\r\n            \r\n            timeSpentPercentWithValueAndWithoutValueByDate {\r\n                date\r\n                timeSpentWithoutValuePercentCumsum\r\n                timeSpentWithValuePercentCumsum\r\n            }\r\n    \r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            changeRequests {\r\n                id\r\n                estimate\r\n                timeLeft\r\n                hasValue\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass PlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriodId = this.props.match.params.id\r\n        const planningPeriod = this.props.data.planningPeriodById\r\n        const estimate = planningPeriod.estimate\r\n        const planningPeriodName = planningPeriod.name\r\n        const planningPeriodStart = planningPeriod.start\r\n        const planningPeriodEnd = planningPeriod.end\r\n\r\n        const dedicatedTeams = planningPeriod.dedicatedTeams\r\n        const changeRequests = planningPeriod.changeRequests\r\n\r\n        const timeSheetsByDate = planningPeriod.timeSheetsByDate\r\n        const timeSpentPercentWithValueAndWithoutValueByDate = planningPeriod.timeSpentPercentWithValueAndWithoutValueByDate\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today, planningPeriodStart, planningPeriodEnd]\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        const xAxisStart = Math.max(Math.min(...allEdgeDates), new Date().getTime())\r\n\r\n        const xAxisEnd = Math.max(...allEdgeDates)\r\n\r\n        return (\r\n            <Box>\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis\r\n                        type=\"number\"\r\n                        dataKey=\"timeSpentCumsum\"\r\n                        tickFormatter={ tick => {\r\n                            return tick.toLocaleString();\r\n                        }}\r\n                    />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodStart).getTime() } stroke=\"green\" strokeDasharray=\"5 5\" label=\"Начало периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodEnd).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Окончание периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={ estimate } stroke=\"black\" strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано всего\"\r\n                        data= {\r\n                            timeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"black\"\r\n                    />\r\n                </ScatterChart>\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis\r\n                        type=\"number\"\r\n                        dataKey=\"timeSpentWithoutValuePercentCumsum\"\r\n                        tickFormatter={(tick) => {\r\n                            return `${ tick * 100 }%`;\r\n                        }}\r\n                    />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodStart).getTime() } stroke=\"green\" strokeDasharray=\"5 5\" label=\"Начало периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodEnd).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Окончание периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={ 1 } stroke=\"black\" strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Доля списаний на задачи без ценности\"\r\n                        data= {\r\n                            timeSpentPercentWithValueAndWithoutValueByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentWithoutValuePercentCumsum: item.timeSpentWithoutValuePercentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"black\"\r\n                    />\r\n                </ScatterChart>\r\n\r\n                <Typography variant=\"h3\" noWrap>\r\n                    Выделенные команды\r\n                </Typography>\r\n\r\n               <ul>\r\n                    { dedicatedTeams\r\n                        .slice()\r\n                        .sort(function(a, b) {\r\n                            if (a.name > b.name) {\r\n                                return 1;\r\n                            }\r\n                            if (a.name === b.name) {\r\n                                return 0;\r\n                            }\r\n                            if (a.name < b.name) {\r\n                                return -1;\r\n                            }\r\n                        })\r\n                        .map(dedicatedTeam => (\r\n                            <li key={ dedicatedTeam.id }>\r\n                                <RouterLink to={ `/planningPeriods/${planningPeriodId}/dedicatedTeams/${dedicatedTeam.id}` }>\r\n                                { dedicatedTeam.name }\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                </ul>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchPlanningPeriodById, {\r\n    options: (props) => { return { variables: { id: props.match.params.id }}}\r\n})(PlanningPeriodDetail);"]},"metadata":{},"sourceType":"module"}