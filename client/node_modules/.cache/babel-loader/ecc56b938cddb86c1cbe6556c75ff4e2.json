{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikhaylovv\\\\PycharmProjects\\\\second_eye\\\\client\\\\src\\\\components\\\\ProjectTeamPlanningPeriodDetail.js\";\nimport React, { Component } from \"react\";\nimport { gql } from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport { Box, Link } from \"@material-ui/core\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { CartesianGrid, Legend, ReferenceLine, Scatter, ScatterChart, XAxis, YAxis, ZAxis } from \"recharts\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId = gql`\n    query ProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId($planningPeriodId: String!, $projectTeamId: String!) {\n          projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId(projectTeamId: $projectTeamId, planningPeriodId: $planningPeriodId) {\n                id\n                estimate\n                projectTeam {\n                    name\n                }\n                planningPeriod {\n                    name\n                    start\n                    end\n                }\n                timeSpentPercentWithValueAndWithoutValueByDate {\n                    date\n                    timeSpentWithoutValuePercentCumsum\n                    timeSpentWithValuePercentCumsum\n                }\n                timeSheetsByDate {\n                    date\n                    timeSpentCumsum\n                }\n                \n                changeRequests {\n                    id\n                    estimate\n                    timeLeft\n                    hasValue\n                    name\n                    stateCategory {\n                        id\n                    }\n                }\n          }\n    }\n`;\n\nclass ProjectTeamPlanningPeriodDetail extends Component {\n  render() {\n    if (this.props.data.loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 47\n      }, this);\n    }\n\n    const planningPeriodId = this.props.match.params.planningPeriodId;\n    const projectTeamPlanningPeriod = this.props.data.projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId;\n    console.log(projectTeamPlanningPeriod);\n    const projectTeamName = projectTeamPlanningPeriod.projectTeam.name;\n    const estimate = projectTeamPlanningPeriod.estimate;\n    const planningPeriodName = projectTeamPlanningPeriod.planningPeriod.name;\n    const planningPeriodStart = projectTeamPlanningPeriod.planningPeriod.start;\n    const planningPeriodEnd = projectTeamPlanningPeriod.planningPeriod.end;\n    const projectTeams = projectTeamPlanningPeriod.projectTeams;\n    const changeRequests = projectTeamPlanningPeriod.changeRequests;\n    const timeSheetsByDate = projectTeamPlanningPeriod.timeSheetsByDate;\n    const timeSpentPercentWithValueAndWithoutValueByDate = projectTeamPlanningPeriod.timeSpentPercentWithValueAndWithoutValueByDate;\n    const today = new Date().getTime();\n    const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null;\n    const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null;\n    const allEdgeDates = [today, planningPeriodStart, planningPeriodEnd];\n\n    if (firstTimeSheetDate) {\n      allEdgeDates.push(firstTimeSheetDate);\n    }\n\n    if (lastTimeSheetDate) {\n      allEdgeDates.push(lastTimeSheetDate);\n    }\n\n    const xAxisStart = Math.min(...allEdgeDates);\n    const xAxisEnd = Math.max(...allEdgeDates);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body\",\n        noWrap: true,\n        children: [\"\\u0412\\u044B\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u0430\\u044F \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0430 \", projectTeamName, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), \"\\u041F\\u0435\\u0440\\u0438\\u043E\\u0434 \\u043F\\u043B\\u0430\\u043D\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \", planningPeriodName, \" (\", planningPeriodStart, \"-\", planningPeriodEnd, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentCumsum\",\n          tickFormatter: tick => {\n            return tick.toLocaleString();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodStart).getTime(),\n          stroke: \"green\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041D\\u0430\\u0447\\u0430\\u043B\\u043E \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodEnd).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: estimate,\n          stroke: \"black\",\n          strokeDasharray: \"5 5\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0421\\u043F\\u0438\\u0441\\u0430\\u043D\\u043E \\u0432\\u0441\\u0435\\u0433\\u043E\",\n          data: timeSheetsByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentCumsum: item.timeSpentCumsum\n            };\n          }),\n          line: true,\n          fill: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentWithoutValuePercentCumsum\",\n          tickFormatter: tick => {\n            return `${tick * 100}%`;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodStart).getTime(),\n          stroke: \"green\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041D\\u0430\\u0447\\u0430\\u043B\\u043E \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(planningPeriodEnd).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434\\u0430\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: 1,\n          stroke: \"black\",\n          strokeDasharray: \"5 5\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0414\\u043E\\u043B\\u044F \\u0441\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0439 \\u043D\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0431\\u0435\\u0437 \\u0446\\u0435\\u043D\\u043D\\u043E\\u0441\\u0442\\u0438\",\n          data: timeSpentPercentWithValueAndWithoutValueByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentWithoutValuePercentCumsum: item.timeSpentWithoutValuePercentCumsum\n            };\n          }),\n          line: true,\n          fill: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body\",\n        noWrap: true,\n        children: \"\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043D\\u044B\\u0435 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: projectTeams.slice().sort(function (a, b) {\n          if (a.name > b.named) {\n            return 1;\n          }\n\n          if (a.name == b.name) {\n            return 0;\n          }\n\n          if (a.name < b.name) {\n            return -1;\n          }\n        }).map(projectTeam => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(RouterLink, {\n            to: `/planningPeriods/${planningPeriodId}/projectTeams/${projectTeam.id}`,\n            children: projectTeam.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 33\n          }, this)\n        }, projectTeam.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body\",\n        noWrap: true,\n        children: \"\\u0417\\u0430\\u044F\\u0432\\u043A\\u0438 \\u043D\\u0430 \\u0434\\u043E\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: changeRequests.slice().sort(function (a, b) {\n          if (a.stateCategory.id === 3 && b.stateCategory.id !== 3) {\n            return 1;\n          }\n\n          if (a.stateCategory.id === 3 && b.stateCategory.id === 3) {\n            return 0;\n          }\n\n          if (a.stateCategory.id !== 3 && b.stateCategory.id === 3) {\n            return -1;\n          }\n\n          return b.timeLeft - a.timeLeft;\n        }).map(changeRequest => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [changeRequest.stateCategory.id !== 3 ? `Осталось ${changeRequest.timeLeft} ч ` : '', changeRequest.estimate === 0 && changeRequest.stateCategory.id !== 3 ? `Оценка ${changeRequest.estimate} ч ` : '', changeRequest.hasValue ? '' : 'Нет ценности ', /*#__PURE__*/_jsxDEV(RouterLink, {\n            style: {\n              textDecoration: changeRequest.stateCategory.id === 3 ? 'line-through' : 'none'\n            },\n            to: `/changeRequests/${changeRequest.id}`,\n            children: changeRequest.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 33\n          }, this)]\n        }, changeRequest.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default graphql(fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId, {\n  options: props => {\n    return {\n      variables: {\n        planningPeriodId: props.match.params.planningPeriodId,\n        projectTeamId: props.match.params.projectTeamId\n      }\n    };\n  }\n})(ProjectTeamPlanningPeriodDetail);","map":{"version":3,"sources":["C:/Users/mikhaylovv/PycharmProjects/second_eye/client/src/components/ProjectTeamPlanningPeriodDetail.js"],"names":["React","Component","gql","graphql","Typography","Box","Link","RouterLink","CartesianGrid","Legend","ReferenceLine","Scatter","ScatterChart","XAxis","YAxis","ZAxis","moment","fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId","ProjectTeamPlanningPeriodDetail","render","props","data","loading","planningPeriodId","match","params","projectTeamPlanningPeriod","projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId","console","log","projectTeamName","projectTeam","name","estimate","planningPeriodName","planningPeriod","planningPeriodStart","start","planningPeriodEnd","end","projectTeams","changeRequests","timeSheetsByDate","timeSpentPercentWithValueAndWithoutValueByDate","today","Date","getTime","firstTimeSheetDate","length","date","lastTimeSheetDate","allEdgeDates","push","xAxisStart","Math","min","xAxisEnd","max","left","format","tick","toLocaleString","map","item","timeSpentCumsum","timeSpentWithoutValuePercentCumsum","slice","sort","a","b","named","id","stateCategory","timeLeft","changeRequest","hasValue","textDecoration","options","variables","projectTeamId"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {CartesianGrid, Legend, ReferenceLine, Scatter, ScatterChart, XAxis, YAxis, ZAxis} from \"recharts\";\r\nimport moment from \"moment\";\r\n\r\nconst fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId = gql`\r\n    query ProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId($planningPeriodId: String!, $projectTeamId: String!) {\r\n          projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId(projectTeamId: $projectTeamId, planningPeriodId: $planningPeriodId) {\r\n                id\r\n                estimate\r\n                projectTeam {\r\n                    name\r\n                }\r\n                planningPeriod {\r\n                    name\r\n                    start\r\n                    end\r\n                }\r\n                timeSpentPercentWithValueAndWithoutValueByDate {\r\n                    date\r\n                    timeSpentWithoutValuePercentCumsum\r\n                    timeSpentWithValuePercentCumsum\r\n                }\r\n                timeSheetsByDate {\r\n                    date\r\n                    timeSpentCumsum\r\n                }\r\n                \r\n                changeRequests {\r\n                    id\r\n                    estimate\r\n                    timeLeft\r\n                    hasValue\r\n                    name\r\n                    stateCategory {\r\n                        id\r\n                    }\r\n                }\r\n          }\r\n    }\r\n`;\r\n\r\nclass ProjectTeamPlanningPeriodDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const planningPeriodId = this.props.match.params.planningPeriodId\r\n\r\n        const projectTeamPlanningPeriod = this.props.data.projectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId\r\n        console.log(projectTeamPlanningPeriod)\r\n        const projectTeamName = projectTeamPlanningPeriod.projectTeam.name\r\n        const estimate = projectTeamPlanningPeriod.estimate\r\n        const planningPeriodName = projectTeamPlanningPeriod.planningPeriod.name\r\n        const planningPeriodStart = projectTeamPlanningPeriod.planningPeriod.start\r\n        const planningPeriodEnd = projectTeamPlanningPeriod.planningPeriod.end\r\n        const projectTeams = projectTeamPlanningPeriod.projectTeams\r\n        const changeRequests = projectTeamPlanningPeriod.changeRequests\r\n\r\n        const timeSheetsByDate = projectTeamPlanningPeriod.timeSheetsByDate\r\n        const timeSpentPercentWithValueAndWithoutValueByDate = projectTeamPlanningPeriod.timeSpentPercentWithValueAndWithoutValueByDate\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today, planningPeriodStart, planningPeriodEnd]\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates)\r\n        const xAxisEnd = Math.max(...allEdgeDates)\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body\" noWrap>\r\n                    Выделенная команда { projectTeamName }\r\n                    <br />\r\n                    Период планирования { planningPeriodName } ({ planningPeriodStart }-{ planningPeriodEnd })\r\n                </Typography>\r\n\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis\r\n                        type=\"number\"\r\n                        dataKey=\"timeSpentCumsum\"\r\n                        tickFormatter={ tick => {\r\n                            return tick.toLocaleString();\r\n                        }}\r\n                    />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodStart).getTime() } stroke=\"green\" strokeDasharray=\"5 5\" label=\"Начало периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodEnd).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Окончание периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={ estimate } stroke=\"black\" strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано всего\"\r\n                        data= {\r\n                            timeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"black\"\r\n                    />\r\n                </ScatterChart>\r\n                                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis\r\n                        type=\"number\"\r\n                        dataKey=\"timeSpentWithoutValuePercentCumsum\"\r\n                        tickFormatter={(tick) => {\r\n                            return `${ tick * 100 }%`;\r\n                        }}\r\n                    />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodStart).getTime() } stroke=\"green\" strokeDasharray=\"5 5\" label=\"Начало периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ new Date(planningPeriodEnd).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Окончание периода\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={ 1 } stroke=\"black\" strokeDasharray=\"5 5\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Доля списаний на задачи без ценности\"\r\n                        data= {\r\n                            timeSpentPercentWithValueAndWithoutValueByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentWithoutValuePercentCumsum: item.timeSpentWithoutValuePercentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"black\"\r\n                    />\r\n                </ScatterChart>\r\n\r\n                <Typography variant=\"body\" noWrap>\r\n                    Проектные команды\r\n                </Typography>\r\n               <ul>\r\n                    { projectTeams\r\n                        .slice()\r\n.                       sort(function(a, b) {\r\n                            if (a.name > b.named) {\r\n                                return 1;\r\n                            }\r\n                            if (a.name == b.name) {\r\n                                return 0;\r\n                            }\r\n                            if (a.name < b.name) {\r\n                                return -1;\r\n                            }\r\n                        })\r\n                        .map(projectTeam => (\r\n                            <li key={ projectTeam.id }>\r\n                                <RouterLink to={ `/planningPeriods/${ planningPeriodId }/projectTeams/${ projectTeam.id }` }>\r\n                                { projectTeam.name }\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                </ul>\r\n\r\n                <Typography variant=\"body\" noWrap>\r\n                    Заявки на доработку\r\n                </Typography>\r\n                <ul>\r\n                    { changeRequests\r\n                        .slice()\r\n.                       sort(function(a, b) {\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id !== 3) {\r\n                                return 1;\r\n                            }\r\n                            if (a.stateCategory.id === 3 && b.stateCategory.id === 3) {\r\n                                return 0;\r\n                            }\r\n                            if (a.stateCategory.id !== 3 && b.stateCategory.id === 3) {\r\n                                return -1;\r\n                            }\r\n\r\n                            return b.timeLeft - a.timeLeft\r\n                        })\r\n                        .map(changeRequest => (\r\n                            <li key={ changeRequest.id }>\r\n                                { changeRequest.stateCategory.id !== 3 ? `Осталось ${ changeRequest.timeLeft } ч ` : '' }\r\n                                { changeRequest.estimate === 0 && changeRequest.stateCategory.id !== 3 ? `Оценка ${ changeRequest.estimate } ч ` : '' }\r\n                                { changeRequest.hasValue ? '' : 'Нет ценности ' }\r\n\r\n                                <RouterLink style={{ textDecoration: changeRequest.stateCategory.id === 3 ? 'line-through' : 'none' }} to={ `/changeRequests/${changeRequest.id}` }>\r\n                                { changeRequest.name }\r\n                                </RouterLink>\r\n                            </li>\r\n                        )\r\n                    )}\r\n                 </ul>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchProjectTeamPlanningPeriodByPlanningPeriodIdAndProjectTeamId, {\r\n    options: (props) => { return { variables: { planningPeriodId: props.match.params.planningPeriodId, projectTeamId: props.match.params.projectTeamId }}}\r\n})(ProjectTeamPlanningPeriodDetail);"]},"metadata":{},"sourceType":"module"}