{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikhaylovv\\\\PycharmProjects\\\\second_eye\\\\client\\\\src\\\\components\\\\CapacityAndQueue.js\";\nimport React, { Component } from \"react\";\nimport { gql } from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport Typography from '@material-ui/core/Typography';\nimport { Box } from \"@material-ui/core\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchCapacityAndQueue = gql`\n    query capacityAndQueue {\n        companies {\n            id\n            name\n            actualChangeRequestCapacity\n            actualAnalysisCapacity\n            actualDevelopmentCapacity\n            actualTestingCapacity\n            \n            timeLeft\n            analysisTimeLeft\n            developmentTimeLeft\n            testingTimeLeft\n            \n            queueLength\n            analysisQueueLength\n            developmentQueueLength\n            testingQueueLength\n        }\n        \n        dedicatedTeams {\n            id\n            name\n            actualChangeRequestCapacity\n            actualAnalysisCapacity\n            actualDevelopmentCapacity\n            actualTestingCapacity\n            \n            timeLeft\n            analysisTimeLeft\n            developmentTimeLeft\n            testingTimeLeft\n            \n            queueLength\n            analysisQueueLength\n            developmentQueueLength\n            testingQueueLength\n        }\n        \n        projectTeams {\n            id\n            name\n            actualChangeRequestCapacity\n            actualAnalysisCapacity\n            actualDevelopmentCapacity\n            actualTestingCapacity\n            \n            timeLeft\n            analysisTimeLeft\n            developmentTimeLeft\n            testingTimeLeft\n            \n            queueLength\n            analysisQueueLength\n            developmentQueueLength\n            testingQueueLength\n        }\n    }\n`;\n\nclass CapacityAndQueue extends Component {\n  render() {\n    if (this.props.data.loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 47\n      }, this);\n    }\n\n    const companies = this.props.data.companies;\n    const dedicatedTeams = this.props.data.dedicatedTeams;\n    const projectTeams = this.props.data.projectTeams;\n    const companiesQueue = companies.slice().map(company => {\n      return {\n        name: company.name,\n        queueLength: company.queueLength,\n        analysisQueueLength: company.analysisQueueLength,\n        developmentQueueLength: company.developmentQueueLength,\n        testingQueueLength: company.testingQueueLength\n      };\n    });\n    const dedicatedTeamsQueue = dedicatedTeams.slice().map(dedicatedTeam => {\n      return {\n        name: dedicatedTeam.name,\n        queueLength: dedicatedTeam.queueLength,\n        analysisQueueLength: dedicatedTeam.analysisQueueLength,\n        developmentQueueLength: dedicatedTeam.developmentQueueLength,\n        testingQueueLength: dedicatedTeam.testingQueueLength\n      };\n    });\n    const projectTeamsQueue = projectTeams.slice().map(projectTeam => {\n      return {\n        name: projectTeam.name,\n        queueLength: projectTeam.queueLength,\n        analysisQueueLength: projectTeam.analysisQueueLength,\n        developmentQueueLength: projectTeam.developmentQueueLength,\n        testingQueueLength: projectTeam.testingQueueLength\n      };\n    });\n    const queues = companiesQueue.concat(dedicatedTeamsQueue).concat(projectTeamsQueue).sort(function (a, b) {\n      return Math.max(b.queueLength, b.analysisQueueLength, b.developmentQueueLength, b.testingQueueLength) - Math.max(a.queueLength, a.analysisQueueLength, a.developmentQueueLength, a.testingQueueLength);\n    }).slice(0, 20);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"\\u041E\\u0447\\u0435\\u0440\\u0435\\u0434\\u044C (\\u043C\\u0435\\u0441\\u044F\\u0446\\u044B)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        width: 1920,\n        height: 300,\n        data: queues,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"queueLength\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"analysisQueueLength\",\n          fill: \"red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"developmentQueueLength\",\n          fill: \"green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"testingQueueLength\",\n          fill: \"blue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default graphql(fetchCapacityAndQueue)(CapacityAndQueue);","map":{"version":3,"sources":["C:/Users/mikhaylovv/PycharmProjects/second_eye/client/src/components/CapacityAndQueue.js"],"names":["React","Component","gql","graphql","Typography","Box","Link","RouterLink","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","fetchCapacityAndQueue","CapacityAndQueue","render","props","data","loading","companies","dedicatedTeams","projectTeams","companiesQueue","slice","map","company","name","queueLength","analysisQueueLength","developmentQueueLength","testingQueueLength","dedicatedTeamsQueue","dedicatedTeam","projectTeamsQueue","projectTeam","queues","concat","sort","a","b","Math","max","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nconst fetchCapacityAndQueue = gql`\r\n    query capacityAndQueue {\r\n        companies {\r\n            id\r\n            name\r\n            actualChangeRequestCapacity\r\n            actualAnalysisCapacity\r\n            actualDevelopmentCapacity\r\n            actualTestingCapacity\r\n            \r\n            timeLeft\r\n            analysisTimeLeft\r\n            developmentTimeLeft\r\n            testingTimeLeft\r\n            \r\n            queueLength\r\n            analysisQueueLength\r\n            developmentQueueLength\r\n            testingQueueLength\r\n        }\r\n        \r\n        dedicatedTeams {\r\n            id\r\n            name\r\n            actualChangeRequestCapacity\r\n            actualAnalysisCapacity\r\n            actualDevelopmentCapacity\r\n            actualTestingCapacity\r\n            \r\n            timeLeft\r\n            analysisTimeLeft\r\n            developmentTimeLeft\r\n            testingTimeLeft\r\n            \r\n            queueLength\r\n            analysisQueueLength\r\n            developmentQueueLength\r\n            testingQueueLength\r\n        }\r\n        \r\n        projectTeams {\r\n            id\r\n            name\r\n            actualChangeRequestCapacity\r\n            actualAnalysisCapacity\r\n            actualDevelopmentCapacity\r\n            actualTestingCapacity\r\n            \r\n            timeLeft\r\n            analysisTimeLeft\r\n            developmentTimeLeft\r\n            testingTimeLeft\r\n            \r\n            queueLength\r\n            analysisQueueLength\r\n            developmentQueueLength\r\n            testingQueueLength\r\n        }\r\n    }\r\n`;\r\n\r\nclass CapacityAndQueue extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const companies = this.props.data.companies\r\n        const dedicatedTeams = this.props.data.dedicatedTeams\r\n        const projectTeams = this.props.data.projectTeams\r\n\r\n        const companiesQueue = companies.slice().map(\r\n            company => {\r\n                return {\r\n                    name: company.name,\r\n                    queueLength: company.queueLength,\r\n                    analysisQueueLength: company.analysisQueueLength,\r\n                    developmentQueueLength: company.developmentQueueLength,\r\n                    testingQueueLength: company.testingQueueLength\r\n                }\r\n            }\r\n        )\r\n\r\n        const dedicatedTeamsQueue = dedicatedTeams.slice().map(\r\n            dedicatedTeam => {\r\n                return {\r\n                    name: dedicatedTeam.name,\r\n                    queueLength: dedicatedTeam.queueLength,\r\n                    analysisQueueLength: dedicatedTeam.analysisQueueLength,\r\n                    developmentQueueLength: dedicatedTeam.developmentQueueLength,\r\n                    testingQueueLength: dedicatedTeam.testingQueueLength\r\n                }\r\n            }\r\n        )\r\n\r\n        const projectTeamsQueue = projectTeams.slice().map(\r\n            projectTeam => {\r\n                return {\r\n                    name: projectTeam.name,\r\n                    queueLength: projectTeam.queueLength,\r\n                    analysisQueueLength: projectTeam.analysisQueueLength,\r\n                    developmentQueueLength: projectTeam.developmentQueueLength,\r\n                    testingQueueLength: projectTeam.testingQueueLength\r\n                }\r\n            }\r\n        )\r\n\r\n        const queues = companiesQueue.concat(dedicatedTeamsQueue).concat(projectTeamsQueue).sort(\r\n            function(a, b) {\r\n                return Math.max(\r\n                    b.queueLength,\r\n                    b.analysisQueueLength,\r\n                    b.developmentQueueLength,\r\n                    b.testingQueueLength\r\n                ) - Math.max(\r\n                    a.queueLength,\r\n                    a.analysisQueueLength,\r\n                    a.developmentQueueLength,\r\n                    a.testingQueueLength\r\n                )\r\n            }\r\n        ).slice(0, 20)\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body1\">\r\n                    Очередь (месяцы)\r\n                </Typography>\r\n                <BarChart\r\n                    width={1920}\r\n                    height={300}\r\n                    data={queues}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 20,\r\n                        bottom: 5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Bar dataKey=\"queueLength\" fill=\"#8884d8\" />\r\n                    <Bar dataKey=\"analysisQueueLength\" fill=\"red\" />\r\n                    <Bar dataKey=\"developmentQueueLength\" fill=\"green\" />\r\n                    <Bar dataKey=\"testingQueueLength\" fill=\"blue\" />\r\n                </BarChart>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchCapacityAndQueue)(CapacityAndQueue);"]},"metadata":{},"sourceType":"module"}