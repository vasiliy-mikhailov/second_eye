{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikhaylovv\\\\PycharmProjects\\\\second_eye\\\\client\\\\src\\\\components\\\\SystemChangeRequestDetail.js\";\nimport React, { Component } from \"react\";\nimport { ScatterChart, CartesianGrid, Legend, XAxis, YAxis, ReferenceLine, ZAxis, Scatter } from \"recharts\";\nimport { gql } from '@apollo/client';\nimport { graphql } from '@apollo/client/react/hoc';\nimport moment from 'moment';\nimport Typography from '@material-ui/core/Typography';\nimport { Box, Link } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchSystemChangeRequest = gql`\n    query SystemChangeRequestByIdQuery($id: String!) {\n        systemChangeRequestById(id: $id) {\n            id \n            url\n            name\n            state {\n                name\n            }\n            \n            analysisEstimate\n            analysisTimeSpent\n            analysisTimeLeft\n            analysisTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            developmentEstimate\n            developmentTimeSpent\n            developmentTimeLeft\n            developmentTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            testingEstimate\n            testingTimeSpent\n            testingTimeLeft\n            testingTimeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            estimate\n            timeSpent\n            timeLeft\n            timeSheetsByDate {\n                date\n                timeSpentCumsum\n            }\n            \n            changeRequest {\n                plannedInstallDate\n            }\n        }\n    }\n`;\n\nclass SystemChangeRequestDetail extends Component {\n  render() {\n    if (this.props.data.loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 47\n      }, this);\n    }\n\n    const plannedInstallDate = this.props.data.systemChangeRequestById.changeRequest.plannedInstallDate ? new Date(this.props.data.systemChangeRequestById.changeRequest.plannedInstallDate).getTime() : null;\n    const timeSheetsByDate = this.props.data.systemChangeRequestById.timeSheetsByDate;\n    const today = new Date().getTime();\n    const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null;\n    const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null;\n    const allEdgeDates = [today];\n\n    if (plannedInstallDate) {\n      allEdgeDates.push(plannedInstallDate);\n    }\n\n    if (firstTimeSheetDate) {\n      allEdgeDates.push(firstTimeSheetDate);\n    }\n\n    if (lastTimeSheetDate) {\n      allEdgeDates.push(lastTimeSheetDate);\n    }\n\n    const xAxisStart = Math.min(...allEdgeDates);\n    const xAxisEnd = Math.max(...allEdgeDates);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        noWrap: true,\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          href: this.props.location.pathname,\n          children: this.props.data.systemChangeRequestById.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), \" \\xA0\", this.props.data.systemChangeRequestById.name, \" \\xA0\", this.props.data.systemChangeRequestById.state.name, \" \\xA0\", /*#__PURE__*/_jsxDEV(Link, {\n          href: this.props.data.systemChangeRequestById.url,\n          children: \"[ \\u0438\\u0441\\u0442\\u043E\\u0447\\u043D\\u0438\\u043A ]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), \"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \", this.props.data.systemChangeRequestById.timeLeft, \" \\u0447 ( \", (this.props.data.systemChangeRequestById.timeLeft / this.props.data.systemChangeRequestById.estimate * 100).toFixed(2), \"% ) \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 213\n        }, this), \"\\u0421\\u0434\\u0435\\u043B\\u0430\\u043D\\u043E \", this.props.data.systemChangeRequestById.timeSpent, \" \\u0447 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 85\n        }, this), \"\\u041E\\u0446\\u0435\\u043D\\u043A\\u0430 \", this.props.data.systemChangeRequestById.estimate, \" \\u0447 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 83\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentCumsum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), plannedInstallDate ? /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(plannedInstallDate).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041F\\u043B\\u0430\\u043D\\u043E\\u0432\\u0430\\u044F \\u0434\\u0430\\u0442\\u0430 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0438\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 29\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: this.props.data.systemChangeRequestById.estimate,\n          stroke: \"black\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0421\\u043F\\u0438\\u0441\\u0430\\u043D\\u043E \\u0432\\u0441\\u0435\\u0433\\u043E\",\n          data: this.props.data.systemChangeRequestById.timeSheetsByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentCumsum: item.timeSpentCumsum\n            };\n          }),\n          line: true,\n          fill: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentCumsum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), plannedInstallDate ? /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(plannedInstallDate).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041F\\u043B\\u0430\\u043D\\u043E\\u0432\\u0430\\u044F \\u0434\\u0430\\u0442\\u0430 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0438\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 29\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: this.props.data.systemChangeRequestById.analysisEstimate,\n          stroke: \"red\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0421\\u043F\\u0438\\u0441\\u0430\\u043D\\u043E \\u0430\\u043D\\u0430\\u043B\\u0438\\u0442\\u0438\\u043A\\u0430\",\n          data: this.props.data.systemChangeRequestById.analysisTimeSheetsByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentCumsum: item.timeSpentCumsum\n            };\n          }),\n          line: true,\n          fill: \"red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentCumsum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this), plannedInstallDate ? /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(plannedInstallDate).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041F\\u043B\\u0430\\u043D\\u043E\\u0432\\u0430\\u044F \\u0434\\u0430\\u0442\\u0430 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0438\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 29\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: this.props.data.systemChangeRequestById.developmentEstimate,\n          stroke: \"green\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0421\\u043F\\u0438\\u0441\\u0430\\u043D\\u043E \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430\",\n          data: this.props.data.systemChangeRequestById.developmentTimeSheetsByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentCumsum: item.timeSpentCumsum\n            };\n          }),\n          line: true,\n          fill: \"green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(ScatterChart, {\n        width: 1440,\n        height: 200,\n        margin: {\n          left: -5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          type: \"number\",\n          domain: [xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28],\n          allowDataOverflow: true,\n          tickFormatter: date => moment(date).format('YYYY-MM-DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"timeSpentCumsum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n          type: \"number\",\n          range: [1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this), plannedInstallDate ? /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: new Date(plannedInstallDate).getTime(),\n          stroke: \"red\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u041F\\u043B\\u0430\\u043D\\u043E\\u0432\\u0430\\u044F \\u0434\\u0430\\u0442\\u0430 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0438\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 29\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          x: today,\n          stroke: \"blue\",\n          strokeDasharray: \"5 5\",\n          label: \"\\u0421\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n          y: this.props.data.systemChangeRequestById.testingEstimate,\n          stroke: \"blue\",\n          ifOverflow: \"extendDomain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"\\u0421\\u043F\\u0438\\u0441\\u0430\\u043D\\u043E \\u0442\\u0435\\u0441\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435\",\n          data: this.props.data.systemChangeRequestById.testingTimeSheetsByDate.map(item => {\n            return {\n              date: new Date(item.date).getTime(),\n              timeSpentCumsum: item.timeSpentCumsum\n            };\n          }),\n          line: true,\n          fill: \"blue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default graphql(fetchSystemChangeRequest, {\n  options: props => {\n    return {\n      variables: {\n        id: props.match.params.id\n      }\n    };\n  }\n})(SystemChangeRequestDetail);","map":{"version":3,"sources":["C:/Users/mikhaylovv/PycharmProjects/second_eye/client/src/components/SystemChangeRequestDetail.js"],"names":["React","Component","ScatterChart","CartesianGrid","Legend","XAxis","YAxis","ReferenceLine","ZAxis","Scatter","gql","graphql","moment","Typography","Box","Link","fetchSystemChangeRequest","SystemChangeRequestDetail","render","props","data","loading","plannedInstallDate","systemChangeRequestById","changeRequest","Date","getTime","timeSheetsByDate","today","firstTimeSheetDate","length","date","lastTimeSheetDate","allEdgeDates","push","xAxisStart","Math","min","xAxisEnd","max","location","pathname","id","name","state","url","timeLeft","estimate","toFixed","timeSpent","left","format","map","item","timeSpentCumsum","analysisEstimate","analysisTimeSheetsByDate","developmentEstimate","developmentTimeSheetsByDate","testingEstimate","testingTimeSheetsByDate","options","variables","match","params"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SACIC,YADJ,EAEIC,aAFJ,EAGIC,MAHJ,EAIIC,KAJJ,EAKIC,KALJ,EAMIC,aANJ,EAOIC,KAPJ,EAOWC,OAPX,QAQO,UARP;AASA,SAAQC,GAAR,QAAkB,gBAAlB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAAQC,GAAR,EAAaC,IAAb,QAAwB,mBAAxB;;AAEA,MAAMC,wBAAwB,GAAGN,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA/CA;;AAiDA,MAAMO,yBAAN,SAAwChB,SAAxC,CAAkD;AAC9CiB,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,OAApB,EAA6B;AAAE,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAA+B;;AAE9D,UAAMC,kBAAkB,GAAG,KAAKH,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCC,aAAxC,CAAsDF,kBAAtD,GAA2E,IAAIG,IAAJ,CAAS,KAAKN,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCC,aAAxC,CAAsDF,kBAA/D,EAAmFI,OAAnF,EAA3E,GAA0K,IAArM;AACA,UAAMC,gBAAgB,GAAG,KAAKR,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCI,gBAAjE;AAEA,UAAMC,KAAK,GAAI,IAAIH,IAAJ,EAAD,CAAaC,OAAb,EAAd;AACA,UAAMG,kBAAkB,GAAGF,gBAAgB,CAACG,MAAjB,GAA0B,CAA1B,GAA8B,IAAIL,IAAJ,CAASE,gBAAgB,CAAC,CAAD,CAAhB,CAAoBI,IAA7B,EAAmCL,OAAnC,EAA9B,GAA6E,IAAxG;AACA,UAAMM,iBAAiB,GAAGL,gBAAgB,CAACG,MAAjB,GAA0B,CAA1B,GAA8B,IAAIL,IAAJ,CAASE,gBAAgB,CAACA,gBAAgB,CAACG,MAAjB,GAA0B,CAA3B,CAAhB,CAA8CC,IAAvD,EAA6DL,OAA7D,EAA9B,GAAuG,IAAjI;AAEA,UAAMO,YAAY,GAAG,CAACL,KAAD,CAArB;;AACA,QAAIN,kBAAJ,EAAwB;AACpBW,MAAAA,YAAY,CAACC,IAAb,CAAkBZ,kBAAlB;AACH;;AAED,QAAIO,kBAAJ,EAAwB;AACpBI,MAAAA,YAAY,CAACC,IAAb,CAAkBL,kBAAlB;AACH;;AAED,QAAIG,iBAAJ,EAAuB;AACnBC,MAAAA,YAAY,CAACC,IAAb,CAAkBF,iBAAlB;AACH;;AAED,UAAMG,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGJ,YAAZ,CAAnB;AACA,UAAMK,QAAQ,GAAGF,IAAI,CAACG,GAAL,CAAS,GAAGN,YAAZ,CAAjB;AAEA,wBACI,QAAC,GAAD;AAAA,8BACI,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,OAApB;AAA4B,QAAA,MAAM,MAAlC;AAAA,gCACI,QAAC,IAAD;AAAM,UAAA,IAAI,EAAG,KAAKd,KAAL,CAAWqB,QAAX,CAAoBC,QAAjC;AAAA,oBACM,KAAKtB,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCmB;AAD9C;AAAA;AAAA;AAAA;AAAA,gBADJ,WAIM,KAAKvB,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCoB,IAJ9C,WAKM,KAAKxB,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCqB,KAAxC,CAA8CD,IALpD,wBAMI,QAAC,IAAD;AAAM,UAAA,IAAI,EAAG,KAAKxB,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCsB,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eASI;AAAA;AAAA;AAAA;AAAA,gBATJ,uDAUe,KAAK1B,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCuB,QAVvD,gBAUwE,CAAC,KAAK3B,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCuB,QAAxC,GAAmD,KAAK3B,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCwB,QAA3F,GAAsG,GAAvG,EAA4GC,OAA5G,CAAoH,CAApH,CAVxE,uBAUoM;AAAA;AAAA;AAAA;AAAA,gBAVpM,iDAWc,KAAK7B,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwC0B,SAXtD,2BAWoE;AAAA;AAAA;AAAA;AAAA,gBAXpE,2CAYa,KAAK9B,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCwB,QAZrD,2BAYkE;AAAA;AAAA;AAAA;AAAA,gBAZlE;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAeI;AAAA;AAAA;AAAA;AAAA,cAfJ,eAiBI,QAAC,YAAD;AACI,QAAA,KAAK,EAAE,IADX;AAEI,QAAA,MAAM,EAAE,GAFZ;AAGI,QAAA,MAAM,EAAE;AACJG,UAAAA,IAAI,EAAE,CAAC;AADH,SAHZ;AAAA,gCAOI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAQI,QAAC,KAAD;AACI,UAAA,OAAO,EAAC,MADZ;AAEI,UAAA,IAAI,EAAC,QAFT;AAGI,UAAA,MAAM,EAAE,CAACf,UAAU,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAApC,EAAwCG,QAAQ,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAAzE,CAHZ;AAII,UAAA,iBAAiB,EAAE,IAJvB;AAKI,UAAA,aAAa,EAAGP,IAAD,IAAUnB,MAAM,CAACmB,IAAD,CAAN,CAAaoB,MAAb,CAAoB,YAApB;AAL7B;AAAA;AAAA;AAAA;AAAA,gBARJ,eAeI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,OAAO,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAfJ,eAgBI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAE,CAAC,CAAD;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAhBJ,eAiBI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAjBJ,EAoBS7B,kBAAD,gBACI,QAAC,aAAD;AAAe,UAAA,CAAC,EAAG,IAAIG,IAAJ,CAASH,kBAAT,EAA6BI,OAA7B,EAAnB;AAA4D,UAAA,MAAM,EAAC,KAAnE;AAAyE,UAAA,eAAe,EAAC,KAAzF;AAA+F,UAAA,KAAK,EAAC,kIAArG;AAA+H,UAAA,UAAU,EAAC;AAA1I;AAAA;AAAA;AAAA;AAAA,gBADJ,GAEI,EAtBZ,eAyBI,QAAC,aAAD;AAAe,UAAA,CAAC,EAAGE,KAAnB;AAA2B,UAAA,MAAM,EAAC,MAAlC;AAAyC,UAAA,eAAe,EAAC,KAAzD;AAA+D,UAAA,KAAK,EAAC,4CAArE;AAA+E,UAAA,UAAU,EAAC;AAA1F;AAAA;AAAA;AAAA;AAAA,gBAzBJ,eA2BI,QAAC,aAAD;AAAe,UAAA,CAAC,EAAE,KAAKT,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCwB,QAA1D;AAAoE,UAAA,MAAM,EAAC,OAA3E;AAAmF,UAAA,UAAU,EAAC;AAA9F;AAAA;AAAA;AAAA;AAAA,gBA3BJ,eA4BI,QAAC,OAAD;AACI,UAAA,IAAI,EAAC,2EADT;AAEI,UAAA,IAAI,EACA,KAAK5B,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCI,gBAAxC,CAAyDyB,GAAzD,CAA6DC,IAAI,IAAI;AACjE,mBAAO;AAAEtB,cAAAA,IAAI,EAAE,IAAIN,IAAJ,CAAS4B,IAAI,CAACtB,IAAd,EAAoBL,OAApB,EAAR;AAAuC4B,cAAAA,eAAe,EAAED,IAAI,CAACC;AAA7D,aAAP;AACH,WAFD,CAHR;AAOI,UAAA,IAAI,MAPR;AAOS,UAAA,IAAI,EAAC;AAPd;AAAA;AAAA;AAAA;AAAA,gBA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBJ,eAuDI,QAAC,YAAD;AACI,QAAA,KAAK,EAAE,IADX;AAEI,QAAA,MAAM,EAAE,GAFZ;AAGI,QAAA,MAAM,EAAE;AACJJ,UAAAA,IAAI,EAAE,CAAC;AADH,SAHZ;AAAA,gCAOI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAQI,QAAC,KAAD;AACI,UAAA,OAAO,EAAC,MADZ;AAEI,UAAA,IAAI,EAAC,QAFT;AAGI,UAAA,MAAM,EAAE,CAACf,UAAU,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAApC,EAAwCG,QAAQ,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAAzE,CAHZ;AAII,UAAA,iBAAiB,EAAE,IAJvB;AAKI,UAAA,aAAa,EAAGP,IAAD,IAAUnB,MAAM,CAACmB,IAAD,CAAN,CAAaoB,MAAb,CAAoB,YAApB;AAL7B;AAAA;AAAA;AAAA;AAAA,gBARJ,eAeI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,OAAO,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAfJ,eAgBI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAE,CAAC,CAAD;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAhBJ,eAiBI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAjBJ,EAoBS7B,kBAAD,gBACI,QAAC,aAAD;AAAe,UAAA,CAAC,EAAG,IAAIG,IAAJ,CAASH,kBAAT,EAA6BI,OAA7B,EAAnB;AAA4D,UAAA,MAAM,EAAC,KAAnE;AAAyE,UAAA,eAAe,EAAC,KAAzF;AAA+F,UAAA,KAAK,EAAC,kIAArG;AAA+H,UAAA,UAAU,EAAC;AAA1I;AAAA;AAAA;AAAA;AAAA,gBADJ,GAEI,EAtBZ,eAyBI,QAAC,aAAD;AAAe,UAAA,CAAC,EAAGE,KAAnB;AAA2B,UAAA,MAAM,EAAC,MAAlC;AAAyC,UAAA,eAAe,EAAC,KAAzD;AAA+D,UAAA,KAAK,EAAC,4CAArE;AAA+E,UAAA,UAAU,EAAC;AAA1F;AAAA;AAAA;AAAA;AAAA,gBAzBJ,eA2BI,QAAC,aAAD;AAAe,UAAA,CAAC,EAAE,KAAKT,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCgC,gBAA1D;AAA4E,UAAA,MAAM,EAAC,KAAnF;AAAyF,UAAA,UAAU,EAAC;AAApG;AAAA;AAAA;AAAA;AAAA,gBA3BJ,eA4BI,QAAC,OAAD;AACI,UAAA,IAAI,EAAC,mGADT;AAEI,UAAA,IAAI,EACA,KAAKpC,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCiC,wBAAxC,CAAiEJ,GAAjE,CAAqEC,IAAI,IAAI;AACzE,mBAAO;AAAEtB,cAAAA,IAAI,EAAE,IAAIN,IAAJ,CAAS4B,IAAI,CAACtB,IAAd,EAAoBL,OAApB,EAAR;AAAuC4B,cAAAA,eAAe,EAAED,IAAI,CAACC;AAA7D,aAAP;AACH,WAFD,CAHR;AAOI,UAAA,IAAI,MAPR;AAOS,UAAA,IAAI,EAAC;AAPd;AAAA;AAAA;AAAA;AAAA,gBA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAvDJ,eA6FK,QAAC,YAAD;AACG,QAAA,KAAK,EAAE,IADV;AAEG,QAAA,MAAM,EAAE,GAFX;AAGG,QAAA,MAAM,EAAE;AACJJ,UAAAA,IAAI,EAAE,CAAC;AADH,SAHX;AAAA,gCAOG,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBAPH,eAQG,QAAC,KAAD;AACI,UAAA,OAAO,EAAC,MADZ;AAEI,UAAA,IAAI,EAAC,QAFT;AAGI,UAAA,MAAM,EAAE,CAACf,UAAU,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAApC,EAAwCG,QAAQ,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAAzE,CAHZ;AAII,UAAA,iBAAiB,EAAE,IAJvB;AAKI,UAAA,aAAa,EAAGP,IAAD,IAAUnB,MAAM,CAACmB,IAAD,CAAN,CAAaoB,MAAb,CAAoB,YAApB;AAL7B;AAAA;AAAA;AAAA;AAAA,gBARH,eAeG,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,OAAO,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAfH,eAgBG,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAE,CAAC,CAAD;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAhBH,eAiBG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAjBH,EAoBQ7B,kBAAD,gBACI,QAAC,aAAD;AAAe,UAAA,CAAC,EAAG,IAAIG,IAAJ,CAASH,kBAAT,EAA6BI,OAA7B,EAAnB;AAA4D,UAAA,MAAM,EAAC,KAAnE;AAAyE,UAAA,eAAe,EAAC,KAAzF;AAA+F,UAAA,KAAK,EAAC,kIAArG;AAA+H,UAAA,UAAU,EAAC;AAA1I;AAAA;AAAA;AAAA;AAAA,gBADJ,GAEI,EAtBX,eAyBG,QAAC,aAAD;AAAe,UAAA,CAAC,EAAGE,KAAnB;AAA2B,UAAA,MAAM,EAAC,MAAlC;AAAyC,UAAA,eAAe,EAAC,KAAzD;AAA+D,UAAA,KAAK,EAAC,4CAArE;AAA+E,UAAA,UAAU,EAAC;AAA1F;AAAA;AAAA;AAAA;AAAA,gBAzBH,eA2BG,QAAC,aAAD;AAAe,UAAA,CAAC,EAAE,KAAKT,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCkC,mBAA1D;AAA+E,UAAA,MAAM,EAAC,OAAtF;AAA8F,UAAA,UAAU,EAAC;AAAzG;AAAA;AAAA;AAAA;AAAA,gBA3BH,eA4BG,QAAC,OAAD;AACI,UAAA,IAAI,EAAC,yGADT;AAEI,UAAA,IAAI,EACA,KAAKtC,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCmC,2BAAxC,CAAoEN,GAApE,CAAwEC,IAAI,IAAI;AAC5E,mBAAO;AAAEtB,cAAAA,IAAI,EAAE,IAAIN,IAAJ,CAAS4B,IAAI,CAACtB,IAAd,EAAoBL,OAApB,EAAR;AAAuC4B,cAAAA,eAAe,EAAED,IAAI,CAACC;AAA7D,aAAP;AACH,WAFD,CAHR;AAOI,UAAA,IAAI,MAPR;AAOS,UAAA,IAAI,EAAC;AAPd;AAAA;AAAA;AAAA;AAAA,gBA5BH;AAAA;AAAA;AAAA;AAAA;AAAA,cA7FL,eAmII,QAAC,YAAD;AACI,QAAA,KAAK,EAAE,IADX;AAEI,QAAA,MAAM,EAAE,GAFZ;AAGI,QAAA,MAAM,EAAE;AACJJ,UAAAA,IAAI,EAAE,CAAC;AADH,SAHZ;AAAA,gCAOI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAQI,QAAC,KAAD;AACI,UAAA,OAAO,EAAC,MADZ;AAEI,UAAA,IAAI,EAAC,QAFT;AAGI,UAAA,MAAM,EAAE,CAACf,UAAU,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAApC,EAAwCG,QAAQ,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAAzE,CAHZ;AAII,UAAA,iBAAiB,EAAE,IAJvB;AAKI,UAAA,aAAa,EAAGP,IAAD,IAAUnB,MAAM,CAACmB,IAAD,CAAN,CAAaoB,MAAb,CAAoB,YAApB;AAL7B;AAAA;AAAA;AAAA;AAAA,gBARJ,eAeI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,OAAO,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAfJ,eAgBI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAE,CAAC,CAAD;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAhBJ,eAiBI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAjBJ,EAoBS7B,kBAAD,gBACI,QAAC,aAAD;AAAe,UAAA,CAAC,EAAG,IAAIG,IAAJ,CAASH,kBAAT,EAA6BI,OAA7B,EAAnB;AAA4D,UAAA,MAAM,EAAC,KAAnE;AAAyE,UAAA,eAAe,EAAC,KAAzF;AAA+F,UAAA,KAAK,EAAC,kIAArG;AAA+H,UAAA,UAAU,EAAC;AAA1I;AAAA;AAAA;AAAA;AAAA,gBADJ,GAEI,EAtBZ,eAyBI,QAAC,aAAD;AAAe,UAAA,CAAC,EAAGE,KAAnB;AAA2B,UAAA,MAAM,EAAC,MAAlC;AAAyC,UAAA,eAAe,EAAC,KAAzD;AAA+D,UAAA,KAAK,EAAC,4CAArE;AAA+E,UAAA,UAAU,EAAC;AAA1F;AAAA;AAAA;AAAA;AAAA,gBAzBJ,eA2BI,QAAC,aAAD;AAAe,UAAA,CAAC,EAAE,KAAKT,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCoC,eAA1D;AAA2E,UAAA,MAAM,EAAC,MAAlF;AAAyF,UAAA,UAAU,EAAC;AAApG;AAAA;AAAA;AAAA;AAAA,gBA3BJ,eA4BI,QAAC,OAAD;AACI,UAAA,IAAI,EAAC,qHADT;AAEI,UAAA,IAAI,EACA,KAAKxC,KAAL,CAAWC,IAAX,CAAgBG,uBAAhB,CAAwCqC,uBAAxC,CAAgER,GAAhE,CAAoEC,IAAI,IAAI;AACxE,mBAAO;AAAEtB,cAAAA,IAAI,EAAE,IAAIN,IAAJ,CAAS4B,IAAI,CAACtB,IAAd,EAAoBL,OAApB,EAAR;AAAuC4B,cAAAA,eAAe,EAAED,IAAI,CAACC;AAA7D,aAAP;AACH,WAFD,CAHR;AAOI,UAAA,IAAI,MAPR;AAOS,UAAA,IAAI,EAAC;AAPd;AAAA;AAAA;AAAA;AAAA,gBA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAnIJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA4KH;;AAvM6C;;AA0MlD,eAAe3C,OAAO,CAACK,wBAAD,EAA2B;AAC7C6C,EAAAA,OAAO,EAAG1C,KAAD,IAAW;AAAE,WAAO;AAAE2C,MAAAA,SAAS,EAAE;AAAEpB,QAAAA,EAAE,EAAEvB,KAAK,CAAC4C,KAAN,CAAYC,MAAZ,CAAmBtB;AAAzB;AAAb,KAAP;AAAmD;AAD5B,CAA3B,CAAP,CAEZzB,yBAFY,CAAf","sourcesContent":["import React, {Component} from \"react\";\r\nimport {\r\n    ScatterChart,\r\n    CartesianGrid,\r\n    Legend,\r\n    XAxis,\r\n    YAxis,\r\n    ReferenceLine,\r\n    ZAxis, Scatter\r\n} from \"recharts\";\r\nimport {gql} from '@apollo/client';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport moment from 'moment';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Box, Link} from \"@material-ui/core\";\r\n\r\nconst fetchSystemChangeRequest = gql`\r\n    query SystemChangeRequestByIdQuery($id: String!) {\r\n        systemChangeRequestById(id: $id) {\r\n            id \r\n            url\r\n            name\r\n            state {\r\n                name\r\n            }\r\n            \r\n            analysisEstimate\r\n            analysisTimeSpent\r\n            analysisTimeLeft\r\n            analysisTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            developmentEstimate\r\n            developmentTimeSpent\r\n            developmentTimeLeft\r\n            developmentTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            testingEstimate\r\n            testingTimeSpent\r\n            testingTimeLeft\r\n            testingTimeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            estimate\r\n            timeSpent\r\n            timeLeft\r\n            timeSheetsByDate {\r\n                date\r\n                timeSpentCumsum\r\n            }\r\n            \r\n            changeRequest {\r\n                plannedInstallDate\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass SystemChangeRequestDetail extends Component {\r\n    render() {\r\n        if (this.props.data.loading) { return <div>Loading ...</div> }\r\n\r\n        const plannedInstallDate = this.props.data.systemChangeRequestById.changeRequest.plannedInstallDate ? new Date(this.props.data.systemChangeRequestById.changeRequest.plannedInstallDate).getTime() : null\r\n        const timeSheetsByDate = this.props.data.systemChangeRequestById.timeSheetsByDate\r\n\r\n        const today = (new Date()).getTime()\r\n        const firstTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[0].date).getTime() : null\r\n        const lastTimeSheetDate = timeSheetsByDate.length > 0 ? new Date(timeSheetsByDate[timeSheetsByDate.length - 1].date).getTime() : null\r\n\r\n        const allEdgeDates = [today]\r\n        if (plannedInstallDate) {\r\n            allEdgeDates.push(plannedInstallDate)\r\n        }\r\n\r\n        if (firstTimeSheetDate) {\r\n            allEdgeDates.push(firstTimeSheetDate)\r\n        }\r\n\r\n        if (lastTimeSheetDate) {\r\n            allEdgeDates.push(lastTimeSheetDate)\r\n        }\r\n\r\n        const xAxisStart = Math.min(...allEdgeDates)\r\n        const xAxisEnd = Math.max(...allEdgeDates)\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"body1\" noWrap>\r\n                    <Link href={ this.props.location.pathname }>\r\n                        { this.props.data.systemChangeRequestById.id }\r\n                    </Link> &nbsp;\r\n                    { this.props.data.systemChangeRequestById.name } &nbsp;\r\n                    { this.props.data.systemChangeRequestById.state.name } &nbsp;\r\n                    <Link href={ this.props.data.systemChangeRequestById.url }>\r\n                        [ источник ]\r\n                    </Link>\r\n                    <br />\r\n                    Осталось { this.props.data.systemChangeRequestById.timeLeft } ч ( { (this.props.data.systemChangeRequestById.timeLeft / this.props.data.systemChangeRequestById.estimate * 100).toFixed(2) }% ) <br />\r\n                    Сделано { this.props.data.systemChangeRequestById.timeSpent } ч <br />\r\n                    Оценка { this.props.data.systemChangeRequestById.estimate } ч <br />\r\n                </Typography>\r\n                <br />\r\n\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis type=\"number\" dataKey=\"timeSpentCumsum\" />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n                    {\r\n                        (plannedInstallDate) ?\r\n                            <ReferenceLine x={ new Date(plannedInstallDate).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Плановая дата установки\" ifOverflow=\"extendDomain\"/> :\r\n                            \"\"\r\n                    }\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={this.props.data.systemChangeRequestById.estimate} stroke=\"black\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано всего\"\r\n                        data= {\r\n                            this.props.data.systemChangeRequestById.timeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"black\"\r\n                    />\r\n                </ScatterChart>\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis type=\"number\" dataKey=\"timeSpentCumsum\" />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n                    {\r\n                        (plannedInstallDate) ?\r\n                            <ReferenceLine x={ new Date(plannedInstallDate).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Плановая дата установки\" ifOverflow=\"extendDomain\"/> :\r\n                            \"\"\r\n                    }\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={this.props.data.systemChangeRequestById.analysisEstimate} stroke=\"red\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано аналитика\"\r\n                        data= {\r\n                            this.props.data.systemChangeRequestById.analysisTimeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"red\"\r\n                    />\r\n                </ScatterChart>\r\n                 <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis type=\"number\" dataKey=\"timeSpentCumsum\" />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n                    {\r\n                        (plannedInstallDate) ?\r\n                            <ReferenceLine x={ new Date(plannedInstallDate).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Плановая дата установки\" ifOverflow=\"extendDomain\"/> :\r\n                            \"\"\r\n                    }\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={this.props.data.systemChangeRequestById.developmentEstimate} stroke=\"green\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано разработка\"\r\n                        data= {\r\n                            this.props.data.systemChangeRequestById.developmentTimeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"green\"\r\n                    />\r\n                </ScatterChart>\r\n                <ScatterChart\r\n                    width={1440}\r\n                    height={200}\r\n                    margin={{\r\n                        left: -5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid />\r\n                    <XAxis\r\n                        dataKey=\"date\"\r\n                        type=\"number\"\r\n                        domain={[xAxisStart - 1000 * 60 * 60 * 24 * 28, xAxisEnd + 1000 * 60 * 60 * 24 * 28]}\r\n                        allowDataOverflow={true}\r\n                        tickFormatter={(date) => moment(date).format('YYYY-MM-DD')}\r\n                    />\r\n                    <YAxis type=\"number\" dataKey=\"timeSpentCumsum\" />\r\n                    <ZAxis type=\"number\" range={[1]} />\r\n                    <Legend/>\r\n\r\n                    {\r\n                        (plannedInstallDate) ?\r\n                            <ReferenceLine x={ new Date(plannedInstallDate).getTime() } stroke=\"red\" strokeDasharray=\"5 5\" label=\"Плановая дата установки\" ifOverflow=\"extendDomain\"/> :\r\n                            \"\"\r\n                    }\r\n\r\n                    <ReferenceLine x={ today } stroke=\"blue\" strokeDasharray=\"5 5\" label=\"Сегодня\" ifOverflow=\"extendDomain\"/>\r\n\r\n                    <ReferenceLine y={this.props.data.systemChangeRequestById.testingEstimate} stroke=\"blue\" ifOverflow=\"extendDomain\" />\r\n                    <Scatter\r\n                        name=\"Списано тестирование\"\r\n                        data= {\r\n                            this.props.data.systemChangeRequestById.testingTimeSheetsByDate.map(item => {\r\n                                return { date: new Date(item.date).getTime(), timeSpentCumsum: item.timeSpentCumsum }\r\n                            })\r\n                        }\r\n                        line fill=\"blue\"\r\n                    />\r\n                </ScatterChart>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(fetchSystemChangeRequest, {\r\n    options: (props) => { return { variables: { id: props.match.params.id }}}\r\n})(SystemChangeRequestDetail);"]},"metadata":{},"sourceType":"module"}